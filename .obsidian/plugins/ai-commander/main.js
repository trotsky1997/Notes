/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/openai/node_modules/axios/lib/helpers/bind.js
var require_bind = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/bind.js"(exports, module2) {
    "use strict";
    module2.exports = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };
  }
});

// node_modules/openai/node_modules/axios/lib/utils.js
var require_utils = __commonJS({
  "node_modules/openai/node_modules/axios/lib/utils.js"(exports, module2) {
    "use strict";
    var bind = require_bind();
    var toString = Object.prototype.toString;
    function isArray(val) {
      return Array.isArray(val);
    }
    function isUndefined(val) {
      return typeof val === "undefined";
    }
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
    }
    function isArrayBuffer(val) {
      return toString.call(val) === "[object ArrayBuffer]";
    }
    function isFormData(val) {
      return toString.call(val) === "[object FormData]";
    }
    function isArrayBufferView(val) {
      var result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    function isString(val) {
      return typeof val === "string";
    }
    function isNumber(val) {
      return typeof val === "number";
    }
    function isObject(val) {
      return val !== null && typeof val === "object";
    }
    function isPlainObject(val) {
      if (toString.call(val) !== "[object Object]") {
        return false;
      }
      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }
    function isDate(val) {
      return toString.call(val) === "[object Date]";
    }
    function isFile(val) {
      return toString.call(val) === "[object File]";
    }
    function isBlob(val) {
      return toString.call(val) === "[object Blob]";
    }
    function isFunction(val) {
      return toString.call(val) === "[object Function]";
    }
    function isStream(val) {
      return isObject(val) && isFunction(val.pipe);
    }
    function isURLSearchParams(val) {
      return toString.call(val) === "[object URLSearchParams]";
    }
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
    }
    function isStandardBrowserEnv() {
      if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) {
        return false;
      }
      return typeof window !== "undefined" && typeof document !== "undefined";
    }
    function forEach(obj, fn) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }
    function merge() {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) {
          result[key] = merge(result[key], val);
        } else if (isPlainObject(val)) {
          result[key] = merge({}, val);
        } else if (isArray(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }
      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }
    function extend(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }
    function stripBOM(content) {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    }
    module2.exports = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isObject,
      isPlainObject,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isFunction,
      isStream,
      isURLSearchParams,
      isStandardBrowserEnv,
      forEach,
      merge,
      extend,
      trim,
      stripBOM
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/buildURL.js
var require_buildURL = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/buildURL.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    module2.exports = function buildURL(url, params, paramsSerializer) {
      if (!params) {
        return url;
      }
      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === "undefined") {
            return;
          }
          if (utils.isArray(val)) {
            key = key + "[]";
          } else {
            val = [val];
          }
          utils.forEach(val, function parseValue(v) {
            if (utils.isDate(v)) {
              v = v.toISOString();
            } else if (utils.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + "=" + encode(v));
          });
        });
        serializedParams = parts.join("&");
      }
      if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/InterceptorManager.js
var require_InterceptorManager = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/InterceptorManager.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    function InterceptorManager() {
      this.handlers = [];
    }
    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };
    InterceptorManager.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };
    InterceptorManager.prototype.forEach = function forEach(fn) {
      utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };
    module2.exports = InterceptorManager;
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/normalizeHeaderName.js
var require_normalizeHeaderName = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/normalizeHeaderName.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function normalizeHeaderName(headers, normalizedName) {
      utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/enhanceError.js
var require_enhanceError = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/enhanceError.js"(exports, module2) {
    "use strict";
    module2.exports = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }
      error.request = request;
      error.response = response;
      error.isAxiosError = true;
      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/defaults/transitional.js
var require_transitional = __commonJS({
  "node_modules/openai/node_modules/axios/lib/defaults/transitional.js"(exports, module2) {
    "use strict";
    module2.exports = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/createError.js
var require_createError = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/createError.js"(exports, module2) {
    "use strict";
    var enhanceError = require_enhanceError();
    module2.exports = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError(error, config, code, request, response);
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/settle.js
var require_settle = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/settle.js"(exports, module2) {
    "use strict";
    var createError = require_createError();
    module2.exports = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError(
          "Request failed with status code " + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/cookies.js
var require_cookies = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/cookies.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs support document.cookie
      function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) {
              cookie.push("expires=" + new Date(expires).toGMTString());
            }
            if (utils.isString(path)) {
              cookie.push("path=" + path);
            }
            if (utils.isString(domain)) {
              cookie.push("domain=" + domain);
            }
            if (secure === true) {
              cookie.push("secure");
            }
            document.cookie = cookie.join("; ");
          },
          read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
          },
          remove: function remove(name) {
            this.write(name, "", Date.now() - 864e5);
          }
        };
      }()
    ) : (
      // Non standard browser env (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return {
          write: function write() {
          },
          read: function read() {
            return null;
          },
          remove: function remove() {
          }
        };
      }()
    );
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/isAbsoluteURL.js
var require_isAbsoluteURL = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/isAbsoluteURL.js"(exports, module2) {
    "use strict";
    module2.exports = function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/combineURLs.js
var require_combineURLs = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/combineURLs.js"(exports, module2) {
    "use strict";
    module2.exports = function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/buildFullPath.js
var require_buildFullPath = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/buildFullPath.js"(exports, module2) {
    "use strict";
    var isAbsoluteURL = require_isAbsoluteURL();
    var combineURLs = require_combineURLs();
    module2.exports = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/parseHeaders.js
var require_parseHeaders = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/parseHeaders.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var ignoreDuplicateOf = [
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ];
    module2.exports = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;
      if (!headers) {
        return parsed;
      }
      utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === "set-cookie") {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
          }
        }
      });
      return parsed;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/isURLSameOrigin.js
var require_isURLSameOrigin = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/isURLSameOrigin.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = utils.isStandardBrowserEnv() ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement("a");
        var originURL;
        function resolveURL(url) {
          var href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin(requestURL) {
          var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      }()
    );
  }
});

// node_modules/openai/node_modules/axios/lib/cancel/Cancel.js
var require_Cancel = __commonJS({
  "node_modules/openai/node_modules/axios/lib/cancel/Cancel.js"(exports, module2) {
    "use strict";
    function Cancel(message) {
      this.message = message;
    }
    Cancel.prototype.toString = function toString() {
      return "Cancel" + (this.message ? ": " + this.message : "");
    };
    Cancel.prototype.__CANCEL__ = true;
    module2.exports = Cancel;
  }
});

// node_modules/openai/node_modules/axios/lib/adapters/xhr.js
var require_xhr = __commonJS({
  "node_modules/openai/node_modules/axios/lib/adapters/xhr.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var settle = require_settle();
    var cookies = require_cookies();
    var buildURL = require_buildURL();
    var buildFullPath = require_buildFullPath();
    var parseHeaders = require_parseHeaders();
    var isURLSameOrigin = require_isURLSameOrigin();
    var createError = require_createError();
    var transitionalDefaults = require_transitional();
    var Cancel = require_Cancel();
    module2.exports = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }
          if (config.signal) {
            config.signal.removeEventListener("abort", onCanceled);
          }
        }
        if (utils.isFormData(requestData)) {
          delete requestHeaders["Content-Type"];
        }
        var request = new XMLHttpRequest();
        if (config.auth) {
          var username = config.auth.username || "";
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
          requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        request.timeout = config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(createError("Request aborted", config, "ECONNABORTED", request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(createError("Network Error", config, null, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
          var transitional = config.transitional || transitionalDefaults;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED",
            request
          ));
          request = null;
        };
        if (utils.isStandardBrowserEnv()) {
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;
          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }
        if ("setRequestHeader" in request) {
          utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") {
              delete requestHeaders[key];
            } else {
              request.setRequestHeader(key, val);
            }
          });
        }
        if (!utils.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = config.responseType;
        }
        if (typeof config.onDownloadProgress === "function") {
          request.addEventListener("progress", config.onDownloadProgress);
        }
        if (typeof config.onUploadProgress === "function" && request.upload) {
          request.upload.addEventListener("progress", config.onUploadProgress);
        }
        if (config.cancelToken || config.signal) {
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || cancel && cancel.type ? new Cancel("canceled") : cancel);
            request.abort();
            request = null;
          };
          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener("abort", onCanceled);
          }
        }
        if (!requestData) {
          requestData = null;
        }
        request.send(requestData);
      });
    };
  }
});

// node_modules/openai/node_modules/axios/lib/defaults/index.js
var require_defaults = __commonJS({
  "node_modules/openai/node_modules/axios/lib/defaults/index.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var normalizeHeaderName = require_normalizeHeaderName();
    var enhanceError = require_enhanceError();
    var transitionalDefaults = require_transitional();
    var DEFAULT_CONTENT_TYPE = {
      "Content-Type": "application/x-www-form-urlencoded"
    };
    function setContentTypeIfUnset(headers, value) {
      if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) {
        headers["Content-Type"] = value;
      }
    }
    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== "undefined") {
        adapter = require_xhr();
      } else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") {
        adapter = require_xhr();
      }
      return adapter;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: getDefaultAdapter(),
      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, "Accept");
        normalizeHeaderName(headers, "Content-Type");
        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
          return data;
        }
        if (utils.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
          return data.toString();
        }
        if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
          setContentTypeIfUnset(headers, "application/json");
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw enhanceError(e, this, "E_JSON_PARSE");
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*"
        }
      }
    };
    utils.forEach(["delete", "get", "head"], function forEachMethodNoData(method) {
      defaults.headers[method] = {};
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
    });
    module2.exports = defaults;
  }
});

// node_modules/openai/node_modules/axios/lib/core/transformData.js
var require_transformData = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/transformData.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var defaults = require_defaults();
    module2.exports = function transformData(data, headers, fns) {
      var context = this || defaults;
      utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });
      return data;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/cancel/isCancel.js
var require_isCancel = __commonJS({
  "node_modules/openai/node_modules/axios/lib/cancel/isCancel.js"(exports, module2) {
    "use strict";
    module2.exports = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/dispatchRequest.js
var require_dispatchRequest = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/dispatchRequest.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var transformData = require_transformData();
    var isCancel = require_isCancel();
    var defaults = require_defaults();
    var Cancel = require_Cancel();
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new Cancel("canceled");
      }
    }
    module2.exports = function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = config.headers || {};
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );
      config.headers = utils.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );
      utils.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );
      var adapter = config.adapter || defaults.adapter;
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }
        return Promise.reject(reason);
      });
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/mergeConfig.js
var require_mergeConfig = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/mergeConfig.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function mergeConfig(config1, config2) {
      config2 = config2 || {};
      var config = {};
      function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
          return utils.merge(target, source);
        } else if (utils.isPlainObject(source)) {
          return utils.merge({}, source);
        } else if (utils.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        }
      }
      function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) {
          return getMergedValue(void 0, config2[prop]);
        } else if (!utils.isUndefined(config1[prop])) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(void 0, config1[prop]);
        }
      }
      var mergeMap = {
        "url": valueFromConfig2,
        "method": valueFromConfig2,
        "data": valueFromConfig2,
        "baseURL": defaultToConfig2,
        "transformRequest": defaultToConfig2,
        "transformResponse": defaultToConfig2,
        "paramsSerializer": defaultToConfig2,
        "timeout": defaultToConfig2,
        "timeoutMessage": defaultToConfig2,
        "withCredentials": defaultToConfig2,
        "adapter": defaultToConfig2,
        "responseType": defaultToConfig2,
        "xsrfCookieName": defaultToConfig2,
        "xsrfHeaderName": defaultToConfig2,
        "onUploadProgress": defaultToConfig2,
        "onDownloadProgress": defaultToConfig2,
        "decompress": defaultToConfig2,
        "maxContentLength": defaultToConfig2,
        "maxBodyLength": defaultToConfig2,
        "transport": defaultToConfig2,
        "httpAgent": defaultToConfig2,
        "httpsAgent": defaultToConfig2,
        "cancelToken": defaultToConfig2,
        "socketPath": defaultToConfig2,
        "responseEncoding": defaultToConfig2,
        "validateStatus": mergeDirectKeys
      };
      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/env/data.js
var require_data = __commonJS({
  "node_modules/openai/node_modules/axios/lib/env/data.js"(exports, module2) {
    module2.exports = {
      "version": "0.26.1"
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/validator.js
var require_validator = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/validator.js"(exports, module2) {
    "use strict";
    var VERSION = require_data().version;
    var validators = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(type, i) {
      validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, " has been removed" + (version ? " in " + version : "")));
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator ? validator(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === void 0 || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError("option " + opt + " must be " + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error("Unknown option " + opt);
        }
      }
    }
    module2.exports = {
      assertOptions,
      validators
    };
  }
});

// node_modules/openai/node_modules/axios/lib/core/Axios.js
var require_Axios = __commonJS({
  "node_modules/openai/node_modules/axios/lib/core/Axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var buildURL = require_buildURL();
    var InterceptorManager = require_InterceptorManager();
    var dispatchRequest = require_dispatchRequest();
    var mergeConfig = require_mergeConfig();
    var validator = require_validator();
    var validators = validator.validators;
    function Axios(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }
    Axios.prototype.request = function request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = "get";
      }
      var transitional = config.transitional;
      if (transitional !== void 0) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, void 0];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }
        return promise;
      }
      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }
      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }
      return promise;
    };
    Axios.prototype.getUri = function getUri(config) {
      config = mergeConfig(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
    };
    utils.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data
        }));
      };
    });
    module2.exports = Axios;
  }
});

// node_modules/openai/node_modules/axios/lib/cancel/CancelToken.js
var require_CancelToken = __commonJS({
  "node_modules/openai/node_modules/axios/lib/cancel/CancelToken.js"(exports, module2) {
    "use strict";
    var Cancel = require_Cancel();
    function CancelToken(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      var resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      var token = this;
      this.promise.then(function(cancel) {
        if (!token._listeners)
          return;
        var i;
        var l = token._listeners.length;
        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = function(onfulfilled) {
        var _resolve;
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message) {
        if (token.reason) {
          return;
        }
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };
    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };
    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    };
    module2.exports = CancelToken;
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/spread.js
var require_spread = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/spread.js"(exports, module2) {
    "use strict";
    module2.exports = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };
  }
});

// node_modules/openai/node_modules/axios/lib/helpers/isAxiosError.js
var require_isAxiosError = __commonJS({
  "node_modules/openai/node_modules/axios/lib/helpers/isAxiosError.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = function isAxiosError(payload) {
      return utils.isObject(payload) && payload.isAxiosError === true;
    };
  }
});

// node_modules/openai/node_modules/axios/lib/axios.js
var require_axios = __commonJS({
  "node_modules/openai/node_modules/axios/lib/axios.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    var bind = require_bind();
    var Axios = require_Axios();
    var mergeConfig = require_mergeConfig();
    var defaults = require_defaults();
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);
      utils.extend(instance, Axios.prototype, context);
      utils.extend(instance, context);
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults);
    axios.Axios = Axios;
    axios.Cancel = require_Cancel();
    axios.CancelToken = require_CancelToken();
    axios.isCancel = require_isCancel();
    axios.VERSION = require_data().version;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = require_spread();
    axios.isAxiosError = require_isAxiosError();
    module2.exports = axios;
    module2.exports.default = axios;
  }
});

// node_modules/openai/node_modules/axios/index.js
var require_axios2 = __commonJS({
  "node_modules/openai/node_modules/axios/index.js"(exports, module2) {
    module2.exports = require_axios();
  }
});

// node_modules/openai/dist/base.js
var require_base = __commonJS({
  "node_modules/openai/dist/base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;
    var axios_1 = require_axios2();
    exports.BASE_PATH = "https://api.openai.com/v1".replace(/\/+$/, "");
    exports.COLLECTION_FORMATS = {
      csv: ",",
      ssv: " ",
      tsv: "	",
      pipes: "|"
    };
    var BaseAPI = class {
      constructor(configuration, basePath = exports.BASE_PATH, axios = axios_1.default) {
        this.basePath = basePath;
        this.axios = axios;
        if (configuration) {
          this.configuration = configuration;
          this.basePath = configuration.basePath || this.basePath;
        }
      }
    };
    exports.BaseAPI = BaseAPI;
    var RequiredError = class extends Error {
      constructor(field, msg) {
        super(msg);
        this.field = field;
        this.name = "RequiredError";
      }
    };
    exports.RequiredError = RequiredError;
  }
});

// node_modules/openai/dist/common.js
var require_common = __commonJS({
  "node_modules/openai/dist/common.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRequestFunction = exports.toPathString = exports.serializeDataIfNeeded = exports.setSearchParams = exports.setOAuthToObject = exports.setBearerAuthToObject = exports.setBasicAuthToObject = exports.setApiKeyToObject = exports.assertParamExists = exports.DUMMY_BASE_URL = void 0;
    var base_1 = require_base();
    exports.DUMMY_BASE_URL = "https://example.com";
    exports.assertParamExists = function(functionName, paramName, paramValue) {
      if (paramValue === null || paramValue === void 0) {
        throw new base_1.RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);
      }
    };
    exports.setApiKeyToObject = function(object, keyParamName, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.apiKey) {
          const localVarApiKeyValue = typeof configuration.apiKey === "function" ? yield configuration.apiKey(keyParamName) : yield configuration.apiKey;
          object[keyParamName] = localVarApiKeyValue;
        }
      });
    };
    exports.setBasicAuthToObject = function(object, configuration) {
      if (configuration && (configuration.username || configuration.password)) {
        object["auth"] = { username: configuration.username, password: configuration.password };
      }
    };
    exports.setBearerAuthToObject = function(object, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
          const accessToken = typeof configuration.accessToken === "function" ? yield configuration.accessToken() : yield configuration.accessToken;
          object["Authorization"] = "Bearer " + accessToken;
        }
      });
    };
    exports.setOAuthToObject = function(object, name, scopes, configuration) {
      return __awaiter(this, void 0, void 0, function* () {
        if (configuration && configuration.accessToken) {
          const localVarAccessTokenValue = typeof configuration.accessToken === "function" ? yield configuration.accessToken(name, scopes) : yield configuration.accessToken;
          object["Authorization"] = "Bearer " + localVarAccessTokenValue;
        }
      });
    };
    function setFlattenedQueryParams(urlSearchParams, parameter, key = "") {
      if (parameter == null)
        return;
      if (typeof parameter === "object") {
        if (Array.isArray(parameter)) {
          parameter.forEach((item) => setFlattenedQueryParams(urlSearchParams, item, key));
        } else {
          Object.keys(parameter).forEach((currentKey) => setFlattenedQueryParams(urlSearchParams, parameter[currentKey], `${key}${key !== "" ? "." : ""}${currentKey}`));
        }
      } else {
        if (urlSearchParams.has(key)) {
          urlSearchParams.append(key, parameter);
        } else {
          urlSearchParams.set(key, parameter);
        }
      }
    }
    exports.setSearchParams = function(url, ...objects) {
      const searchParams = new URLSearchParams(url.search);
      setFlattenedQueryParams(searchParams, objects);
      url.search = searchParams.toString();
    };
    exports.serializeDataIfNeeded = function(value, requestOptions, configuration) {
      const nonString = typeof value !== "string";
      const needsSerialization = nonString && configuration && configuration.isJsonMime ? configuration.isJsonMime(requestOptions.headers["Content-Type"]) : nonString;
      return needsSerialization ? JSON.stringify(value !== void 0 ? value : {}) : value || "";
    };
    exports.toPathString = function(url) {
      return url.pathname + url.search + url.hash;
    };
    exports.createRequestFunction = function(axiosArgs, globalAxios, BASE_PATH, configuration) {
      return (axios = globalAxios, basePath = BASE_PATH) => {
        const axiosRequestArgs = Object.assign(Object.assign({}, axiosArgs.options), { url: ((configuration === null || configuration === void 0 ? void 0 : configuration.basePath) || basePath) + axiosArgs.url });
        return axios.request(axiosRequestArgs);
      };
    };
  }
});

// node_modules/openai/dist/api.js
var require_api = __commonJS({
  "node_modules/openai/dist/api.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OpenAIApi = exports.OpenAIApiFactory = exports.OpenAIApiFp = exports.OpenAIApiAxiosParamCreator = exports.CreateImageRequestResponseFormatEnum = exports.CreateImageRequestSizeEnum = exports.ChatCompletionResponseMessageRoleEnum = exports.ChatCompletionRequestMessageRoleEnum = void 0;
    var axios_1 = require_axios2();
    var common_1 = require_common();
    var base_1 = require_base();
    exports.ChatCompletionRequestMessageRoleEnum = {
      System: "system",
      User: "user",
      Assistant: "assistant"
    };
    exports.ChatCompletionResponseMessageRoleEnum = {
      System: "system",
      User: "user",
      Assistant: "assistant"
    };
    exports.CreateImageRequestSizeEnum = {
      _256x256: "256x256",
      _512x512: "512x512",
      _1024x1024: "1024x1024"
    };
    exports.CreateImageRequestResponseFormatEnum = {
      Url: "url",
      B64Json: "b64_json"
    };
    exports.OpenAIApiAxiosParamCreator = function(configuration) {
      return {
        /**
         *
         * @summary Immediately cancel a fine-tune job.
         * @param {string} fineTuneId The ID of the fine-tune job to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("cancelFineTune", "fineTuneId", fineTuneId);
          const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`.replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
         * @param {CreateAnswerRequest} createAnswerRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createAnswer: (createAnswerRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createAnswer", "createAnswerRequest", createAnswerRequest);
          const localVarPath = `/answers`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates a completion for the chat message
         * @param {CreateChatCompletionRequest} createChatCompletionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatCompletion: (createChatCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createChatCompletion", "createChatCompletionRequest", createChatCompletionRequest);
          const localVarPath = `/chat/completions`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createChatCompletionRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.
         * @param {CreateClassificationRequest} createClassificationRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createClassification: (createClassificationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createClassification", "createClassificationRequest", createClassificationRequest);
          const localVarPath = `/classifications`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates a completion for the provided prompt and parameters
         * @param {CreateCompletionRequest} createCompletionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompletion: (createCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createCompletion", "createCompletionRequest", createCompletionRequest);
          const localVarPath = `/completions`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates a new edit for the provided input, instruction, and parameters.
         * @param {CreateEditRequest} createEditRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdit: (createEditRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createEdit", "createEditRequest", createEditRequest);
          const localVarPath = `/edits`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates an embedding vector representing the input text.
         * @param {CreateEmbeddingRequest} createEmbeddingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedding: (createEmbeddingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createEmbedding", "createEmbeddingRequest", createEmbeddingRequest);
          const localVarPath = `/embeddings`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile: (file, purpose, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createFile", "file", file);
          common_1.assertParamExists("createFile", "purpose", purpose);
          const localVarPath = `/files`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
          if (file !== void 0) {
            localVarFormParams.append("file", file);
          }
          if (purpose !== void 0) {
            localVarFormParams.append("purpose", purpose);
          }
          localVarHeaderParameter["Content-Type"] = "multipart/form-data";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = localVarFormParams;
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
         * @param {CreateFineTuneRequest} createFineTuneRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFineTune: (createFineTuneRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createFineTune", "createFineTuneRequest", createFineTuneRequest);
          const localVarPath = `/fine-tunes`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates an image given a prompt.
         * @param {CreateImageRequest} createImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImage: (createImageRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createImage", "createImageRequest", createImageRequest);
          const localVarPath = `/images/generations`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createImageRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates an edited or extended image given an original image and a prompt.
         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.
         * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
         * @param {number} [n] The number of images to generate. Must be between 1 and 10.
         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageEdit: (image, prompt, mask, n, size, responseFormat, user, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createImageEdit", "image", image);
          common_1.assertParamExists("createImageEdit", "prompt", prompt);
          const localVarPath = `/images/edits`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
          if (image !== void 0) {
            localVarFormParams.append("image", image);
          }
          if (mask !== void 0) {
            localVarFormParams.append("mask", mask);
          }
          if (prompt !== void 0) {
            localVarFormParams.append("prompt", prompt);
          }
          if (n !== void 0) {
            localVarFormParams.append("n", n);
          }
          if (size !== void 0) {
            localVarFormParams.append("size", size);
          }
          if (responseFormat !== void 0) {
            localVarFormParams.append("response_format", responseFormat);
          }
          if (user !== void 0) {
            localVarFormParams.append("user", user);
          }
          localVarHeaderParameter["Content-Type"] = "multipart/form-data";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = localVarFormParams;
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Creates a variation of a given image.
         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
         * @param {number} [n] The number of images to generate. Must be between 1 and 10.
         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageVariation: (image, n, size, responseFormat, user, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createImageVariation", "image", image);
          const localVarPath = `/images/variations`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
          if (image !== void 0) {
            localVarFormParams.append("image", image);
          }
          if (n !== void 0) {
            localVarFormParams.append("n", n);
          }
          if (size !== void 0) {
            localVarFormParams.append("size", size);
          }
          if (responseFormat !== void 0) {
            localVarFormParams.append("response_format", responseFormat);
          }
          if (user !== void 0) {
            localVarFormParams.append("user", user);
          }
          localVarHeaderParameter["Content-Type"] = "multipart/form-data";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = localVarFormParams;
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Classifies if text violates OpenAI\'s Content Policy
         * @param {CreateModerationRequest} createModerationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModeration: (createModerationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createModeration", "createModerationRequest", createModerationRequest);
          const localVarPath = `/moderations`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createModerationRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.
         * @param {CreateSearchRequest} createSearchRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createSearch: (engineId, createSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createSearch", "engineId", engineId);
          common_1.assertParamExists("createSearch", "createSearchRequest", createSearchRequest);
          const localVarPath = `/engines/{engine_id}/search`.replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          localVarHeaderParameter["Content-Type"] = "application/json";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Transcribes audio into the input language.
         * @param {File} file The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranscription: (file, model, prompt, responseFormat, temperature, language, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createTranscription", "file", file);
          common_1.assertParamExists("createTranscription", "model", model);
          const localVarPath = `/audio/transcriptions`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
          if (file !== void 0) {
            localVarFormParams.append("file", file);
          }
          if (model !== void 0) {
            localVarFormParams.append("model", model);
          }
          if (prompt !== void 0) {
            localVarFormParams.append("prompt", prompt);
          }
          if (responseFormat !== void 0) {
            localVarFormParams.append("response_format", responseFormat);
          }
          if (temperature !== void 0) {
            localVarFormParams.append("temperature", temperature);
          }
          if (language !== void 0) {
            localVarFormParams.append("language", language);
          }
          localVarHeaderParameter["Content-Type"] = "multipart/form-data";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = localVarFormParams;
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Translates audio into into English.
         * @param {File} file The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranslation: (file, model, prompt, responseFormat, temperature, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("createTranslation", "file", file);
          common_1.assertParamExists("createTranslation", "model", model);
          const localVarPath = `/audio/translations`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "POST" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();
          if (file !== void 0) {
            localVarFormParams.append("file", file);
          }
          if (model !== void 0) {
            localVarFormParams.append("model", model);
          }
          if (prompt !== void 0) {
            localVarFormParams.append("prompt", prompt);
          }
          if (responseFormat !== void 0) {
            localVarFormParams.append("response_format", responseFormat);
          }
          if (temperature !== void 0) {
            localVarFormParams.append("temperature", temperature);
          }
          localVarHeaderParameter["Content-Type"] = "multipart/form-data";
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);
          localVarRequestOptions.data = localVarFormParams;
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Delete a file.
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("deleteFile", "fileId", fileId);
          const localVarPath = `/files/{file_id}`.replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.
         * @param {string} model The model to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("deleteModel", "model", model);
          const localVarPath = `/models/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(model)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "DELETE" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Returns the contents of the specified file
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("downloadFile", "fileId", fileId);
          const localVarPath = `/files/{file_id}/content`.replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listEngines: (options = {}) => __awaiter(this, void 0, void 0, function* () {
          const localVarPath = `/engines`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Returns a list of files that belong to the user\'s organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles: (options = {}) => __awaiter(this, void 0, void 0, function* () {
          const localVarPath = `/files`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Get fine-grained status updates for a fine-tune job.
         * @param {string} fineTuneId The ID of the fine-tune job to get events for.
         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFineTuneEvents: (fineTuneId, stream, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("listFineTuneEvents", "fineTuneId", fineTuneId);
          const localVarPath = `/fine-tunes/{fine_tune_id}/events`.replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          if (stream !== void 0) {
            localVarQueryParameter["stream"] = stream;
          }
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary List your organization\'s fine-tuning jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFineTunes: (options = {}) => __awaiter(this, void 0, void 0, function* () {
          const localVarPath = `/fine-tunes`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels: (options = {}) => __awaiter(this, void 0, void 0, function* () {
          const localVarPath = `/models`;
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.
         * @param {string} engineId The ID of the engine to use for this request
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        retrieveEngine: (engineId, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("retrieveEngine", "engineId", engineId);
          const localVarPath = `/engines/{engine_id}`.replace(`{${"engine_id"}}`, encodeURIComponent(String(engineId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Returns information about a specific file.
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("retrieveFile", "fileId", fileId);
          const localVarPath = `/files/{file_id}`.replace(`{${"file_id"}}`, encodeURIComponent(String(fileId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
         * @param {string} fineTuneId The ID of the fine-tune job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("retrieveFineTune", "fineTuneId", fineTuneId);
          const localVarPath = `/fine-tunes/{fine_tune_id}`.replace(`{${"fine_tune_id"}}`, encodeURIComponent(String(fineTuneId)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        }),
        /**
         *
         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         * @param {string} model The ID of the model to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {
          common_1.assertParamExists("retrieveModel", "model", model);
          const localVarPath = `/models/{model}`.replace(`{${"model"}}`, encodeURIComponent(String(model)));
          const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
          let baseOptions;
          if (configuration) {
            baseOptions = configuration.baseOptions;
          }
          const localVarRequestOptions = Object.assign(Object.assign({ method: "GET" }, baseOptions), options);
          const localVarHeaderParameter = {};
          const localVarQueryParameter = {};
          common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);
          let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
          localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
          return {
            url: common_1.toPathString(localVarUrlObj),
            options: localVarRequestOptions
          };
        })
      };
    };
    exports.OpenAIApiFp = function(configuration) {
      const localVarAxiosParamCreator = exports.OpenAIApiAxiosParamCreator(configuration);
      return {
        /**
         *
         * @summary Immediately cancel a fine-tune job.
         * @param {string} fineTuneId The ID of the fine-tune job to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFineTune(fineTuneId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelFineTune(fineTuneId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
         * @param {CreateAnswerRequest} createAnswerRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createAnswer(createAnswerRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnswer(createAnswerRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates a completion for the chat message
         * @param {CreateChatCompletionRequest} createChatCompletionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatCompletion(createChatCompletionRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createChatCompletion(createChatCompletionRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.
         * @param {CreateClassificationRequest} createClassificationRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createClassification(createClassificationRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createClassification(createClassificationRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates a completion for the provided prompt and parameters
         * @param {CreateCompletionRequest} createCompletionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompletion(createCompletionRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompletion(createCompletionRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates a new edit for the provided input, instruction, and parameters.
         * @param {CreateEditRequest} createEditRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdit(createEditRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createEdit(createEditRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates an embedding vector representing the input text.
         * @param {CreateEmbeddingRequest} createEmbeddingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedding(createEmbeddingRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(file, purpose, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createFile(file, purpose, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
         * @param {CreateFineTuneRequest} createFineTuneRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFineTune(createFineTuneRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates an image given a prompt.
         * @param {CreateImageRequest} createImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImage(createImageRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createImage(createImageRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates an edited or extended image given an original image and a prompt.
         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.
         * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
         * @param {number} [n] The number of images to generate. Must be between 1 and 10.
         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageEdit(image, prompt, mask, n, size, responseFormat, user, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageEdit(image, prompt, mask, n, size, responseFormat, user, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Creates a variation of a given image.
         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
         * @param {number} [n] The number of images to generate. Must be between 1 and 10.
         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageVariation(image, n, size, responseFormat, user, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createImageVariation(image, n, size, responseFormat, user, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Classifies if text violates OpenAI\'s Content Policy
         * @param {CreateModerationRequest} createModerationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModeration(createModerationRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createModeration(createModerationRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.
         * @param {CreateSearchRequest} createSearchRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createSearch(engineId, createSearchRequest, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Transcribes audio into the input language.
         * @param {File} file The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranscription(file, model, prompt, responseFormat, temperature, language, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createTranscription(file, model, prompt, responseFormat, temperature, language, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Translates audio into into English.
         * @param {File} file The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranslation(file, model, prompt, responseFormat, temperature, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.createTranslation(file, model, prompt, responseFormat, temperature, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Delete a file.
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(fileId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.
         * @param {string} model The model to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(model, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(model, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Returns the contents of the specified file
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(fileId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(fileId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listEngines(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.listEngines(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Returns a list of files that belong to the user\'s organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Get fine-grained status updates for a fine-tune job.
         * @param {string} fineTuneId The ID of the fine-tune job to get events for.
         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFineTuneEvents(fineTuneId, stream, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary List your organization\'s fine-tuning jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFineTunes(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTunes(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.
         * @param {string} engineId The ID of the engine to use for this request
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        retrieveEngine(engineId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEngine(engineId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Returns information about a specific file.
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFile(fileId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFile(fileId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
         * @param {string} fineTuneId The ID of the fine-tune job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFineTune(fineTuneId, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        },
        /**
         *
         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         * @param {string} model The ID of the model to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModel(model, options) {
          return __awaiter(this, void 0, void 0, function* () {
            const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveModel(model, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
          });
        }
      };
    };
    exports.OpenAIApiFactory = function(configuration, basePath, axios) {
      const localVarFp = exports.OpenAIApiFp(configuration);
      return {
        /**
         *
         * @summary Immediately cancel a fine-tune job.
         * @param {string} fineTuneId The ID of the fine-tune job to cancel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFineTune(fineTuneId, options) {
          return localVarFp.cancelFineTune(fineTuneId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
         * @param {CreateAnswerRequest} createAnswerRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createAnswer(createAnswerRequest, options) {
          return localVarFp.createAnswer(createAnswerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a completion for the chat message
         * @param {CreateChatCompletionRequest} createChatCompletionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChatCompletion(createChatCompletionRequest, options) {
          return localVarFp.createChatCompletion(createChatCompletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.
         * @param {CreateClassificationRequest} createClassificationRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createClassification(createClassificationRequest, options) {
          return localVarFp.createClassification(createClassificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a completion for the provided prompt and parameters
         * @param {CreateCompletionRequest} createCompletionRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCompletion(createCompletionRequest, options) {
          return localVarFp.createCompletion(createCompletionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a new edit for the provided input, instruction, and parameters.
         * @param {CreateEditRequest} createEditRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEdit(createEditRequest, options) {
          return localVarFp.createEdit(createEditRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates an embedding vector representing the input text.
         * @param {CreateEmbeddingRequest} createEmbeddingRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmbedding(createEmbeddingRequest, options) {
          return localVarFp.createEmbedding(createEmbeddingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
         * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFile(file, purpose, options) {
          return localVarFp.createFile(file, purpose, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
         * @param {CreateFineTuneRequest} createFineTuneRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFineTune(createFineTuneRequest, options) {
          return localVarFp.createFineTune(createFineTuneRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates an image given a prompt.
         * @param {CreateImageRequest} createImageRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImage(createImageRequest, options) {
          return localVarFp.createImage(createImageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates an edited or extended image given an original image and a prompt.
         * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
         * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.
         * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
         * @param {number} [n] The number of images to generate. Must be between 1 and 10.
         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageEdit(image, prompt, mask, n, size, responseFormat, user, options) {
          return localVarFp.createImageEdit(image, prompt, mask, n, size, responseFormat, user, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Creates a variation of a given image.
         * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
         * @param {number} [n] The number of images to generate. Must be between 1 and 10.
         * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
         * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
         * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createImageVariation(image, n, size, responseFormat, user, options) {
          return localVarFp.createImageVariation(image, n, size, responseFormat, user, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Classifies if text violates OpenAI\'s Content Policy
         * @param {CreateModerationRequest} createModerationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createModeration(createModerationRequest, options) {
          return localVarFp.createModeration(createModerationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.
         * @param {CreateSearchRequest} createSearchRequest
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        createSearch(engineId, createSearchRequest, options) {
          return localVarFp.createSearch(engineId, createSearchRequest, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Transcribes audio into the input language.
         * @param {File} file The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
         * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranscription(file, model, prompt, responseFormat, temperature, language, options) {
          return localVarFp.createTranscription(file, model, prompt, responseFormat, temperature, language, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Translates audio into into English.
         * @param {File} file The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
         * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
         * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
         * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
         * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTranslation(file, model, prompt, responseFormat, temperature, options) {
          return localVarFp.createTranslation(file, model, prompt, responseFormat, temperature, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a file.
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileId, options) {
          return localVarFp.deleteFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.
         * @param {string} model The model to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteModel(model, options) {
          return localVarFp.deleteModel(model, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns the contents of the specified file
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadFile(fileId, options) {
          return localVarFp.downloadFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        listEngines(options) {
          return localVarFp.listEngines(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns a list of files that belong to the user\'s organization.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFiles(options) {
          return localVarFp.listFiles(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get fine-grained status updates for a fine-tune job.
         * @param {string} fineTuneId The ID of the fine-tune job to get events for.
         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFineTuneEvents(fineTuneId, stream, options) {
          return localVarFp.listFineTuneEvents(fineTuneId, stream, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary List your organization\'s fine-tuning jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFineTunes(options) {
          return localVarFp.listFineTunes(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listModels(options) {
          return localVarFp.listModels(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.
         * @param {string} engineId The ID of the engine to use for this request
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        retrieveEngine(engineId, options) {
          return localVarFp.retrieveEngine(engineId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns information about a specific file.
         * @param {string} fileId The ID of the file to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFile(fileId, options) {
          return localVarFp.retrieveFile(fileId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
         * @param {string} fineTuneId The ID of the fine-tune job
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveFineTune(fineTuneId, options) {
          return localVarFp.retrieveFineTune(fineTuneId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
         * @param {string} model The ID of the model to use for this request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveModel(model, options) {
          return localVarFp.retrieveModel(model, options).then((request) => request(axios, basePath));
        }
      };
    };
    var OpenAIApi2 = class extends base_1.BaseAPI {
      /**
       *
       * @summary Immediately cancel a fine-tune job.
       * @param {string} fineTuneId The ID of the fine-tune job to cancel
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      cancelFineTune(fineTuneId, options) {
        return exports.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
       * @param {CreateAnswerRequest} createAnswerRequest
       * @param {*} [options] Override http request option.
       * @deprecated
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createAnswer(createAnswerRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates a completion for the chat message
       * @param {CreateChatCompletionRequest} createChatCompletionRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createChatCompletion(createChatCompletionRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createChatCompletion(createChatCompletionRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.
       * @param {CreateClassificationRequest} createClassificationRequest
       * @param {*} [options] Override http request option.
       * @deprecated
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createClassification(createClassificationRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates a completion for the provided prompt and parameters
       * @param {CreateCompletionRequest} createCompletionRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createCompletion(createCompletionRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates a new edit for the provided input, instruction, and parameters.
       * @param {CreateEditRequest} createEditRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createEdit(createEditRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates an embedding vector representing the input text.
       * @param {CreateEmbeddingRequest} createEmbeddingRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createEmbedding(createEmbeddingRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
       * @param {File} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).
       * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createFile(file, purpose, options) {
        return exports.OpenAIApiFp(this.configuration).createFile(file, purpose, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
       * @param {CreateFineTuneRequest} createFineTuneRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createFineTune(createFineTuneRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates an image given a prompt.
       * @param {CreateImageRequest} createImageRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createImage(createImageRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createImage(createImageRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates an edited or extended image given an original image and a prompt.
       * @param {File} image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
       * @param {string} prompt A text description of the desired image(s). The maximum length is 1000 characters.
       * @param {File} [mask] An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;.
       * @param {number} [n] The number of images to generate. Must be between 1 and 10.
       * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
       * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
       * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createImageEdit(image, prompt, mask, n, size, responseFormat, user, options) {
        return exports.OpenAIApiFp(this.configuration).createImageEdit(image, prompt, mask, n, size, responseFormat, user, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Creates a variation of a given image.
       * @param {File} image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
       * @param {number} [n] The number of images to generate. Must be between 1 and 10.
       * @param {string} [size] The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;.
       * @param {string} [responseFormat] The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;.
       * @param {string} [user] A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createImageVariation(image, n, size, responseFormat, user, options) {
        return exports.OpenAIApiFp(this.configuration).createImageVariation(image, n, size, responseFormat, user, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Classifies if text violates OpenAI\'s Content Policy
       * @param {CreateModerationRequest} createModerationRequest
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createModeration(createModerationRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createModeration(createModerationRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
       * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.
       * @param {CreateSearchRequest} createSearchRequest
       * @param {*} [options] Override http request option.
       * @deprecated
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createSearch(engineId, createSearchRequest, options) {
        return exports.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Transcribes audio into the input language.
       * @param {File} file The audio file to transcribe, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
       * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
       * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
       * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
       * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       * @param {string} [language] The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createTranscription(file, model, prompt, responseFormat, temperature, language, options) {
        return exports.OpenAIApiFp(this.configuration).createTranscription(file, model, prompt, responseFormat, temperature, language, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Translates audio into into English.
       * @param {File} file The audio file to translate, in one of these formats: mp3, mp4, mpeg, mpga, m4a, wav, or webm.
       * @param {string} model ID of the model to use. Only &#x60;whisper-1&#x60; is currently available.
       * @param {string} [prompt] An optional text to guide the model\\\&#39;s style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.
       * @param {string} [responseFormat] The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt.
       * @param {number} [temperature] The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      createTranslation(file, model, prompt, responseFormat, temperature, options) {
        return exports.OpenAIApiFp(this.configuration).createTranslation(file, model, prompt, responseFormat, temperature, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Delete a file.
       * @param {string} fileId The ID of the file to use for this request
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      deleteFile(fileId, options) {
        return exports.OpenAIApiFp(this.configuration).deleteFile(fileId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Delete a fine-tuned model. You must have the Owner role in your organization.
       * @param {string} model The model to delete
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      deleteModel(model, options) {
        return exports.OpenAIApiFp(this.configuration).deleteModel(model, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Returns the contents of the specified file
       * @param {string} fileId The ID of the file to use for this request
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      downloadFile(fileId, options) {
        return exports.OpenAIApiFp(this.configuration).downloadFile(fileId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
       * @param {*} [options] Override http request option.
       * @deprecated
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      listEngines(options) {
        return exports.OpenAIApiFp(this.configuration).listEngines(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Returns a list of files that belong to the user\'s organization.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      listFiles(options) {
        return exports.OpenAIApiFp(this.configuration).listFiles(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Get fine-grained status updates for a fine-tune job.
       * @param {string} fineTuneId The ID of the fine-tune job to get events for.
       * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      listFineTuneEvents(fineTuneId, stream, options) {
        return exports.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary List your organization\'s fine-tuning jobs
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      listFineTunes(options) {
        return exports.OpenAIApiFp(this.configuration).listFineTunes(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      listModels(options) {
        return exports.OpenAIApiFp(this.configuration).listModels(options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.
       * @param {string} engineId The ID of the engine to use for this request
       * @param {*} [options] Override http request option.
       * @deprecated
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      retrieveEngine(engineId, options) {
        return exports.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Returns information about a specific file.
       * @param {string} fileId The ID of the file to use for this request
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      retrieveFile(fileId, options) {
        return exports.OpenAIApiFp(this.configuration).retrieveFile(fileId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
       * @param {string} fineTuneId The ID of the fine-tune job
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      retrieveFineTune(fineTuneId, options) {
        return exports.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options).then((request) => request(this.axios, this.basePath));
      }
      /**
       *
       * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
       * @param {string} model The ID of the model to use for this request
       * @param {*} [options] Override http request option.
       * @throws {RequiredError}
       * @memberof OpenAIApi
       */
      retrieveModel(model, options) {
        return exports.OpenAIApiFp(this.configuration).retrieveModel(model, options).then((request) => request(this.axios, this.basePath));
      }
    };
    exports.OpenAIApi = OpenAIApi2;
  }
});

// node_modules/openai/package.json
var require_package = __commonJS({
  "node_modules/openai/package.json"(exports, module2) {
    module2.exports = {
      name: "openai",
      version: "3.2.1",
      description: "Node.js library for the OpenAI API",
      repository: {
        type: "git",
        url: "git@github.com:openai/openai-node.git"
      },
      keywords: [
        "openai",
        "open",
        "ai",
        "gpt-3",
        "gpt3"
      ],
      author: "OpenAI",
      license: "MIT",
      main: "./dist/index.js",
      types: "./dist/index.d.ts",
      scripts: {
        build: "tsc --outDir dist/"
      },
      dependencies: {
        axios: "^0.26.0",
        "form-data": "^4.0.0"
      },
      devDependencies: {
        "@types/node": "^12.11.5",
        typescript: "^3.6.4"
      }
    };
  }
});

// node_modules/form-data/lib/browser.js
var require_browser = __commonJS({
  "node_modules/form-data/lib/browser.js"(exports, module2) {
    module2.exports = typeof self == "object" ? self.FormData : window.FormData;
  }
});

// node_modules/openai/dist/configuration.js
var require_configuration = __commonJS({
  "node_modules/openai/dist/configuration.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Configuration = void 0;
    var packageJson = require_package();
    var Configuration2 = class {
      constructor(param = {}) {
        this.apiKey = param.apiKey;
        this.organization = param.organization;
        this.username = param.username;
        this.password = param.password;
        this.accessToken = param.accessToken;
        this.basePath = param.basePath;
        this.baseOptions = param.baseOptions;
        this.formDataCtor = param.formDataCtor;
        if (!this.baseOptions) {
          this.baseOptions = {};
        }
        this.baseOptions.headers = Object.assign({ "User-Agent": `OpenAI/NodeJS/${packageJson.version}`, "Authorization": `Bearer ${this.apiKey}` }, this.baseOptions.headers);
        if (this.organization) {
          this.baseOptions.headers["OpenAI-Organization"] = this.organization;
        }
        if (!this.formDataCtor) {
          this.formDataCtor = require_browser();
        }
      }
      /**
       * Check if the given MIME is a JSON MIME.
       * JSON MIME examples:
       *   application/json
       *   application/json; charset=UTF8
       *   APPLICATION/JSON
       *   application/vnd.company+json
       * @param mime - MIME (Multipurpose Internet Mail Extensions)
       * @return True if the given MIME is JSON, false otherwise.
       */
      isJsonMime(mime) {
        const jsonMime = new RegExp("^(application/json|[^;/ 	]+/[^;/ 	]+[+]json)[ 	]*(;.*)?$", "i");
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === "application/json-patch+json");
      }
    };
    exports.Configuration = Configuration2;
  }
});

// node_modules/openai/dist/index.js
var require_dist = __commonJS({
  "node_modules/openai/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !exports2.hasOwnProperty(p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_api(), exports);
    __exportStar(require_configuration(), exports);
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AICommanderPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/modal.ts
var import_obsidian = require("obsidian");
var PromptModal = class extends import_obsidian.Modal {
  constructor(app, defaultprompt, onSubmit) {
    super(app);
    this.prompt = defaultprompt;
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "" });
    new import_obsidian.Setting(contentEl).setName("Generate text from prompt").addText(
      (text) => text.setValue(this.prompt).onChange((value) => {
        this.prompt = value;
      })
    );
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.prompt);
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/main.ts
var import_openai = __toESM(require_dist());
var import_querystring = require("querystring");
var DEFAULT_SETTINGS = {
  model: "gpt-3.5-turbo",
  apiKey: "",
  imgSize: "256x256",
  saveImg: "attachment",
  useSearchEngine: false,
  searchEngine: "bing",
  bingSearchKey: "",
  promptPerfectKey: "",
  usePromptPerfect: false,
  promptsForSelected: "",
  promptsForPdf: ""
};
var TOKEN_LIMITS = {
  "gpt-3.5-turbo": 4096,
  "gpt-3.5-turbo-0301": 4096,
  "text-davinci-003": 4097,
  "text-davinci-002": 4097,
  "code-davinci-002": 8001,
  "code-davinci-001": 8001,
  "gpt-4": 8192,
  "gpt-4-0314": 8192,
  "gpt-4-32k": 32768,
  "gpt-4-32k-0314": 32768
};
var AICommanderPlugin = class extends import_obsidian2.Plugin {
  async improvePrompt(prompt, targetModel) {
    const data = {
      data: {
        prompt,
        targetModel
      }
    };
    const params = {
      url: "https://us-central1-prompt-ops.cloudfunctions.net/optimize",
      method: "POST",
      contentType: "application/json",
      body: JSON.stringify(data),
      headers: {
        "x-api-key": `token ${this.settings.promptPerfectKey}`
      }
    };
    const response = await (0, import_obsidian2.requestUrl)(params);
    if ("promptOptimized" in response.json.result)
      return response.json.result.promptOptimized;
    else
      throw new Error("Prompt Perfect API: " + JSON.stringify(response.json));
  }
  async generateText(prompt, editor, currentLn, contextPrompt) {
    var _a;
    if (prompt.length < 1)
      throw new Error("Cannot find prompt.");
    if (this.settings.apiKey.length <= 1)
      throw new Error("OpenAI API Key is not provided.");
    let newPrompt = prompt;
    if (this.settings.usePromptPerfect) {
      newPrompt = await this.improvePrompt(prompt, "chatgpt");
    }
    const messages = [];
    if (contextPrompt) {
      messages.push({
        role: "system",
        content: contextPrompt
      });
    } else if (this.settings.useSearchEngine) {
      const searchResult = await this.searchText(prompt);
      messages.push({
        role: "system",
        content: "As an assistant who can learn information from web search results, your task is to incorporate information from a web search result into your answers when responding to questions. Your response should include the relevant information from your knowledge and the web search result and provide the source markdown URL of the information. Please note that you should be able to handle various types of questions and search queries. Your response should also be clear and concise while incorporating all relevant information from the web search results. Here are the web search result: \n\n " + JSON.stringify(searchResult)
      });
    }
    messages.push({
      role: "user",
      content: newPrompt
    });
    const body = JSON.stringify({
      model: this.settings.model,
      messages,
      stream: true
    });
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      body,
      headers: {
        "Accept": "text/event-stream",
        "Content-Type": "application/json",
        "Authorization": "Bearer " + this.settings.apiKey
      }
    });
    if (!response.ok) {
      const errorResponse = await response.json();
      const errorMessage = errorResponse && errorResponse.error.message ? errorResponse.error.message : response.statusText;
      throw new Error(`Error. ${errorMessage}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("No response body reader available");
    }
    let LnToWrite = this.getNextNewLine(editor, currentLn);
    editor.setLine(LnToWrite++, "\n");
    let end = false;
    let buffer = "";
    while (!end) {
      const { done, value } = await reader.read();
      end = done;
      const chunk = new TextDecoder().decode(value);
      const data = chunk.split("\n");
      for (const datum of data) {
        if (datum.trim() === "data: [DONE]") {
          end = true;
          break;
        }
        if (datum.startsWith("data:")) {
          const json = JSON.parse(datum.substring(6));
          if ("error" in json)
            throw new Error("Error: " + json.error.message);
          if (!("choices" in json))
            throw new Error("Error: " + JSON.stringify(json));
          if ("content" in json.choices[0].delta) {
            const text = json.choices[0].delta.content;
            if (buffer.length < 1)
              buffer += text.trim();
            if (buffer.length > 0) {
              const lines = text.split("\n");
              if (lines.length > 1) {
                for (const word of lines) {
                  editor.setLine(LnToWrite, editor.getLine(LnToWrite++) + word + "\n");
                }
              } else {
                editor.setLine(LnToWrite, editor.getLine(LnToWrite) + text);
              }
            }
          }
        }
      }
    }
    editor.setLine(LnToWrite, editor.getLine(LnToWrite) + "\n");
  }
  getNextNewLine(editor, Ln) {
    let newLine = Ln;
    while (editor.getLine(newLine).trim().length > 0) {
      if (newLine == editor.lastLine())
        editor.setLine(newLine, editor.getLine(newLine) + "\n");
      newLine++;
    }
    return newLine;
  }
  writeText(editor, LnToWrite, text) {
    const newLine = this.getNextNewLine(editor, LnToWrite);
    editor.setLine(newLine, "\n" + text.trim() + "\n");
    return newLine;
  }
  async getImageBase64(url) {
    const buffer = await (0, import_obsidian2.requestUrl)(url).arrayBuffer;
    return (0, import_obsidian2.arrayBufferToBase64)(buffer);
  }
  async generateImage(prompt) {
    if (prompt.length < 1)
      throw new Error("Cannot find prompt.");
    if (this.settings.apiKey.length <= 1)
      throw new Error("OpenAI API Key is not provided.");
    const configuration = new import_openai.Configuration({
      apiKey: this.settings.apiKey
    });
    const openai = new import_openai.OpenAIApi(configuration);
    let newPrompt = prompt;
    if (this.settings.usePromptPerfect) {
      newPrompt = await this.improvePrompt(prompt, "dalle");
    }
    const response = await openai.createImage({
      prompt: newPrompt,
      n: 1,
      size: this.settings.imgSize,
      response_format: "b64_json"
    }).catch(
      (error) => {
        if (error.response) {
          throw new Error(`Error. ${error.response.data.error.message}`);
        } else if (error.request) {
          throw new Error(`No response received!`);
        } else {
          throw new Error(`Error! ${error.message}`);
        }
      }
    );
    const size = this.settings.imgSize.split("x")[0];
    const currentPathString = this.getCurrentPath();
    const filepath = await this.getAttachmentDir().then((attachmentPath) => {
      let dir = "";
      if (attachmentPath == "" || attachmentPath == "/")
        dir = "";
      else if (attachmentPath.startsWith("./"))
        dir = currentPathString + "/" + attachmentPath.substring(2);
      else
        dir = attachmentPath;
      const path = dir.trim() + "/" + this.generateRandomString(20) + ".png";
      return path.replace(/\/\//g, "/");
    });
    const base64 = response.data.data[0].b64_json;
    const buffer = Buffer.from(base64, "base64");
    const fileDir = filepath.split("/");
    if (fileDir.length > 1) {
      fileDir.pop();
      const dirPath = fileDir.join("/");
      const exists = this.app.vault.getAbstractFileByPath(dirPath) instanceof import_obsidian2.TFolder;
      if (!exists)
        await this.app.vault.createFolder(dirPath);
    }
    await this.app.vault.createBinary(filepath, buffer);
    if (this.settings.saveImg == "attachment") {
      return `![${size}](${encodeURI(filepath)})
`;
    } else {
      return `![${size}](data:image/png;base64,${response.data.data[0].b64_json})
`;
    }
  }
  generateRandomString(length) {
    const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    const charactersLength = characters.length;
    let result = "";
    for (let i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }
  async generateTranscript(audioBuffer, filetype) {
    if (this.settings.apiKey.length <= 1)
      throw new Error("OpenAI API Key is not provided.");
    const N = 16;
    const randomBoundryString = "WebKitFormBoundary" + Array(N + 1).join((Math.random().toString(36) + "00000000000000000").slice(2, 18)).slice(0, N);
    const pre_string = `------${randomBoundryString}\r
Content-Disposition: form-data; name="file"; filename="audio.mp3"\r
Content-Type: "application/octet-stream"\r
\r
`;
    const post_string = `\r
------${randomBoundryString}\r
Content-Disposition: form-data; name="model"\r
\r
whisper-1\r
------${randomBoundryString}--\r
`;
    const pre_string_encoded = new TextEncoder().encode(pre_string);
    const post_string_encoded = new TextEncoder().encode(post_string);
    const concatenated = await new Blob([pre_string_encoded, audioBuffer, post_string_encoded]).arrayBuffer();
    const options = {
      url: "https://api.openai.com/v1/audio/transcriptions",
      method: "POST",
      contentType: `multipart/form-data; boundary=----${randomBoundryString}`,
      headers: {
        "Authorization": "Bearer " + this.settings.apiKey
      },
      body: concatenated
    };
    const response = await (0, import_obsidian2.requestUrl)(options).catch((error) => {
      if (error.message.includes("401"))
        throw new Error("OpenAI API Key is not valid.");
      else
        throw error;
    });
    if ("text" in response.json)
      return response.json.text;
    else
      throw new Error("Error. " + JSON.stringify(response.json));
  }
  async htmlToMarkdown(html) {
    const doc = new DOMParser().parseFromString((0, import_querystring.unescape)(html), "text/html");
    const body = doc.querySelector("main");
    if (body == null)
      throw new Error("No search result.");
    let markdown = body.innerHTML;
    markdown = markdown.replace(/<h1>(.*?)<\/h1>/gi, "\n# $1\n");
    markdown = markdown.replace(/<h2>(.*?)<\/h2>/gi, "\n## $1\n");
    markdown = markdown.replace(/<h3>(.*?)<\/h3>/gi, "\n### $1\n");
    markdown = markdown.replace(/<h4>(.*?)<\/h4>/gi, "\n#### $1\n");
    markdown = markdown.replace(/<h5>(.*?)<\/h5>/gi, "\n##### $1\n");
    markdown = markdown.replace(/<h6>(.*?)<\/h6>/gi, "\n###### $1\n");
    markdown = markdown.replace(/<b>(.*?)<\/b>/gi, "**$1**");
    markdown = markdown.replace(/<i>(.*?)<\/i>/gi, "_$1_");
    markdown = markdown.replace(/<a href="(.*?)">(.*?)<\/a>/gi, "[$2]($1)");
    markdown = markdown.replace(/<ul>(.*?)<\/ul>/gis, (match, p1) => {
      const listItems = p1.split("</li>");
      listItems.pop();
      const markdownListItems = listItems.map((item) => {
        const listItem = item.replace("<li>", "- ");
        return listItem.trim();
      });
      return markdownListItems.join("\n") + "\n";
    });
    markdown = markdown.replace(/<p>(.*?)<\/p>/gis, "$1\n");
    markdown = markdown.replace(/<br>/gi, "\n");
    markdown = markdown.replace(/<hr>/gi, "---");
    markdown = markdown.replace(/<\/?code>/gi, "`");
    markdown = markdown.replace(/<.*?>/g, "").trim();
    let tokenLimit = 2048;
    if (this.settings.model in TOKEN_LIMITS)
      tokenLimit = TOKEN_LIMITS[this.settings.model];
    if (markdown.length > tokenLimit * 2) {
      markdown = markdown.substring(0, tokenLimit * 2);
    }
    return markdown;
  }
  async searchTextWithoutKey(query) {
    const params = {
      url: "https://www.bing.com/search?q=" + encodeURIComponent(query),
      method: "GET"
    };
    const response = await (0, import_obsidian2.requestUrl)(params);
    return this.htmlToMarkdown(response.text).then((markdown) => {
      console.log(markdown);
      return markdown;
    });
  }
  async searchTextWithKey(query) {
    const params = {
      url: "https://api.bing.microsoft.com/v7.0/search?q=" + encodeURIComponent(query),
      method: "GET",
      contentType: "application/json",
      headers: {
        "Ocp-Apim-Subscription-Key": this.settings.bingSearchKey
      }
    };
    const response = await (0, import_obsidian2.requestUrl)(params).catch((error) => {
      if (error.message.includes("401"))
        throw new Error("Bing Web Search API Key is not valid.");
      else
        throw error;
    });
    if ("webPages" in response.json && "value" in response.json.webPages)
      return response.json.webPages.value;
    else
      throw new Error("No web search results: " + JSON.stringify(response.json));
  }
  async searchText(query) {
    if (this.settings.bingSearchKey.length > 1) {
      return this.searchTextWithKey(query);
    } else {
      return this.searchTextWithoutKey(query);
    }
  }
  async getAttachmentDir() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      throw new Error("No active file");
    const dir = this.app.vault.getAvailablePathForAttachments(activeFile.basename, activeFile == null ? void 0 : activeFile.extension, activeFile);
    return dir;
  }
  getCurrentPath() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile)
      throw new Error("No active file");
    const currentPath = activeFile.path.split("/");
    currentPath.pop();
    const currentPathString = currentPath.join("/");
    return currentPathString;
  }
  async findFilePath(text, regex) {
    const fullPath = await this.getAttachmentDir().then((attachmentPath) => {
      let filename = "";
      let result;
      for (const reg of regex) {
        while ((result = reg.exec(text)) !== null) {
          filename = (0, import_obsidian2.normalizePath)(decodeURI(result[0])).trim();
        }
      }
      if (filename == "")
        throw new Error("No file found in the text.");
      const fileInSpecificFolder = filename.contains("/");
      const AttInRootFolder = attachmentPath === "" || attachmentPath === "/";
      const AttInCurrentFolder = attachmentPath.startsWith("./");
      const AttInSpecificFolder = !AttInRootFolder && !AttInCurrentFolder;
      let fullPath2 = "";
      if (AttInRootFolder || fileInSpecificFolder)
        fullPath2 = filename;
      else {
        if (AttInSpecificFolder)
          fullPath2 = attachmentPath + "/" + filename;
        if (AttInCurrentFolder) {
          const attFolder = attachmentPath.substring(2);
          if (attFolder.length == 0)
            fullPath2 = this.getCurrentPath() + "/" + filename;
          else
            fullPath2 = this.getCurrentPath() + "/" + attFolder + "/" + filename;
        }
      }
      const exists = this.app.vault.getAbstractFileByPath(fullPath2) instanceof import_obsidian2.TAbstractFile;
      if (exists)
        return fullPath2;
      else {
        let path = "";
        let found = false;
        this.app.vault.getFiles().forEach((file) => {
          if (file.name === filename) {
            path = file.path;
            found = true;
          }
        });
        if (found)
          return path;
        else
          throw new Error("File not found");
      }
    });
    return fullPath;
  }
  async generateTextWithPdf(prompt, editor, currentLn, filepath) {
    const pdfBuffer = await this.app.vault.adapter.readBinary(filepath);
    const pdfjs = await (0, import_obsidian2.loadPdfJs)();
    const pdf = await pdfjs.getDocument(pdfBuffer).promise;
    const context = `As an assistant who can learn from text given to you, your task is to incorporate information from text given to you into your answers when responding to questions. Your response should include the relevant information from the text given to you and provide attribution by mentioning the page number. Below is the content, which is extracted from a PDF file:

`;
    let message = context;
    for (let i = 0; i < pdf.numPages; i++) {
      const page = await pdf.getPage(i + 1);
      const content = await page.getTextContent();
      const pageContent = content.items.map((item) => item.str).filter((str) => str !== "").join(" ").replace(/\s+/g, " ");
      message += `Page ${i + 1}: ` + pageContent + "\n";
    }
    return this.generateText(prompt, editor, currentLn, message);
  }
  commandGenerateText(editor, prompt) {
    const currentLn = editor.getCursor("to").line;
    if (this.writing) {
      new import_obsidian2.Notice("Generator is already in progress.");
      return;
    }
    this.writing = true;
    new import_obsidian2.Notice("Generating text...");
    this.generateText(prompt, editor, currentLn).then((text) => {
      new import_obsidian2.Notice("Text completed.");
      this.writing = false;
    }).catch((error) => {
      console.log(error.message);
      new import_obsidian2.Notice(error.message);
      this.writing = false;
    });
  }
  commandGenerateTextWithPdf(editor, prompt) {
    const currentLn = editor.getCursor("to").line;
    const position = editor.getCursor();
    const text = editor.getRange({ line: 0, ch: 0 }, position);
    const regex = [
      /(?<=\[(.*)]\()(([^[\]])+)\.pdf(?=\))/g,
      /(?<=\[\[)(([^[\]])+)\.pdf(?=]])/g
    ];
    this.findFilePath(text, regex).then((path) => {
      if (this.writing)
        throw new Error("Generator is already in progress.");
      this.writing = true;
      new import_obsidian2.Notice(`Generating text in context of ${path}...`);
      this.generateTextWithPdf(prompt, editor, currentLn, path).then((text2) => {
        new import_obsidian2.Notice("Text completed.");
        this.writing = false;
      }).catch((error) => {
        console.log(error.message);
        new import_obsidian2.Notice(error.message);
        this.writing = false;
      });
    }).catch((error) => {
      console.log(error.message);
      new import_obsidian2.Notice(error.message);
    });
  }
  commandGenerateImage(editor, prompt) {
    const currentLn = editor.getCursor("to").line;
    if (this.writing) {
      new import_obsidian2.Notice("Generator is already in progress.");
      return;
    }
    this.writing = true;
    new import_obsidian2.Notice("Generating image...");
    this.generateImage(prompt).then((text) => {
      this.writeText(editor, currentLn, text);
      new import_obsidian2.Notice("Image Generated.");
      this.writing = false;
    }).catch((error) => {
      console.log(error.message);
      new import_obsidian2.Notice(error.message);
      this.writing = false;
    });
  }
  commandGenerateTranscript(editor) {
    const position = editor.getCursor();
    const text = editor.getRange({ line: 0, ch: 0 }, position);
    const regex = [
      /(?<=\[\[)(([^[\]])+)\.(mp3|mp4|mpeg|mpga|m4a|wav|webm)(?=]])/g,
      /(?<=\[(.*)]\()(([^[\]])+)\.(mp3|mp4|mpeg|mpga|m4a|wav|webm)(?=\))/g
    ];
    this.findFilePath(text, regex).then((path) => {
      const fileType = path.split(".").pop();
      if (fileType == void 0 || fileType == null || fileType == "") {
        new import_obsidian2.Notice("No audio file found");
      } else {
        this.app.vault.adapter.exists(path).then((exists) => {
          if (!exists)
            throw new Error(path + " does not exist");
          this.app.vault.adapter.readBinary(path).then((audioBuffer) => {
            if (this.writing) {
              new import_obsidian2.Notice("Generator is already in progress.");
              return;
            }
            this.writing = true;
            new import_obsidian2.Notice("Generating transcript...");
            this.generateTranscript(audioBuffer, fileType).then((result) => {
              this.writeText(editor, position.line, result);
              new import_obsidian2.Notice("Transcript Generated.");
              this.writing = false;
            }).catch((error) => {
              console.log(error.message);
              new import_obsidian2.Notice(error.message);
              this.writing = false;
            });
          });
        });
      }
    }).catch((error) => {
      console.log(error.message);
      new import_obsidian2.Notice(error.message);
    });
  }
  async onload() {
    await this.loadSettings();
    this.writing = false;
    this.addCommand({
      id: "text-prompt",
      name: "Generate text from prompt",
      editorCallback: (editor, view) => {
        const onSubmit = (prompt) => {
          this.commandGenerateText(editor, prompt);
        };
        new PromptModal(this.app, "", onSubmit).open();
      }
    });
    this.addCommand({
      id: "img-prompt",
      name: "Generate an image from prompt",
      editorCallback: (editor, view) => {
        const onSubmit = (prompt) => {
          this.commandGenerateImage(editor, prompt);
        };
        new PromptModal(this.app, "", onSubmit).open();
      }
    });
    this.addCommand({
      id: "text-line",
      name: "Generate text from the current line",
      editorCallback: (editor, view) => {
        const position = editor.getCursor();
        const lineContent = editor.getLine(position.line);
        this.commandGenerateText(editor, lineContent);
      }
    });
    this.addCommand({
      id: "img-line",
      name: "Generate an image from the current line",
      editorCallback: (editor, view) => {
        const position = editor.getCursor();
        const lineContent = editor.getLine(position.line);
        this.commandGenerateImage(editor, lineContent);
      }
    });
    this.addCommand({
      id: "text-selected",
      name: "Generate text from the selected text",
      editorCallback: (editor, view) => {
        const selectedText = editor.getSelection();
        this.commandGenerateText(editor, selectedText);
      }
    });
    this.addCommand({
      id: "img-selected",
      name: "Generate an image from the selected text",
      editorCallback: (editor, view) => {
        const selectedText = editor.getSelection();
        new import_obsidian2.Notice("Generating image...");
        this.commandGenerateImage(editor, selectedText);
      }
    });
    this.addCommand({
      id: "audio-transcript",
      name: "Generate a transcript from the above audio",
      editorCallback: (editor, view) => {
        this.commandGenerateTranscript(editor);
      }
    });
    this.addCommand({
      id: "pdf-prompt",
      name: "Generate text from prompt in context of the above PDF",
      editorCallback: (editor, view) => {
        const onSubmit = (prompt) => {
          this.commandGenerateTextWithPdf(editor, prompt);
        };
        new PromptModal(this.app, "", onSubmit).open();
      }
    });
    this.addCommand({
      id: "pdf-line",
      name: "Generate text from the current line in context of the above PDF",
      editorCallback: (editor, view) => {
        const position = editor.getCursor();
        const lineCotent = editor.getLine(position.line);
        this.commandGenerateTextWithPdf(editor, lineCotent);
      }
    });
    this.addCommand({
      id: "pdf-selected",
      name: "Generate text from the selected text in context of the above PDF",
      editorCallback: (editor, view) => {
        const selectedText = editor.getSelection();
        this.commandGenerateTextWithPdf(editor, selectedText);
      }
    });
    const extraCommandsForSelected = this.settings.promptsForSelected.split("\n");
    for (let command of extraCommandsForSelected) {
      command = command.trim();
      if (command == null || command == void 0 || command.length < 1)
        continue;
      const cid = command.toLowerCase().replace(/ /g, "-");
      this.addCommand({
        id: cid,
        name: command,
        editorCallback: (editor, view) => {
          const selectedText = editor.getSelection();
          const prompt = "You are an assistant who can learn from the text I give to you. Here is the text selected:\n\n" + selectedText + "\n\n" + command;
          this.commandGenerateText(editor, prompt);
        }
      });
    }
    const extraCommandsForPdf = this.settings.promptsForPdf.split("\n");
    for (let command of extraCommandsForPdf) {
      command = command.trim();
      if (command == null || command == void 0 || command.length < 1)
        continue;
      const cid = command.toLowerCase().replace(/ /g, "-");
      this.addCommand({
        id: cid,
        name: command,
        editorCallback: (editor, view) => {
          this.commandGenerateTextWithPdf(editor, command);
        }
      });
    }
    this.addSettingTab(new ApiSettingTab(this.app, this));
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var ApiSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "OpenAI API" });
    new import_obsidian2.Setting(containerEl).setName("OpenAI API key").setDesc("For use of OpenAI models").addText((text) => text.setPlaceholder("Enter your key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Model").setDesc("Select the model to use for content generation").addText((text) => text.setPlaceholder("gpt-3.5-turbo").setValue(this.plugin.settings.model).onChange(async (value) => {
      this.plugin.settings.model = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Image Size").setDesc("Size of the image to generate").addDropdown((dropdown) => dropdown.addOption("256x256", "256x256").addOption("512x512", "512x512").addOption("1024x1024", "1024x1024").setValue(this.plugin.settings.imgSize).onChange(async (value) => {
      this.plugin.settings.imgSize = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Image Format").setDesc("Select how you want to save the image").addDropdown((dropdown) => dropdown.addOption("base64", "base64").addOption("attachment", "attachment").setValue(this.plugin.settings.saveImg).onChange(async (value) => {
      this.plugin.settings.saveImg = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Search Engine" });
    containerEl.createEl("p", { text: "You may use Bing without an API key. Use an API key to achieve the best performance." });
    new import_obsidian2.Setting(containerEl).setName("Use search engine").setDesc("Use text generator with search engine").addToggle((value) => value.setValue(this.plugin.settings.useSearchEngine).onChange(async (value2) => {
      this.plugin.settings.useSearchEngine = value2;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Search engine").setDesc("Select the search engine to use with text generator").addDropdown((dropdown) => dropdown.addOption("bing", "bing").setValue(this.plugin.settings.searchEngine).onChange(async (value) => {
      this.plugin.settings.searchEngine = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Bing Web Search API key").setDesc("Find in 'manage keys' in Azure portal").addText((text) => text.setPlaceholder("Enter your key").setValue(this.plugin.settings.bingSearchKey).onChange(async (value) => {
      this.plugin.settings.bingSearchKey = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Prompt Perfect" });
    new import_obsidian2.Setting(containerEl).setName("Use Prompt Perfect").setDesc("Use Prompt Perfect to improve prompts for text and image generation").addToggle((value) => value.setValue(this.plugin.settings.usePromptPerfect).onChange(async (value2) => {
      this.plugin.settings.usePromptPerfect = value2;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Prompt Perfect API key").setDesc("Find in Prompt Perfect settings").addText((text) => text.setPlaceholder("Enter your key").setValue(this.plugin.settings.promptPerfectKey).onChange(async (value) => {
      this.plugin.settings.promptPerfectKey = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "Custom Commands" });
    containerEl.createEl("p", { text: "Reload the plugin after changing below settings" });
    new import_obsidian2.Setting(containerEl).setName("Custom command for selected text").setDesc("Fill in text generator prompts line by line. They will appear as commands.").addTextArea((text) => text.setPlaceholder("Summarise the text\nTranslate into English").setValue(this.plugin.settings.promptsForSelected).onChange(async (value) => {
      this.plugin.settings.promptsForSelected = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Custom command for PDF").setDesc("Fill in text generator prompts line by line. They will appear as commands.").addTextArea((text) => text.setPlaceholder("Summarise the PDF").setValue(this.plugin.settings.promptsForPdf).onChange(async (value) => {
      this.plugin.settings.promptsForPdf = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYmluZC5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvY3JlYXRlRXJyb3IuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWwuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL3hoci5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL2lzQ2FuY2VsLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2Jhc2UuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2NvbW1vbi5qcyIsICJub2RlX21vZHVsZXMvb3BlbmFpL2Rpc3QvYXBpLmpzIiwgIm5vZGVfbW9kdWxlcy9vcGVuYWkvcGFja2FnZS5qc29uIiwgIm5vZGVfbW9kdWxlcy9mb3JtLWRhdGEvbGliL2Jyb3dzZXIuanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2NvbmZpZ3VyYXRpb24uanMiLCAibm9kZV9tb2R1bGVzL29wZW5haS9kaXN0L2luZGV4LmpzIiwgInNyYy9tYWluLnRzIiwgInNyYy9tb2RhbC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWwpIHtcbiAgaWYgKHRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiBwcm90b3R5cGUgPT09IG51bGwgfHwgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBVUkxTZWFyY2hQYXJhbXNdJztcbn1cblxuLyoqXG4gKiBUcmltIGV4Y2VzcyB3aGl0ZXNwYWNlIG9mZiB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyIFRoZSBTdHJpbmcgdG8gdHJpbVxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnRyaW0gPyBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOYXRpdmVTY3JpcHQnIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdOUycpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QocmVzdWx0W2tleV0pICYmIGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWwuc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFJlbW92ZSBieXRlIG9yZGVyIG1hcmtlci4gVGhpcyBjYXRjaGVzIEVGIEJCIEJGICh0aGUgVVRGLTggQk9NKVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IHdpdGggQk9NXG4gKiBAcmV0dXJuIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuZnVuY3Rpb24gc3RyaXBCT00oY29udGVudCkge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0OiBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW0sXG4gIHN0cmlwQk9NOiBzdHJpcEJPTVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdmFyIGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIGlmIChoYXNobWFya0luZGV4ICE9PSAtMSkge1xuICAgICAgdXJsID0gdXJsLnNsaWNlKDAsIGhhc2htYXJrSW5kZXgpO1xuICAgIH1cblxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQsIG9wdGlvbnMpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWQsXG4gICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cblxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgZXJyb3IuaXNBeGlvc0Vycm9yID0gdHJ1ZTtcblxuICBlcnJvci50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdGhpcy5jb25maWcsXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9O1xuICByZXR1cm4gZXJyb3I7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4vY3JlYXRlRXJyb3InKTtcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICB2YXIgdmFsaWRhdGVTdGF0dXMgPSByZXNwb25zZS5jb25maWcudmFsaWRhdGVTdGF0dXM7XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAgIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciBpc0Fic29sdXRlVVJMID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBiYXNlVVJMIHdpdGggdGhlIHJlcXVlc3RlZFVSTCxcbiAqIG9ubHkgd2hlbiB0aGUgcmVxdWVzdGVkVVJMIGlzIG5vdCBhbHJlYWR5IGFuIGFic29sdXRlIFVSTC5cbiAqIElmIHRoZSByZXF1ZXN0VVJMIGlzIGFic29sdXRlLCB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHJlcXVlc3RlZFVSTCB1bnRvdWNoZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVxdWVzdGVkVVJMIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCB0byBjb21iaW5lXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRGdWxsUGF0aChiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpIHtcbiAgaWYgKGJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwocmVxdWVzdGVkVVJMKSkge1xuICAgIHJldHVybiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZXF1ZXN0ZWRVUkwpO1xuICB9XG4gIHJldHVybiByZXF1ZXN0ZWRVUkw7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgICAgfTtcbiAgICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAgIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSkoKVxuKTtcbiIsICIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciB0cmFuc2l0aW9uYWxEZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbCcpO1xudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9DYW5jZWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuICAgIHZhciByZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIHZhciBvbkNhbmNlbGVkO1xuICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi51bnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKHJlcXVlc3REYXRhKSkge1xuICAgICAgZGVsZXRlIHJlcXVlc3RIZWFkZXJzWydDb250ZW50LVR5cGUnXTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCk7XG4gICAgfVxuXG4gICAgdmFyIGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmVxdWVzdC5vcGVuKGNvbmZpZy5tZXRob2QudG9VcHBlckNhc2UoKSwgYnVpbGRVUkwoZnVsbFBhdGgsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgZnVuY3Rpb24gb25sb2FkZW5kKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIXJlc3BvbnNlVHlwZSB8fCByZXNwb25zZVR5cGUgPT09ICd0ZXh0JyB8fCAgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgdmFyIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICB2YXIgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyAnRVRJTUVET1VUJyA6ICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKHJlc3BvbnNlVHlwZSAmJiByZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBmdW5jdGlvbihjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlamVjdCghY2FuY2VsIHx8IChjYW5jZWwgJiYgY2FuY2VsLnR5cGUpID8gbmV3IENhbmNlbCgnY2FuY2VsZWQnKSA6IGNhbmNlbCk7XG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4gJiYgY29uZmlnLmNhbmNlbFRva2VuLnN1YnNjcmliZShvbkNhbmNlbGVkKTtcbiAgICAgIGlmIChjb25maWcuc2lnbmFsKSB7XG4gICAgICAgIGNvbmZpZy5zaWduYWwuYWJvcnRlZCA/IG9uQ2FuY2VsZWQoKSA6IGNvbmZpZy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkNhbmNlbGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXJlcXVlc3REYXRhKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvZW5oYW5jZUVycm9yJyk7XG52YXIgdHJhbnNpdGlvbmFsRGVmYXVsdHMgPSByZXF1aXJlKCcuL3RyYW5zaXRpb25hbCcpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4uL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5U2FmZWx5KHJhd1ZhbHVlLCBwYXJzZXIsIGVuY29kZXIpIHtcbiAgaWYgKHV0aWxzLmlzU3RyaW5nKHJhd1ZhbHVlKSkge1xuICAgIHRyeSB7XG4gICAgICAocGFyc2VyIHx8IEpTT04ucGFyc2UpKHJhd1ZhbHVlKTtcbiAgICAgIHJldHVybiB1dGlscy50cmltKHJhd1ZhbHVlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAoZS5uYW1lICE9PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChlbmNvZGVyIHx8IEpTT04uc3RyaW5naWZ5KShyYXdWYWx1ZSk7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0FjY2VwdCcpO1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkgfHwgKGhlYWRlcnMgJiYgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPT09ICdhcHBsaWNhdGlvbi9qc29uJykpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIHZhciB0cmFuc2l0aW9uYWwgPSB0aGlzLnRyYW5zaXRpb25hbCB8fCBkZWZhdWx0cy50cmFuc2l0aW9uYWw7XG4gICAgdmFyIHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICB2YXIgZm9yY2VkSlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLmZvcmNlZEpTT05QYXJzaW5nO1xuICAgIHZhciBzdHJpY3RKU09OUGFyc2luZyA9ICFzaWxlbnRKU09OUGFyc2luZyAmJiB0aGlzLnJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nO1xuXG4gICAgaWYgKHN0cmljdEpTT05QYXJzaW5nIHx8IChmb3JjZWRKU09OUGFyc2luZyAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiBkYXRhLmxlbmd0aCkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBlbmhhbmNlRXJyb3IoZSwgdGhpcywgJ0VfSlNPTl9QQVJTRScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICB2YXIgY29udGV4dCA9IHRoaXMgfHwgZGVmYXVsdHM7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuLmNhbGwoY29udGV4dCwgZGF0YSwgaGVhZGVycyk7XG4gIH0pO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL0NhbmNlbCcpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbCgnY2FuY2VsZWQnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzXG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICBjb25maWcsXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBOZXcgb2JqZWN0IHJlc3VsdGluZyBmcm9tIG1lcmdpbmcgY29uZmlnMiB0byBjb25maWcxXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIHZhciBjb25maWcgPSB7fTtcblxuICBmdW5jdGlvbiBnZXRNZXJnZWRWYWx1ZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UodGFyZ2V0LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2Uoe30sIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2Uuc2xpY2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURlZXBQcm9wZXJ0aWVzKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBjb25maWcyW3Byb3BdKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcyW3Byb3BdKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoY29uZmlnMVtwcm9wXSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGNvbmZpZzFbcHJvcF0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBtZXJnZURpcmVjdEtleXMocHJvcCkge1xuICAgIGlmIChwcm9wIGluIGNvbmZpZzIpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdKTtcbiAgICB9IGVsc2UgaWYgKHByb3AgaW4gY29uZmlnMSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgY29uZmlnMVtwcm9wXSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1lcmdlTWFwID0ge1xuICAgICd1cmwnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdtZXRob2QnOiB2YWx1ZUZyb21Db25maWcyLFxuICAgICdkYXRhJzogdmFsdWVGcm9tQ29uZmlnMixcbiAgICAnYmFzZVVSTCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3RyYW5zZm9ybVJlcXVlc3QnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc2Zvcm1SZXNwb25zZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3BhcmFtc1NlcmlhbGl6ZXInOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0aW1lb3V0JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAndGltZW91dE1lc3NhZ2UnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd3aXRoQ3JlZGVudGlhbHMnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdhZGFwdGVyJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VUeXBlJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAneHNyZkNvb2tpZU5hbWUnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd4c3JmSGVhZGVyTmFtZSc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ29uVXBsb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdvbkRvd25sb2FkUHJvZ3Jlc3MnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdkZWNvbXByZXNzJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnbWF4Q29udGVudExlbmd0aCc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ21heEJvZHlMZW5ndGgnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICd0cmFuc3BvcnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwQWdlbnQnOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdodHRwc0FnZW50JzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAnY2FuY2VsVG9rZW4nOiBkZWZhdWx0VG9Db25maWcyLFxuICAgICdzb2NrZXRQYXRoJzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICAncmVzcG9uc2VFbmNvZGluZyc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgJ3ZhbGlkYXRlU3RhdHVzJzogbWVyZ2VEaXJlY3RLZXlzXG4gIH07XG5cbiAgdXRpbHMuZm9yRWFjaChPYmplY3Qua2V5cyhjb25maWcxKS5jb25jYXQoT2JqZWN0LmtleXMoY29uZmlnMikpLCBmdW5jdGlvbiBjb21wdXRlQ29uZmlnVmFsdWUocHJvcCkge1xuICAgIHZhciBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgdmFyIGNvbmZpZ1ZhbHVlID0gbWVyZ2UocHJvcCk7XG4gICAgKHV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZ1ZhbHVlKSAmJiBtZXJnZSAhPT0gbWVyZ2VEaXJlY3RLZXlzKSB8fCAoY29uZmlnW3Byb3BdID0gY29uZmlnVmFsdWUpO1xuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsICJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJ2ZXJzaW9uXCI6IFwiMC4yNi4xXCJcbn07IiwgIid1c2Ugc3RyaWN0JztcblxudmFyIFZFUlNJT04gPSByZXF1aXJlKCcuLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbnZhciB2YWxpZGF0b3JzID0ge307XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5bJ29iamVjdCcsICdib29sZWFuJywgJ251bWJlcicsICdmdW5jdGlvbicsICdzdHJpbmcnLCAnc3ltYm9sJ10uZm9yRWFjaChmdW5jdGlvbih0eXBlLCBpKSB7XG4gIHZhbGlkYXRvcnNbdHlwZV0gPSBmdW5jdGlvbiB2YWxpZGF0b3IodGhpbmcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHRoaW5nID09PSB0eXBlIHx8ICdhJyArIChpIDwgMSA/ICduICcgOiAnICcpICsgdHlwZTtcbiAgfTtcbn0pO1xuXG52YXIgZGVwcmVjYXRlZFdhcm5pbmdzID0ge307XG5cbi8qKlxuICogVHJhbnNpdGlvbmFsIG9wdGlvbiB2YWxpZGF0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb258Ym9vbGVhbj99IHZhbGlkYXRvciAtIHNldCB0byBmYWxzZSBpZiB0aGUgdHJhbnNpdGlvbmFsIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkXG4gKiBAcGFyYW0ge3N0cmluZz99IHZlcnNpb24gLSBkZXByZWNhdGVkIHZlcnNpb24gLyByZW1vdmVkIHNpbmNlIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nP30gbWVzc2FnZSAtIHNvbWUgbWVzc2FnZSB3aXRoIGFkZGl0aW9uYWwgaW5mb1xuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCBvcHQsIG9wdHMpIHtcbiAgICBpZiAodmFsaWRhdG9yID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGZvcm1hdE1lc3NhZ2Uob3B0LCAnIGhhcyBiZWVuIHJlbW92ZWQnICsgKHZlcnNpb24gPyAnIGluICcgKyB2ZXJzaW9uIDogJycpKSk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBzY2hlbWFcbiAqIEBwYXJhbSB7Ym9vbGVhbj99IGFsbG93VW5rbm93blxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIHZhciBvcHQgPSBrZXlzW2ldO1xuICAgIHZhciB2YWxpZGF0b3IgPSBzY2hlbWFbb3B0XTtcbiAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICB2YXIgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWxpZGF0b3IodmFsdWUsIG9wdCwgb3B0aW9ucyk7XG4gICAgICBpZiAocmVzdWx0ICE9PSB0cnVlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IEVycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0KTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFzc2VydE9wdGlvbnM6IGFzc2VydE9wdGlvbnMsXG4gIHZhbGlkYXRvcnM6IHZhbGlkYXRvcnNcbn07XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xudmFyIHZhbGlkYXRvciA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdmFsaWRhdG9yJyk7XG5cbnZhciB2YWxpZGF0b3JzID0gdmFsaWRhdG9yLnZhbGlkYXRvcnM7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAvLyBBbGxvdyBmb3IgYXhpb3MoJ2V4YW1wbGUvdXJsJ1ssIGNvbmZpZ10pIGEgbGEgZmV0Y2ggQVBJXG4gIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBjb25maWdPclVybDtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcgPSBjb25maWdPclVybCB8fCB7fTtcbiAgfVxuXG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgLy8gU2V0IGNvbmZpZy5tZXRob2RcbiAgaWYgKGNvbmZpZy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuICB9IGVsc2UgaWYgKHRoaXMuZGVmYXVsdHMubWV0aG9kKSB7XG4gICAgY29uZmlnLm1ldGhvZCA9IHRoaXMuZGVmYXVsdHMubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnLm1ldGhvZCA9ICdnZXQnO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25hbCA9IGNvbmZpZy50cmFuc2l0aW9uYWw7XG5cbiAgaWYgKHRyYW5zaXRpb25hbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICBzaWxlbnRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgIGZvcmNlZEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgIH0sIGZhbHNlKTtcbiAgfVxuXG4gIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluID0gW107XG4gIHZhciBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBpZiAodHlwZW9mIGludGVyY2VwdG9yLnJ1bldoZW4gPT09ICdmdW5jdGlvbicgJiYgaW50ZXJjZXB0b3IucnVuV2hlbihjb25maWcpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyA9IHN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycyAmJiBpbnRlcmNlcHRvci5zeW5jaHJvbm91cztcblxuICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHZhciByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdmFyIHByb21pc2U7XG5cbiAgaWYgKCFzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMpIHtcbiAgICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuXG4gICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICBjaGFpbiA9IGNoYWluLmNvbmNhdChyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuXG4gIHZhciBuZXdDb25maWcgPSBjb25maWc7XG4gIHdoaWxlIChyZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICB2YXIgb25GdWxmaWxsZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpO1xuICAgIHZhciBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKTtcbiAgICB0cnkge1xuICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgb25SZWplY3RlZChlcnJvcik7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB0cnkge1xuICAgIHByb21pc2UgPSBkaXNwYXRjaFJlcXVlc3QobmV3Q29uZmlnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICB9XG5cbiAgd2hpbGUgKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5zaGlmdCgpLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbkF4aW9zLnByb3RvdHlwZS5nZXRVcmkgPSBmdW5jdGlvbiBnZXRVcmkoY29uZmlnKSB7XG4gIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG4gIHJldHVybiBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcikucmVwbGFjZSgvXlxcPy8sICcnKTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IChjb25maWcgfHwge30pLmRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwgIid1c2Ugc3RyaWN0JztcblxudmFyIENhbmNlbCA9IHJlcXVpcmUoJy4vQ2FuY2VsJyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcblxuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbihmdW5jdGlvbihjYW5jZWwpIHtcbiAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgIHZhciBpO1xuICAgIHZhciBsID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0b2tlbi5fbGlzdGVuZXJzW2ldKGNhbmNlbCk7XG4gICAgfVxuICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICB9KTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICB0aGlzLnByb21pc2UudGhlbiA9IGZ1bmN0aW9uKG9uZnVsZmlsbGVkKSB7XG4gICAgdmFyIF9yZXNvbHZlO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICB0b2tlbi5zdWJzY3JpYmUocmVzb2x2ZSk7XG4gICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICBwcm9taXNlLmNhbmNlbCA9IGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gKi9cblxuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICB9XG59O1xuXG4vKipcbiAqIFVuc3Vic2NyaWJlIGZyb20gdGhlIGNhbmNlbCBzaWduYWxcbiAqL1xuXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICBpZiAoIXRoaXMuX2xpc3RlbmVycykge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3ByZWFkKGNhbGxiYWNrKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKGFycikge1xuICAgIHJldHVybiBjYWxsYmFjay5hcHBseShudWxsLCBhcnIpO1xuICB9O1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXhpb3NFcnJvcihwYXlsb2FkKSB7XG4gIHJldHVybiB1dGlscy5pc09iamVjdChwYXlsb2FkKSAmJiAocGF5bG9hZC5pc0F4aW9zRXJyb3IgPT09IHRydWUpO1xufTtcbiIsICIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9jb3JlL21lcmdlQ29uZmlnJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5heGlvcy5WRVJTSU9OID0gcmVxdWlyZSgnLi9lbnYvZGF0YScpLnZlcnNpb247XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0F4aW9zRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iLCAibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsICJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBPcGVuQUkgQVBJXG4gKiBBUElzIGZvciBzYW1wbGluZyBmcm9tIGFuZCBmaW5lLXR1bmluZyBsYW5ndWFnZSBtb2RlbHNcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMS4yLjBcbiAqXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBleHBvcnRzLkJhc2VBUEkgPSBleHBvcnRzLkNPTExFQ1RJT05fRk9STUFUUyA9IGV4cG9ydHMuQkFTRV9QQVRIID0gdm9pZCAwO1xuY29uc3QgYXhpb3NfMSA9IHJlcXVpcmUoXCJheGlvc1wiKTtcbmV4cG9ydHMuQkFTRV9QQVRIID0gXCJodHRwczovL2FwaS5vcGVuYWkuY29tL3YxXCIucmVwbGFjZSgvXFwvKyQvLCBcIlwiKTtcbi8qKlxuICpcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5DT0xMRUNUSU9OX0ZPUk1BVFMgPSB7XG4gICAgY3N2OiBcIixcIixcbiAgICBzc3Y6IFwiIFwiLFxuICAgIHRzdjogXCJcXHRcIixcbiAgICBwaXBlczogXCJ8XCIsXG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICogQGNsYXNzIEJhc2VBUElcbiAqL1xuY2xhc3MgQmFzZUFQSSB7XG4gICAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiwgYmFzZVBhdGggPSBleHBvcnRzLkJBU0VfUEFUSCwgYXhpb3MgPSBheGlvc18xLmRlZmF1bHQpIHtcbiAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGJhc2VQYXRoO1xuICAgICAgICB0aGlzLmF4aW9zID0gYXhpb3M7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmNvbmZpZ3VyYXRpb24gPSBjb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgdGhpcy5iYXNlUGF0aCA9IGNvbmZpZ3VyYXRpb24uYmFzZVBhdGggfHwgdGhpcy5iYXNlUGF0aDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuQmFzZUFQSSA9IEJhc2VBUEk7XG47XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgUmVxdWlyZWRFcnJvclxuICogQGV4dGVuZHMge0Vycm9yfVxuICovXG5jbGFzcyBSZXF1aXJlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkLCBtc2cpIHtcbiAgICAgICAgc3VwZXIobXNnKTtcbiAgICAgICAgdGhpcy5maWVsZCA9IGZpZWxkO1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlJlcXVpcmVkRXJyb3JcIjtcbiAgICB9XG59XG5leHBvcnRzLlJlcXVpcmVkRXJyb3IgPSBSZXF1aXJlZEVycm9yO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE9wZW5BSSBBUElcbiAqIEFQSXMgZm9yIHNhbXBsaW5nIGZyb20gYW5kIGZpbmUtdHVuaW5nIGxhbmd1YWdlIG1vZGVsc1xuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjIuMFxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbnZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24gPSBleHBvcnRzLnRvUGF0aFN0cmluZyA9IGV4cG9ydHMuc2VyaWFsaXplRGF0YUlmTmVlZGVkID0gZXhwb3J0cy5zZXRTZWFyY2hQYXJhbXMgPSBleHBvcnRzLnNldE9BdXRoVG9PYmplY3QgPSBleHBvcnRzLnNldEJlYXJlckF1dGhUb09iamVjdCA9IGV4cG9ydHMuc2V0QmFzaWNBdXRoVG9PYmplY3QgPSBleHBvcnRzLnNldEFwaUtleVRvT2JqZWN0ID0gZXhwb3J0cy5hc3NlcnRQYXJhbUV4aXN0cyA9IGV4cG9ydHMuRFVNTVlfQkFTRV9VUkwgPSB2b2lkIDA7XG5jb25zdCBiYXNlXzEgPSByZXF1aXJlKFwiLi9iYXNlXCIpO1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLkRVTU1ZX0JBU0VfVVJMID0gJ2h0dHBzOi8vZXhhbXBsZS5jb20nO1xuLyoqXG4gKlxuICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5hc3NlcnRQYXJhbUV4aXN0cyA9IGZ1bmN0aW9uIChmdW5jdGlvbk5hbWUsIHBhcmFtTmFtZSwgcGFyYW1WYWx1ZSkge1xuICAgIGlmIChwYXJhbVZhbHVlID09PSBudWxsIHx8IHBhcmFtVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgYmFzZV8xLlJlcXVpcmVkRXJyb3IocGFyYW1OYW1lLCBgUmVxdWlyZWQgcGFyYW1ldGVyICR7cGFyYW1OYW1lfSB3YXMgbnVsbCBvciB1bmRlZmluZWQgd2hlbiBjYWxsaW5nICR7ZnVuY3Rpb25OYW1lfS5gKTtcbiAgICB9XG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLnNldEFwaUtleVRvT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCwga2V5UGFyYW1OYW1lLCBjb25maWd1cmF0aW9uKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5hcGlLZXkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXBpS2V5VmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hcGlLZXkgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IHlpZWxkIGNvbmZpZ3VyYXRpb24uYXBpS2V5KGtleVBhcmFtTmFtZSlcbiAgICAgICAgICAgICAgICA6IHlpZWxkIGNvbmZpZ3VyYXRpb24uYXBpS2V5O1xuICAgICAgICAgICAgb2JqZWN0W2tleVBhcmFtTmFtZV0gPSBsb2NhbFZhckFwaUtleVZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLnNldEJhc2ljQXV0aFRvT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCwgY29uZmlndXJhdGlvbikge1xuICAgIGlmIChjb25maWd1cmF0aW9uICYmIChjb25maWd1cmF0aW9uLnVzZXJuYW1lIHx8IGNvbmZpZ3VyYXRpb24ucGFzc3dvcmQpKSB7XG4gICAgICAgIG9iamVjdFtcImF1dGhcIl0gPSB7IHVzZXJuYW1lOiBjb25maWd1cmF0aW9uLnVzZXJuYW1lLCBwYXNzd29yZDogY29uZmlndXJhdGlvbi5wYXNzd29yZCB9O1xuICAgIH1cbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuc2V0QmVhcmVyQXV0aFRvT2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCwgY29uZmlndXJhdGlvbikge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlmIChjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gdHlwZW9mIGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW4gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IHlpZWxkIGNvbmZpZ3VyYXRpb24uYWNjZXNzVG9rZW4oKVxuICAgICAgICAgICAgICAgIDogeWllbGQgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgIG9iamVjdFtcIkF1dGhvcml6YXRpb25cIl0gPSBcIkJlYXJlciBcIiArIGFjY2Vzc1Rva2VuO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLnNldE9BdXRoVG9PYmplY3QgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCBzY29wZXMsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBpZiAoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuKSB7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckFjY2Vzc1Rva2VuVmFsdWUgPSB0eXBlb2YgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgID8geWllbGQgY29uZmlndXJhdGlvbi5hY2Nlc3NUb2tlbihuYW1lLCBzY29wZXMpXG4gICAgICAgICAgICAgICAgOiB5aWVsZCBjb25maWd1cmF0aW9uLmFjY2Vzc1Rva2VuO1xuICAgICAgICAgICAgb2JqZWN0W1wiQXV0aG9yaXphdGlvblwiXSA9IFwiQmVhcmVyIFwiICsgbG9jYWxWYXJBY2Nlc3NUb2tlblZhbHVlO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZnVuY3Rpb24gc2V0RmxhdHRlbmVkUXVlcnlQYXJhbXModXJsU2VhcmNoUGFyYW1zLCBwYXJhbWV0ZXIsIGtleSA9IFwiXCIpIHtcbiAgICBpZiAocGFyYW1ldGVyID09IG51bGwpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHBhcmFtZXRlciA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJhbWV0ZXIpKSB7XG4gICAgICAgICAgICBwYXJhbWV0ZXIuZm9yRWFjaChpdGVtID0+IHNldEZsYXR0ZW5lZFF1ZXJ5UGFyYW1zKHVybFNlYXJjaFBhcmFtcywgaXRlbSwga2V5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwYXJhbWV0ZXIpLmZvckVhY2goY3VycmVudEtleSA9PiBzZXRGbGF0dGVuZWRRdWVyeVBhcmFtcyh1cmxTZWFyY2hQYXJhbXMsIHBhcmFtZXRlcltjdXJyZW50S2V5XSwgYCR7a2V5fSR7a2V5ICE9PSAnJyA/ICcuJyA6ICcnfSR7Y3VycmVudEtleX1gKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmICh1cmxTZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHVybFNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCBwYXJhbWV0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdXJsU2VhcmNoUGFyYW1zLnNldChrZXksIHBhcmFtZXRlcik7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMuc2V0U2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKHVybCwgLi4ub2JqZWN0cykge1xuICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXModXJsLnNlYXJjaCk7XG4gICAgc2V0RmxhdHRlbmVkUXVlcnlQYXJhbXMoc2VhcmNoUGFyYW1zLCBvYmplY3RzKTtcbiAgICB1cmwuc2VhcmNoID0gc2VhcmNoUGFyYW1zLnRvU3RyaW5nKCk7XG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLnNlcmlhbGl6ZURhdGFJZk5lZWRlZCA9IGZ1bmN0aW9uICh2YWx1ZSwgcmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICBjb25zdCBub25TdHJpbmcgPSB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnO1xuICAgIGNvbnN0IG5lZWRzU2VyaWFsaXphdGlvbiA9IG5vblN0cmluZyAmJiBjb25maWd1cmF0aW9uICYmIGNvbmZpZ3VyYXRpb24uaXNKc29uTWltZVxuICAgICAgICA/IGNvbmZpZ3VyYXRpb24uaXNKc29uTWltZShyZXF1ZXN0T3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSlcbiAgICAgICAgOiBub25TdHJpbmc7XG4gICAgcmV0dXJuIG5lZWRzU2VyaWFsaXphdGlvblxuICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KVxuICAgICAgICA6ICh2YWx1ZSB8fCBcIlwiKTtcbn07XG4vKipcbiAqXG4gKiBAZXhwb3J0XG4gKi9cbmV4cG9ydHMudG9QYXRoU3RyaW5nID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHJldHVybiB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG59O1xuLyoqXG4gKlxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbiA9IGZ1bmN0aW9uIChheGlvc0FyZ3MsIGdsb2JhbEF4aW9zLCBCQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4gKGF4aW9zID0gZ2xvYmFsQXhpb3MsIGJhc2VQYXRoID0gQkFTRV9QQVRIKSA9PiB7XG4gICAgICAgIGNvbnN0IGF4aW9zUmVxdWVzdEFyZ3MgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGF4aW9zQXJncy5vcHRpb25zKSwgeyB1cmw6ICgoY29uZmlndXJhdGlvbiA9PT0gbnVsbCB8fCBjb25maWd1cmF0aW9uID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWd1cmF0aW9uLmJhc2VQYXRoKSB8fCBiYXNlUGF0aCkgKyBheGlvc0FyZ3MudXJsIH0pO1xuICAgICAgICByZXR1cm4gYXhpb3MucmVxdWVzdChheGlvc1JlcXVlc3RBcmdzKTtcbiAgICB9O1xufTtcbiIsICJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBPcGVuQUkgQVBJXG4gKiBBUElzIGZvciBzYW1wbGluZyBmcm9tIGFuZCBmaW5lLXR1bmluZyBsYW5ndWFnZSBtb2RlbHNcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMS4yLjBcbiAqXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuT3BlbkFJQXBpID0gZXhwb3J0cy5PcGVuQUlBcGlGYWN0b3J5ID0gZXhwb3J0cy5PcGVuQUlBcGlGcCA9IGV4cG9ydHMuT3BlbkFJQXBpQXhpb3NQYXJhbUNyZWF0b3IgPSBleHBvcnRzLkNyZWF0ZUltYWdlUmVxdWVzdFJlc3BvbnNlRm9ybWF0RW51bSA9IGV4cG9ydHMuQ3JlYXRlSW1hZ2VSZXF1ZXN0U2l6ZUVudW0gPSBleHBvcnRzLkNoYXRDb21wbGV0aW9uUmVzcG9uc2VNZXNzYWdlUm9sZUVudW0gPSBleHBvcnRzLkNoYXRDb21wbGV0aW9uUmVxdWVzdE1lc3NhZ2VSb2xlRW51bSA9IHZvaWQgMDtcbmNvbnN0IGF4aW9zXzEgPSByZXF1aXJlKFwiYXhpb3NcIik7XG4vLyBTb21lIGltcG9ydHMgbm90IHVzZWQgZGVwZW5kaW5nIG9uIHRlbXBsYXRlIGNvbmRpdGlvbnNcbi8vIEB0cy1pZ25vcmVcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuLy8gQHRzLWlnbm9yZVxuY29uc3QgYmFzZV8xID0gcmVxdWlyZShcIi4vYmFzZVwiKTtcbmV4cG9ydHMuQ2hhdENvbXBsZXRpb25SZXF1ZXN0TWVzc2FnZVJvbGVFbnVtID0ge1xuICAgIFN5c3RlbTogJ3N5c3RlbScsXG4gICAgVXNlcjogJ3VzZXInLFxuICAgIEFzc2lzdGFudDogJ2Fzc2lzdGFudCdcbn07XG5leHBvcnRzLkNoYXRDb21wbGV0aW9uUmVzcG9uc2VNZXNzYWdlUm9sZUVudW0gPSB7XG4gICAgU3lzdGVtOiAnc3lzdGVtJyxcbiAgICBVc2VyOiAndXNlcicsXG4gICAgQXNzaXN0YW50OiAnYXNzaXN0YW50J1xufTtcbmV4cG9ydHMuQ3JlYXRlSW1hZ2VSZXF1ZXN0U2l6ZUVudW0gPSB7XG4gICAgXzI1NngyNTY6ICcyNTZ4MjU2JyxcbiAgICBfNTEyeDUxMjogJzUxMng1MTInLFxuICAgIF8xMDI0eDEwMjQ6ICcxMDI0eDEwMjQnXG59O1xuZXhwb3J0cy5DcmVhdGVJbWFnZVJlcXVlc3RSZXNwb25zZUZvcm1hdEVudW0gPSB7XG4gICAgVXJsOiAndXJsJyxcbiAgICBCNjRKc29uOiAnYjY0X2pzb24nXG59O1xuLyoqXG4gKiBPcGVuQUlBcGkgLSBheGlvcyBwYXJhbWV0ZXIgY3JlYXRvclxuICogQGV4cG9ydFxuICovXG5leHBvcnRzLk9wZW5BSUFwaUF4aW9zUGFyYW1DcmVhdG9yID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbmVUdW5lSWQgVGhlIElEIG9mIHRoZSBmaW5lLXR1bmUgam9iIHRvIGNhbmNlbFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY2FuY2VsRmluZVR1bmU6IChmaW5lVHVuZUlkLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbmVUdW5lSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NhbmNlbEZpbmVUdW5lJywgJ2ZpbmVUdW5lSWQnLCBmaW5lVHVuZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmluZS10dW5lcy97ZmluZV90dW5lX2lkfS9jYW5jZWxgXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wiZmluZV90dW5lX2lkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZmluZVR1bmVJZCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBBbnN3ZXJzIHRoZSBzcGVjaWZpZWQgcXVlc3Rpb24gdXNpbmcgdGhlIHByb3ZpZGVkIGRvY3VtZW50cyBhbmQgZXhhbXBsZXMuICBUaGUgZW5kcG9pbnQgZmlyc3QgW3NlYXJjaGVzXSgvZG9jcy9hcGktcmVmZXJlbmNlL3NlYXJjaGVzKSBvdmVyIHByb3ZpZGVkIGRvY3VtZW50cyBvciBmaWxlcyB0byBmaW5kIHJlbGV2YW50IGNvbnRleHQuIFRoZSByZWxldmFudCBjb250ZXh0IGlzIGNvbWJpbmVkIHdpdGggdGhlIHByb3ZpZGVkIGV4YW1wbGVzIGFuZCBxdWVzdGlvbiB0byBjcmVhdGUgdGhlIHByb21wdCBmb3IgW2NvbXBsZXRpb25dKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29tcGxldGlvbnMpLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUFuc3dlclJlcXVlc3R9IGNyZWF0ZUFuc3dlclJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUFuc3dlcjogKGNyZWF0ZUFuc3dlclJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQW5zd2VyUmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlQW5zd2VyJywgJ2NyZWF0ZUFuc3dlclJlcXVlc3QnLCBjcmVhdGVBbnN3ZXJSZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYW5zd2Vyc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKGNyZWF0ZUFuc3dlclJlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBjaGF0IG1lc3NhZ2VcbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3R9IGNyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ2hhdENvbXBsZXRpb246IChjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVDaGF0Q29tcGxldGlvbicsICdjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QnLCBjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9jaGF0L2NvbXBsZXRpb25zYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBjb21tb25fMS5zZXJpYWxpemVEYXRhSWZOZWVkZWQoY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0LCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgdGhlIHNwZWNpZmllZCBgcXVlcnlgIHVzaW5nIHByb3ZpZGVkIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciB0aGUgbGFiZWxlZCBleGFtcGxlcyB0byBzZWxlY3QgdGhlIG9uZXMgbW9zdCByZWxldmFudCBmb3IgdGhlIHBhcnRpY3VsYXIgcXVlcnkuIFRoZW4sIHRoZSByZWxldmFudCBleGFtcGxlcyBhcmUgY29tYmluZWQgd2l0aCB0aGUgcXVlcnkgdG8gY29uc3RydWN0IGEgcHJvbXB0IHRvIHByb2R1Y2UgdGhlIGZpbmFsIGxhYmVsIHZpYSB0aGUgW2NvbXBsZXRpb25zXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKSBlbmRwb2ludC4gIExhYmVsZWQgZXhhbXBsZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBhbiB1cGxvYWRlZCBgZmlsZWAsIG9yIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBgZXhhbXBsZXNgIHBhcmFtZXRlciBmb3IgcXVpY2sgdGVzdHMgYW5kIHNtYWxsIHNjYWxlIHVzZSBjYXNlcy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3R9IGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ2xhc3NpZmljYXRpb246IChjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVDbGFzc2lmaWNhdGlvbicsICdjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QnLCBjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9jbGFzc2lmaWNhdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnNcbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ29tcGxldGlvblJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUNvbXBsZXRpb246IChjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlQ29tcGxldGlvbicsICdjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCcsIGNyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvY29tcGxldGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgbmV3IGVkaXQgZm9yIHRoZSBwcm92aWRlZCBpbnB1dCwgaW5zdHJ1Y3Rpb24sIGFuZCBwYXJhbWV0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUVkaXRSZXF1ZXN0fSBjcmVhdGVFZGl0UmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRWRpdDogKGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2NyZWF0ZUVkaXRSZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVFZGl0JywgJ2NyZWF0ZUVkaXRSZXF1ZXN0JywgY3JlYXRlRWRpdFJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9lZGl0c2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKGNyZWF0ZUVkaXRSZXF1ZXN0LCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gZW1iZWRkaW5nIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGlucHV0IHRleHQuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRW1iZWRkaW5nUmVxdWVzdH0gY3JlYXRlRW1iZWRkaW5nUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRW1iZWRkaW5nOiAoY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVFbWJlZGRpbmcnLCAnY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCcsIGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9lbWJlZGRpbmdzYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnUE9TVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbic7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBjb21tb25fMS5zZXJpYWxpemVEYXRhSWZOZWVkZWQoY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBVcGxvYWQgYSBmaWxlIHRoYXQgY29udGFpbnMgZG9jdW1lbnQocykgdG8gYmUgdXNlZCBhY3Jvc3MgdmFyaW91cyBlbmRwb2ludHMvZmVhdHVyZXMuIEN1cnJlbnRseSwgdGhlIHNpemUgb2YgYWxsIHRoZSBmaWxlcyB1cGxvYWRlZCBieSBvbmUgb3JnYW5pemF0aW9uIGNhbiBiZSB1cCB0byAxIEdCLiBQbGVhc2UgY29udGFjdCB1cyBpZiB5b3UgbmVlZCB0byBpbmNyZWFzZSB0aGUgc3RvcmFnZSBsaW1pdC5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIE5hbWUgb2YgdGhlIFtKU09OIExpbmVzXShodHRwczovL2pzb25saW5lcy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvKSBmaWxlIHRvIGJlIHVwbG9hZGVkLiAgSWYgdGhlICYjeDYwO3B1cnBvc2UmI3g2MDsgaXMgc2V0IHRvIFxcXFxcXCZxdW90O2ZpbmUtdHVuZVxcXFxcXCZxdW90OywgZWFjaCBsaW5lIGlzIGEgSlNPTiByZWNvcmQgd2l0aCBcXFxcXFwmcXVvdDtwcm9tcHRcXFxcXFwmcXVvdDsgYW5kIFxcXFxcXCZxdW90O2NvbXBsZXRpb25cXFxcXFwmcXVvdDsgZmllbGRzIHJlcHJlc2VudGluZyB5b3VyIFt0cmFpbmluZyBleGFtcGxlc10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nL3ByZXBhcmUtdHJhaW5pbmctZGF0YSkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdXJwb3NlIFRoZSBpbnRlbmRlZCBwdXJwb3NlIG9mIHRoZSB1cGxvYWRlZCBkb2N1bWVudHMuICBVc2UgXFxcXFxcJnF1b3Q7ZmluZS10dW5lXFxcXFxcJnF1b3Q7IGZvciBbRmluZS10dW5pbmddKC9kb2NzL2FwaS1yZWZlcmVuY2UvZmluZS10dW5lcykuIFRoaXMgYWxsb3dzIHVzIHRvIHZhbGlkYXRlIHRoZSBmb3JtYXQgb2YgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVGaWxlOiAoZmlsZSwgcHVycG9zZSwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWxlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVGaWxlJywgJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3B1cnBvc2UnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUZpbGUnLCAncHVycG9zZScsIHB1cnBvc2UpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maWxlc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJGb3JtUGFyYW1zID0gbmV3ICgoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmZvcm1EYXRhQ3RvcikgfHwgRm9ybURhdGEpKCk7XG4gICAgICAgICAgICBpZiAoZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHB1cnBvc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3B1cnBvc2UnLCBwdXJwb3NlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGxvY2FsVmFyRm9ybVBhcmFtcy5nZXRIZWFkZXJzKCkpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGxvY2FsVmFyRm9ybVBhcmFtcztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBqb2IgdGhhdCBmaW5lLXR1bmVzIGEgc3BlY2lmaWVkIG1vZGVsIGZyb20gYSBnaXZlbiBkYXRhc2V0LiAgUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZSBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRmluZVR1bmVSZXF1ZXN0fSBjcmVhdGVGaW5lVHVuZVJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUZpbmVUdW5lOiAoY3JlYXRlRmluZVR1bmVSZXF1ZXN0LCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2NyZWF0ZUZpbmVUdW5lUmVxdWVzdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlRmluZVR1bmUnLCAnY3JlYXRlRmluZVR1bmVSZXF1ZXN0JywgY3JlYXRlRmluZVR1bmVSZXF1ZXN0KTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmluZS10dW5lc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUltYWdlUmVxdWVzdH0gY3JlYXRlSW1hZ2VSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVJbWFnZTogKGNyZWF0ZUltYWdlUmVxdWVzdCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdjcmVhdGVJbWFnZVJlcXVlc3QnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUltYWdlJywgJ2NyZWF0ZUltYWdlUmVxdWVzdCcsIGNyZWF0ZUltYWdlUmVxdWVzdCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ltYWdlcy9nZW5lcmF0aW9uc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKGNyZWF0ZUltYWdlUmVxdWVzdCwgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucywgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGVkaXRlZCBvciBleHRlbmRlZCBpbWFnZSBnaXZlbiBhbiBvcmlnaW5hbCBpbWFnZSBhbmQgYSBwcm9tcHQuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gaW1hZ2UgVGhlIGltYWdlIHRvIGVkaXQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIHNxdWFyZS4gSWYgbWFzayBpcyBub3QgcHJvdmlkZWQsIGltYWdlIG11c3QgaGF2ZSB0cmFuc3BhcmVuY3ksIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyB0aGUgbWFzay5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb21wdCBBIHRleHQgZGVzY3JpcHRpb24gb2YgdGhlIGRlc2lyZWQgaW1hZ2UocykuIFRoZSBtYXhpbXVtIGxlbmd0aCBpcyAxMDAwIGNoYXJhY3RlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gW21hc2tdIEFuIGFkZGl0aW9uYWwgaW1hZ2Ugd2hvc2UgZnVsbHkgdHJhbnNwYXJlbnQgYXJlYXMgKGUuZy4gd2hlcmUgYWxwaGEgaXMgemVybykgaW5kaWNhdGUgd2hlcmUgJiN4NjA7aW1hZ2UmI3g2MDsgc2hvdWxkIGJlIGVkaXRlZC4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25zIGFzICYjeDYwO2ltYWdlJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW25dIFRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLiBNdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2l6ZV0gVGhlIHNpemUgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZXMuIE11c3QgYmUgb25lIG9mICYjeDYwOzI1NngyNTYmI3g2MDssICYjeDYwOzUxMng1MTImI3g2MDssIG9yICYjeDYwOzEwMjR4MTAyNCYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgZ2VuZXJhdGVkIGltYWdlcyBhcmUgcmV0dXJuZWQuIE11c3QgYmUgb25lIG9mICYjeDYwO3VybCYjeDYwOyBvciAmI3g2MDtiNjRfanNvbiYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt1c2VyXSBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcHJlc2VudGluZyB5b3VyIGVuZC11c2VyLCB3aGljaCBjYW4gaGVscCBPcGVuQUkgdG8gbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLiBbTGVhcm4gbW9yZV0oL2RvY3MvZ3VpZGVzL3NhZmV0eS1iZXN0LXByYWN0aWNlcy9lbmQtdXNlci1pZHMpLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlSW1hZ2VFZGl0OiAoaW1hZ2UsIHByb21wdCwgbWFzaywgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaW1hZ2UnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUltYWdlRWRpdCcsICdpbWFnZScsIGltYWdlKTtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ3Byb21wdCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlSW1hZ2VFZGl0JywgJ3Byb21wdCcsIHByb21wdCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ltYWdlcy9lZGl0c2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJGb3JtUGFyYW1zID0gbmV3ICgoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmZvcm1EYXRhQ3RvcikgfHwgRm9ybURhdGEpKCk7XG4gICAgICAgICAgICBpZiAoaW1hZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ2ltYWdlJywgaW1hZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hc2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ21hc2snLCBtYXNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9tcHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3Byb21wdCcsIHByb21wdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgnbicsIG4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3NpemUnLCBzaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXNwb25zZUZvcm1hdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgncmVzcG9uc2VfZm9ybWF0JywgcmVzcG9uc2VGb3JtYXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVzZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3VzZXInLCB1c2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGxvY2FsVmFyRm9ybVBhcmFtcy5nZXRIZWFkZXJzKCkpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGxvY2FsVmFyRm9ybVBhcmFtcztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSB2YXJpYXRpb24gb2YgYSBnaXZlbiBpbWFnZS5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBpbWFnZSBUaGUgaW1hZ2UgdG8gdXNlIGFzIHRoZSBiYXNpcyBmb3IgdGhlIHZhcmlhdGlvbihzKS4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgc3F1YXJlLlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW25dIFRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLiBNdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2l6ZV0gVGhlIHNpemUgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZXMuIE11c3QgYmUgb25lIG9mICYjeDYwOzI1NngyNTYmI3g2MDssICYjeDYwOzUxMng1MTImI3g2MDssIG9yICYjeDYwOzEwMjR4MTAyNCYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgZ2VuZXJhdGVkIGltYWdlcyBhcmUgcmV0dXJuZWQuIE11c3QgYmUgb25lIG9mICYjeDYwO3VybCYjeDYwOyBvciAmI3g2MDtiNjRfanNvbiYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt1c2VyXSBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcHJlc2VudGluZyB5b3VyIGVuZC11c2VyLCB3aGljaCBjYW4gaGVscCBPcGVuQUkgdG8gbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLiBbTGVhcm4gbW9yZV0oL2RvY3MvZ3VpZGVzL3NhZmV0eS1iZXN0LXByYWN0aWNlcy9lbmQtdXNlci1pZHMpLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlSW1hZ2VWYXJpYXRpb246IChpbWFnZSwgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnaW1hZ2UnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZUltYWdlVmFyaWF0aW9uJywgJ2ltYWdlJywgaW1hZ2UpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9pbWFnZXMvdmFyaWF0aW9uc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJGb3JtUGFyYW1zID0gbmV3ICgoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmZvcm1EYXRhQ3RvcikgfHwgRm9ybURhdGEpKCk7XG4gICAgICAgICAgICBpZiAoaW1hZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ2ltYWdlJywgaW1hZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ24nLCBuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaXplICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdzaXplJywgc2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VGb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3Jlc3BvbnNlX2Zvcm1hdCcsIHJlc3BvbnNlRm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1c2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCd1c2VyJywgdXNlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSc7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBsb2NhbFZhckZvcm1QYXJhbXMuZ2V0SGVhZGVycygpKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBsb2NhbFZhckZvcm1QYXJhbXM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDbGFzc2lmaWVzIGlmIHRleHQgdmlvbGF0ZXMgT3BlbkFJXFwncyBDb250ZW50IFBvbGljeVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0fSBjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlTW9kZXJhdGlvbjogKGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0LCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2NyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0JyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVNb2RlcmF0aW9uJywgJ2NyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0JywgY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9tb2RlcmF0aW9uc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXJbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5kYXRhID0gY29tbW9uXzEuc2VyaWFsaXplRGF0YUlmTmVlZGVkKGNyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0LCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRoZSBzZWFyY2ggZW5kcG9pbnQgY29tcHV0ZXMgc2ltaWxhcml0eSBzY29yZXMgYmV0d2VlbiBwcm92aWRlZCBxdWVyeSBhbmQgZG9jdW1lbnRzLiBEb2N1bWVudHMgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgQVBJIGlmIHRoZXJlIGFyZSBubyBtb3JlIHRoYW4gMjAwIG9mIHRoZW0uICBUbyBnbyBiZXlvbmQgdGhlIDIwMCBkb2N1bWVudCBsaW1pdCwgZG9jdW1lbnRzIGNhbiBiZSBwcm9jZXNzZWQgb2ZmbGluZSBhbmQgdGhlbiB1c2VkIGZvciBlZmZpY2llbnQgcmV0cmlldmFsIGF0IHF1ZXJ5IHRpbWUuIFdoZW4gYGZpbGVgIGlzIHNldCwgdGhlIHNlYXJjaCBlbmRwb2ludCBzZWFyY2hlcyBvdmVyIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBnaXZlbiBmaWxlIGFuZCByZXR1cm5zIHVwIHRvIHRoZSBgbWF4X3JlcmFua2AgbnVtYmVyIG9mIGRvY3VtZW50cy4gVGhlc2UgZG9jdW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYWxvbmcgd2l0aCB0aGVpciBzZWFyY2ggc2NvcmVzLiAgVGhlIHNpbWlsYXJpdHkgc2NvcmUgaXMgYSBwb3NpdGl2ZSBzY29yZSB0aGF0IHVzdWFsbHkgcmFuZ2VzIGZyb20gMCB0byAzMDAgKGJ1dCBjYW4gc29tZXRpbWVzIGdvIGhpZ2hlciksIHdoZXJlIGEgc2NvcmUgYWJvdmUgMjAwIHVzdWFsbHkgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHNlbWFudGljYWxseSBzaW1pbGFyIHRvIHRoZSBxdWVyeS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZUlkIFRoZSBJRCBvZiB0aGUgZW5naW5lIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0LiAgWW91IGNhbiBzZWxlY3Qgb25lIG9mICYjeDYwO2FkYSYjeDYwOywgJiN4NjA7YmFiYmFnZSYjeDYwOywgJiN4NjA7Y3VyaWUmI3g2MDssIG9yICYjeDYwO2RhdmluY2kmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlU2VhcmNoUmVxdWVzdH0gY3JlYXRlU2VhcmNoUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlU2VhcmNoOiAoZW5naW5lSWQsIGNyZWF0ZVNlYXJjaFJlcXVlc3QsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZW5naW5lSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZVNlYXJjaCcsICdlbmdpbmVJZCcsIGVuZ2luZUlkKTtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2NyZWF0ZVNlYXJjaFJlcXVlc3QnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2NyZWF0ZVNlYXJjaCcsICdjcmVhdGVTZWFyY2hSZXF1ZXN0JywgY3JlYXRlU2VhcmNoUmVxdWVzdCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2VuZ2luZXMve2VuZ2luZV9pZH0vc2VhcmNoYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImVuZ2luZV9pZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGVuZ2luZUlkKSkpO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGNvbW1vbl8xLnNlcmlhbGl6ZURhdGFJZk5lZWRlZChjcmVhdGVTZWFyY2hSZXF1ZXN0LCBsb2NhbFZhclJlcXVlc3RPcHRpb25zLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zY3JpYmVzIGF1ZGlvIGludG8gdGhlIGlucHV0IGxhbmd1YWdlLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgVGhlIGF1ZGlvIGZpbGUgdG8gdHJhbnNjcmliZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIE9ubHkgJiN4NjA7d2hpc3Blci0xJiN4NjA7IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvbXB0XSBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbFxcXFxcXCYjMzk7cyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvIHNlZ21lbnQuIFRoZSBbcHJvbXB0XSgvZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcHJvbXB0aW5nKSBzaG91bGQgbWF0Y2ggdGhlIGF1ZGlvIGxhbmd1YWdlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IG9mIHRoZSB0cmFuc2NyaXB0IG91dHB1dCwgaW4gb25lIG9mIHRoZXNlIG9wdGlvbnM6IGpzb24sIHRleHQsIHNydCwgdmVyYm9zZV9qc29uLCBvciB2dHQuXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbdGVtcGVyYXR1cmVdIFRoZSBzYW1wbGluZyB0ZW1wZXJhdHVyZSwgYmV0d2VlbiAwIGFuZCAxLiBIaWdoZXIgdmFsdWVzIGxpa2UgMC44IHdpbGwgbWFrZSB0aGUgb3V0cHV0IG1vcmUgcmFuZG9tLCB3aGlsZSBsb3dlciB2YWx1ZXMgbGlrZSAwLjIgd2lsbCBtYWtlIGl0IG1vcmUgZm9jdXNlZCBhbmQgZGV0ZXJtaW5pc3RpYy4gSWYgc2V0IHRvIDAsIHRoZSBtb2RlbCB3aWxsIHVzZSBbbG9nIHByb2JhYmlsaXR5XShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Mb2dfcHJvYmFiaWxpdHkpIHRvIGF1dG9tYXRpY2FsbHkgaW5jcmVhc2UgdGhlIHRlbXBlcmF0dXJlIHVudGlsIGNlcnRhaW4gdGhyZXNob2xkcyBhcmUgaGl0LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2xhbmd1YWdlXSBUaGUgbGFuZ3VhZ2Ugb2YgdGhlIGlucHV0IGF1ZGlvLiBTdXBwbHlpbmcgdGhlIGlucHV0IGxhbmd1YWdlIGluIFtJU08tNjM5LTFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpc3Rfb2ZfSVNPXzYzOS0xX2NvZGVzKSBmb3JtYXQgd2lsbCBpbXByb3ZlIGFjY3VyYWN5IGFuZCBsYXRlbmN5LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlVHJhbnNjcmlwdGlvbjogKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgbGFuZ3VhZ2UsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlsZScgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlVHJhbnNjcmlwdGlvbicsICdmaWxlJywgZmlsZSk7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdtb2RlbCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlVHJhbnNjcmlwdGlvbicsICdtb2RlbCcsIG1vZGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvYXVkaW8vdHJhbnNjcmlwdGlvbnNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdQT1NUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyRm9ybVBhcmFtcyA9IG5ldyAoKGNvbmZpZ3VyYXRpb24gJiYgY29uZmlndXJhdGlvbi5mb3JtRGF0YUN0b3IpIHx8IEZvcm1EYXRhKSgpO1xuICAgICAgICAgICAgaWYgKGZpbGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgnbW9kZWwnLCBtb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocHJvbXB0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdwcm9tcHQnLCBwcm9tcHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlRm9ybWF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdyZXNwb25zZV9mb3JtYXQnLCByZXNwb25zZUZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGVtcGVyYXR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3RlbXBlcmF0dXJlJywgdGVtcGVyYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhbmd1YWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdsYW5ndWFnZScsIGxhbmd1YWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyWydDb250ZW50LVR5cGUnXSA9ICdtdWx0aXBhcnQvZm9ybS1kYXRhJztcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGxvY2FsVmFyRm9ybVBhcmFtcy5nZXRIZWFkZXJzKCkpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuZGF0YSA9IGxvY2FsVmFyRm9ybVBhcmFtcztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zbGF0ZXMgYXVkaW8gaW50byBpbnRvIEVuZ2xpc2guXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBUaGUgYXVkaW8gZmlsZSB0byB0cmFuc2xhdGUsIGluIG9uZSBvZiB0aGVzZSBmb3JtYXRzOiBtcDMsIG1wNCwgbXBlZywgbXBnYSwgbTRhLCB3YXYsIG9yIHdlYm0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlLiBPbmx5ICYjeDYwO3doaXNwZXItMSYjeDYwOyBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Byb21wdF0gQW4gb3B0aW9uYWwgdGV4dCB0byBndWlkZSB0aGUgbW9kZWxcXFxcXFwmIzM5O3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpbyBzZWdtZW50LiBUaGUgW3Byb21wdF0oL2RvY3MvZ3VpZGVzL3NwZWVjaC10by10ZXh0L3Byb21wdGluZykgc2hvdWxkIGJlIGluIEVuZ2xpc2guXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVUcmFuc2xhdGlvbjogKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWxlJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdjcmVhdGVUcmFuc2xhdGlvbicsICdmaWxlJywgZmlsZSk7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdtb2RlbCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnY3JlYXRlVHJhbnNsYXRpb24nLCAnbW9kZWwnLCBtb2RlbCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2F1ZGlvL3RyYW5zbGF0aW9uc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ1BPU1QnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJGb3JtUGFyYW1zID0gbmV3ICgoY29uZmlndXJhdGlvbiAmJiBjb25maWd1cmF0aW9uLmZvcm1EYXRhQ3RvcikgfHwgRm9ybURhdGEpKCk7XG4gICAgICAgICAgICBpZiAoZmlsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1vZGVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhckZvcm1QYXJhbXMuYXBwZW5kKCdtb2RlbCcsIG1vZGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9tcHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3Byb21wdCcsIHByb21wdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzcG9uc2VGb3JtYXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvY2FsVmFyRm9ybVBhcmFtcy5hcHBlbmQoJ3Jlc3BvbnNlX2Zvcm1hdCcsIHJlc3BvbnNlRm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0ZW1wZXJhdHVyZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxWYXJGb3JtUGFyYW1zLmFwcGVuZCgndGVtcGVyYXR1cmUnLCB0ZW1wZXJhdHVyZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsb2NhbFZhckhlYWRlclBhcmFtZXRlclsnQ29udGVudC1UeXBlJ10gPSAnbXVsdGlwYXJ0L2Zvcm0tZGF0YSc7XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBsb2NhbFZhckZvcm1QYXJhbXMuZ2V0SGVhZGVycygpKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmRhdGEgPSBsb2NhbFZhckZvcm1QYXJhbXM7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGUgYSBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlRmlsZTogKGZpbGVJZCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWxlSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2RlbGV0ZUZpbGUnLCAnZmlsZUlkJywgZmlsZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmlsZXMve2ZpbGVfaWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImZpbGVfaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhmaWxlSWQpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0RFTEVURScgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIG1vZGVsIHRvIGRlbGV0ZVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlTW9kZWw6IChtb2RlbCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdtb2RlbCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygnZGVsZXRlTW9kZWwnLCAnbW9kZWwnLCBtb2RlbCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL21vZGVscy97bW9kZWx9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcIm1vZGVsXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcobW9kZWwpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0RFTEVURScgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGVcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGRvd25sb2FkRmlsZTogKGZpbGVJZCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdmaWxlSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2Rvd25sb2FkRmlsZScsICdmaWxlSWQnLCBmaWxlSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maWxlcy97ZmlsZV9pZH0vY29udGVudGBcbiAgICAgICAgICAgICAgICAucmVwbGFjZShgeyR7XCJmaWxlX2lkXCJ9fWAsIGVuY29kZVVSSUNvbXBvbmVudChTdHJpbmcoZmlsZUlkKSkpO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgKG5vbi1maW5ldHVuZWQpIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RW5naW5lczogKG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9lbmdpbmVzYDtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnR0VUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHVybnMgYSBsaXN0IG9mIGZpbGVzIHRoYXQgYmVsb25nIHRvIHRoZSB1c2VyXFwncyBvcmdhbml6YXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RmlsZXM6IChvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmlsZXNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgR2V0IGZpbmUtZ3JhaW5lZCBzdGF0dXMgdXBkYXRlcyBmb3IgYSBmaW5lLXR1bmUgam9iLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2IgdG8gZ2V0IGV2ZW50cyBmb3IuXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0cmVhbV0gV2hldGhlciB0byBzdHJlYW0gZXZlbnRzIGZvciB0aGUgZmluZS10dW5lIGpvYi4gSWYgc2V0IHRvIHRydWUsIGV2ZW50cyB3aWxsIGJlIHNlbnQgYXMgZGF0YS1vbmx5IFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZS4gVGhlIHN0cmVhbSB3aWxsIHRlcm1pbmF0ZSB3aXRoIGEgJiN4NjA7ZGF0YTogW0RPTkVdJiN4NjA7IG1lc3NhZ2Ugd2hlbiB0aGUgam9iIGlzIGZpbmlzaGVkIChzdWNjZWVkZWQsIGNhbmNlbGxlZCwgb3IgZmFpbGVkKS4gIElmIHNldCB0byBmYWxzZSwgb25seSBldmVudHMgZ2VuZXJhdGVkIHNvIGZhciB3aWxsIGJlIHJldHVybmVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbmVUdW5lRXZlbnRzOiAoZmluZVR1bmVJZCwgc3RyZWFtLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbmVUdW5lSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ2xpc3RGaW5lVHVuZUV2ZW50cycsICdmaW5lVHVuZUlkJywgZmluZVR1bmVJZCk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclBhdGggPSBgL2ZpbmUtdHVuZXMve2ZpbmVfdHVuZV9pZH0vZXZlbnRzYFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImZpbmVfdHVuZV9pZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGZpbmVUdW5lSWQpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBpZiAoc3RyZWFtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyWydzdHJlYW0nXSA9IHN0cmVhbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3QgeW91ciBvcmdhbml6YXRpb25cXCdzIGZpbmUtdHVuaW5nIGpvYnNcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RGaW5lVHVuZXM6IChvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmluZS10dW5lc2A7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBMaXN0cyB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBtb2RlbHMsIGFuZCBwcm92aWRlcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBlYWNoIG9uZSBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdE1vZGVsczogKG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9tb2RlbHNgO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBpdCBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRW5naW5lOiAoZW5naW5lSWQsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZW5naW5lSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ3JldHJpZXZlRW5naW5lJywgJ2VuZ2luZUlkJywgZW5naW5lSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9lbmdpbmVzL3tlbmdpbmVfaWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImVuZ2luZV9pZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGVuZ2luZUlkKSkpO1xuICAgICAgICAgICAgLy8gdXNlIGR1bW15IGJhc2UgVVJMIHN0cmluZyBiZWNhdXNlIHRoZSBVUkwgY29uc3RydWN0b3Igb25seSBhY2NlcHRzIGFic29sdXRlIFVSTHMuXG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclVybE9iaiA9IG5ldyBVUkwobG9jYWxWYXJQYXRoLCBjb21tb25fMS5EVU1NWV9CQVNFX1VSTCk7XG4gICAgICAgICAgICBsZXQgYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIGJhc2VPcHRpb25zID0gY29uZmlndXJhdGlvbi5iYXNlT3B0aW9ucztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oeyBtZXRob2Q6ICdHRVQnIH0sIGJhc2VPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJRdWVyeVBhcmFtZXRlciA9IHt9O1xuICAgICAgICAgICAgY29tbW9uXzEuc2V0U2VhcmNoUGFyYW1zKGxvY2FsVmFyVXJsT2JqLCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGxldCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zID0gYmFzZU9wdGlvbnMgJiYgYmFzZU9wdGlvbnMuaGVhZGVycyA/IGJhc2VPcHRpb25zLmhlYWRlcnMgOiB7fTtcbiAgICAgICAgICAgIGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBsb2NhbFZhckhlYWRlclBhcmFtZXRlciksIGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMpLCBvcHRpb25zLmhlYWRlcnMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB1cmw6IGNvbW1vbl8xLnRvUGF0aFN0cmluZyhsb2NhbFZhclVybE9iaiksXG4gICAgICAgICAgICAgICAgb3B0aW9uczogbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pLFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICByZXRyaWV2ZUZpbGU6IChmaWxlSWQsIG9wdGlvbnMgPSB7fSkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gdmVyaWZ5IHJlcXVpcmVkIHBhcmFtZXRlciAnZmlsZUlkJyBpcyBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGNvbW1vbl8xLmFzc2VydFBhcmFtRXhpc3RzKCdyZXRyaWV2ZUZpbGUnLCAnZmlsZUlkJywgZmlsZUlkKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvZmlsZXMve2ZpbGVfaWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImZpbGVfaWRcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhmaWxlSWQpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGluZm8gYWJvdXQgdGhlIGZpbmUtdHVuZSBqb2IuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2JcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRmluZVR1bmU6IChmaW5lVHVuZUlkLCBvcHRpb25zID0ge30pID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIC8vIHZlcmlmeSByZXF1aXJlZCBwYXJhbWV0ZXIgJ2ZpbmVUdW5lSWQnIGlzIG5vdCBudWxsIG9yIHVuZGVmaW5lZFxuICAgICAgICAgICAgY29tbW9uXzEuYXNzZXJ0UGFyYW1FeGlzdHMoJ3JldHJpZXZlRmluZVR1bmUnLCAnZmluZVR1bmVJZCcsIGZpbmVUdW5lSWQpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJQYXRoID0gYC9maW5lLXR1bmVzL3tmaW5lX3R1bmVfaWR9YFxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKGB7JHtcImZpbmVfdHVuZV9pZFwifX1gLCBlbmNvZGVVUklDb21wb25lbnQoU3RyaW5nKGZpbmVUdW5lSWQpKSk7XG4gICAgICAgICAgICAvLyB1c2UgZHVtbXkgYmFzZSBVUkwgc3RyaW5nIGJlY2F1c2UgdGhlIFVSTCBjb25zdHJ1Y3RvciBvbmx5IGFjY2VwdHMgYWJzb2x1dGUgVVJMcy5cbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyVXJsT2JqID0gbmV3IFVSTChsb2NhbFZhclBhdGgsIGNvbW1vbl8xLkRVTU1ZX0JBU0VfVVJMKTtcbiAgICAgICAgICAgIGxldCBiYXNlT3B0aW9ucztcbiAgICAgICAgICAgIGlmIChjb25maWd1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgYmFzZU9wdGlvbnMgPSBjb25maWd1cmF0aW9uLmJhc2VPcHRpb25zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7IG1ldGhvZDogJ0dFVCcgfSwgYmFzZU9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclF1ZXJ5UGFyYW1ldGVyID0ge307XG4gICAgICAgICAgICBjb21tb25fMS5zZXRTZWFyY2hQYXJhbXMobG9jYWxWYXJVcmxPYmosIGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIpO1xuICAgICAgICAgICAgbGV0IGhlYWRlcnNGcm9tQmFzZU9wdGlvbnMgPSBiYXNlT3B0aW9ucyAmJiBiYXNlT3B0aW9ucy5oZWFkZXJzID8gYmFzZU9wdGlvbnMuaGVhZGVycyA6IHt9O1xuICAgICAgICAgICAgbG9jYWxWYXJSZXF1ZXN0T3B0aW9ucy5oZWFkZXJzID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGxvY2FsVmFySGVhZGVyUGFyYW1ldGVyKSwgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyksIG9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHVybDogY29tbW9uXzEudG9QYXRoU3RyaW5nKGxvY2FsVmFyVXJsT2JqKSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBsb2NhbFZhclJlcXVlc3RPcHRpb25zLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSksXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFRoZSBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlTW9kZWw6IChtb2RlbCwgb3B0aW9ucyA9IHt9KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB2ZXJpZnkgcmVxdWlyZWQgcGFyYW1ldGVyICdtb2RlbCcgaXMgbm90IG51bGwgb3IgdW5kZWZpbmVkXG4gICAgICAgICAgICBjb21tb25fMS5hc3NlcnRQYXJhbUV4aXN0cygncmV0cmlldmVNb2RlbCcsICdtb2RlbCcsIG1vZGVsKTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUGF0aCA9IGAvbW9kZWxzL3ttb2RlbH1gXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoYHske1wibW9kZWxcIn19YCwgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyhtb2RlbCkpKTtcbiAgICAgICAgICAgIC8vIHVzZSBkdW1teSBiYXNlIFVSTCBzdHJpbmcgYmVjYXVzZSB0aGUgVVJMIGNvbnN0cnVjdG9yIG9ubHkgYWNjZXB0cyBhYnNvbHV0ZSBVUkxzLlxuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJVcmxPYmogPSBuZXcgVVJMKGxvY2FsVmFyUGF0aCwgY29tbW9uXzEuRFVNTVlfQkFTRV9VUkwpO1xuICAgICAgICAgICAgbGV0IGJhc2VPcHRpb25zO1xuICAgICAgICAgICAgaWYgKGNvbmZpZ3VyYXRpb24pIHtcbiAgICAgICAgICAgICAgICBiYXNlT3B0aW9ucyA9IGNvbmZpZ3VyYXRpb24uYmFzZU9wdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBsb2NhbFZhclJlcXVlc3RPcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHsgbWV0aG9kOiAnR0VUJyB9LCBiYXNlT3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyUXVlcnlQYXJhbWV0ZXIgPSB7fTtcbiAgICAgICAgICAgIGNvbW1vbl8xLnNldFNlYXJjaFBhcmFtcyhsb2NhbFZhclVybE9iaiwgbG9jYWxWYXJRdWVyeVBhcmFtZXRlcik7XG4gICAgICAgICAgICBsZXQgaGVhZGVyc0Zyb21CYXNlT3B0aW9ucyA9IGJhc2VPcHRpb25zICYmIGJhc2VPcHRpb25zLmhlYWRlcnMgPyBiYXNlT3B0aW9ucy5oZWFkZXJzIDoge307XG4gICAgICAgICAgICBsb2NhbFZhclJlcXVlc3RPcHRpb25zLmhlYWRlcnMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbG9jYWxWYXJIZWFkZXJQYXJhbWV0ZXIpLCBoZWFkZXJzRnJvbUJhc2VPcHRpb25zKSwgb3B0aW9ucy5oZWFkZXJzKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdXJsOiBjb21tb25fMS50b1BhdGhTdHJpbmcobG9jYWxWYXJVcmxPYmopLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IGxvY2FsVmFyUmVxdWVzdE9wdGlvbnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KSxcbiAgICB9O1xufTtcbi8qKlxuICogT3BlbkFJQXBpIC0gZnVuY3Rpb25hbCBwcm9ncmFtbWluZyBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5PcGVuQUlBcGlGcCA9IGZ1bmN0aW9uIChjb25maWd1cmF0aW9uKSB7XG4gICAgY29uc3QgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvciA9IGV4cG9ydHMuT3BlbkFJQXBpQXhpb3NQYXJhbUNyZWF0b3IoY29uZmlndXJhdGlvbik7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEltbWVkaWF0ZWx5IGNhbmNlbCBhIGZpbmUtdHVuZSBqb2IuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYiB0byBjYW5jZWxcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNhbmNlbEZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNhbmNlbEZpbmVUdW5lKGZpbmVUdW5lSWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEFuc3dlcnMgdGhlIHNwZWNpZmllZCBxdWVzdGlvbiB1c2luZyB0aGUgcHJvdmlkZWQgZG9jdW1lbnRzIGFuZCBleGFtcGxlcy4gIFRoZSBlbmRwb2ludCBmaXJzdCBbc2VhcmNoZXNdKC9kb2NzL2FwaS1yZWZlcmVuY2Uvc2VhcmNoZXMpIG92ZXIgcHJvdmlkZWQgZG9jdW1lbnRzIG9yIGZpbGVzIHRvIGZpbmQgcmVsZXZhbnQgY29udGV4dC4gVGhlIHJlbGV2YW50IGNvbnRleHQgaXMgY29tYmluZWQgd2l0aCB0aGUgcHJvdmlkZWQgZXhhbXBsZXMgYW5kIHF1ZXN0aW9uIHRvIGNyZWF0ZSB0aGUgcHJvbXB0IGZvciBbY29tcGxldGlvbl0oL2RvY3MvYXBpLXJlZmVyZW5jZS9jb21wbGV0aW9ucykuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlQW5zd2VyUmVxdWVzdH0gY3JlYXRlQW5zd2VyUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQW5zd2VyKGNyZWF0ZUFuc3dlclJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUFuc3dlcihjcmVhdGVBbnN3ZXJSZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgY29tcGxldGlvbiBmb3IgdGhlIGNoYXQgbWVzc2FnZVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUNoYXRDb21wbGV0aW9uKGNyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ2xhc3NpZmllcyB0aGUgc3BlY2lmaWVkIGBxdWVyeWAgdXNpbmcgcHJvdmlkZWQgZXhhbXBsZXMuICBUaGUgZW5kcG9pbnQgZmlyc3QgW3NlYXJjaGVzXSgvZG9jcy9hcGktcmVmZXJlbmNlL3NlYXJjaGVzKSBvdmVyIHRoZSBsYWJlbGVkIGV4YW1wbGVzIHRvIHNlbGVjdCB0aGUgb25lcyBtb3N0IHJlbGV2YW50IGZvciB0aGUgcGFydGljdWxhciBxdWVyeS4gVGhlbiwgdGhlIHJlbGV2YW50IGV4YW1wbGVzIGFyZSBjb21iaW5lZCB3aXRoIHRoZSBxdWVyeSB0byBjb25zdHJ1Y3QgYSBwcm9tcHQgdG8gcHJvZHVjZSB0aGUgZmluYWwgbGFiZWwgdmlhIHRoZSBbY29tcGxldGlvbnNdKC9kb2NzL2FwaS1yZWZlcmVuY2UvY29tcGxldGlvbnMpIGVuZHBvaW50LiAgTGFiZWxlZCBleGFtcGxlcyBjYW4gYmUgcHJvdmlkZWQgdmlhIGFuIHVwbG9hZGVkIGBmaWxlYCwgb3IgZXhwbGljaXRseSBsaXN0ZWQgaW4gdGhlIHJlcXVlc3QgdXNpbmcgdGhlIGBleGFtcGxlc2AgcGFyYW1ldGVyIGZvciBxdWljayB0ZXN0cyBhbmQgc21hbGwgc2NhbGUgdXNlIGNhc2VzLlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdH0gY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDbGFzc2lmaWNhdGlvbihjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUNsYXNzaWZpY2F0aW9uKGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnNcbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ29tcGxldGlvblJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUNvbXBsZXRpb24oY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUNvbXBsZXRpb24oY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgZWRpdCBmb3IgdGhlIHByb3ZpZGVkIGlucHV0LCBpbnN0cnVjdGlvbiwgYW5kIHBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRWRpdFJlcXVlc3R9IGNyZWF0ZUVkaXRSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVFZGl0KGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVFZGl0KGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUVtYmVkZGluZ1JlcXVlc3R9IGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUVtYmVkZGluZyhjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVFbWJlZGRpbmcoY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVXBsb2FkIGEgZmlsZSB0aGF0IGNvbnRhaW5zIGRvY3VtZW50KHMpIHRvIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzL2ZlYXR1cmVzLiBDdXJyZW50bHksIHRoZSBzaXplIG9mIGFsbCB0aGUgZmlsZXMgdXBsb2FkZWQgYnkgb25lIG9yZ2FuaXphdGlvbiBjYW4gYmUgdXAgdG8gMSBHQi4gUGxlYXNlIGNvbnRhY3QgdXMgaWYgeW91IG5lZWQgdG8gaW5jcmVhc2UgdGhlIHN0b3JhZ2UgbGltaXQuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBOYW1lIG9mIHRoZSBbSlNPTiBMaW5lc10oaHR0cHM6Ly9qc29ubGluZXMucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LykgZmlsZSB0byBiZSB1cGxvYWRlZC4gIElmIHRoZSAmI3g2MDtwdXJwb3NlJiN4NjA7IGlzIHNldCB0byBcXFxcXFwmcXVvdDtmaW5lLXR1bmVcXFxcXFwmcXVvdDssIGVhY2ggbGluZSBpcyBhIEpTT04gcmVjb3JkIHdpdGggXFxcXFxcJnF1b3Q7cHJvbXB0XFxcXFxcJnF1b3Q7IGFuZCBcXFxcXFwmcXVvdDtjb21wbGV0aW9uXFxcXFxcJnF1b3Q7IGZpZWxkcyByZXByZXNlbnRpbmcgeW91ciBbdHJhaW5pbmcgZXhhbXBsZXNdKC9kb2NzL2d1aWRlcy9maW5lLXR1bmluZy9wcmVwYXJlLXRyYWluaW5nLWRhdGEpLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHVycG9zZSBUaGUgaW50ZW5kZWQgcHVycG9zZSBvZiB0aGUgdXBsb2FkZWQgZG9jdW1lbnRzLiAgVXNlIFxcXFxcXCZxdW90O2ZpbmUtdHVuZVxcXFxcXCZxdW90OyBmb3IgW0ZpbmUtdHVuaW5nXSgvZG9jcy9hcGktcmVmZXJlbmNlL2ZpbmUtdHVuZXMpLiBUaGlzIGFsbG93cyB1cyB0byB2YWxpZGF0ZSB0aGUgZm9ybWF0IG9mIHRoZSB1cGxvYWRlZCBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlRmlsZShmaWxlLCBwdXJwb3NlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5jcmVhdGVGaWxlKGZpbGUsIHB1cnBvc2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBqb2IgdGhhdCBmaW5lLXR1bmVzIGEgc3BlY2lmaWVkIG1vZGVsIGZyb20gYSBnaXZlbiBkYXRhc2V0LiAgUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZSBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRmluZVR1bmVSZXF1ZXN0fSBjcmVhdGVGaW5lVHVuZVJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUZpbmVUdW5lKGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlRmluZVR1bmUoY3JlYXRlRmluZVR1bmVSZXF1ZXN0LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGltYWdlIGdpdmVuIGEgcHJvbXB0LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUltYWdlUmVxdWVzdH0gY3JlYXRlSW1hZ2VSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVJbWFnZShjcmVhdGVJbWFnZVJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZUltYWdlKGNyZWF0ZUltYWdlUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlZGl0ZWQgb3IgZXh0ZW5kZWQgaW1hZ2UgZ2l2ZW4gYW4gb3JpZ2luYWwgaW1hZ2UgYW5kIGEgcHJvbXB0LlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IGltYWdlIFRoZSBpbWFnZSB0byBlZGl0LiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBzcXVhcmUuIElmIG1hc2sgaXMgbm90IHByb3ZpZGVkLCBpbWFnZSBtdXN0IGhhdmUgdHJhbnNwYXJlbmN5LCB3aGljaCB3aWxsIGJlIHVzZWQgYXMgdGhlIG1hc2suXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgQSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBkZXNpcmVkIGltYWdlKHMpLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMTAwMCBjaGFyYWN0ZXJzLlxuICAgICAgICAgKiBAcGFyYW0ge0ZpbGV9IFttYXNrXSBBbiBhZGRpdGlvbmFsIGltYWdlIHdob3NlIGZ1bGx5IHRyYW5zcGFyZW50IGFyZWFzIChlLmcuIHdoZXJlIGFscGhhIGlzIHplcm8pIGluZGljYXRlIHdoZXJlICYjeDYwO2ltYWdlJiN4NjA7IHNob3VsZCBiZSBlZGl0ZWQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIGhhdmUgdGhlIHNhbWUgZGltZW5zaW9ucyBhcyAmI3g2MDtpbWFnZSYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlRWRpdChpbWFnZSwgcHJvbXB0LCBtYXNrLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlSW1hZ2VFZGl0KGltYWdlLCBwcm9tcHQsIG1hc2ssIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgdmFyaWF0aW9uIG9mIGEgZ2l2ZW4gaW1hZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gaW1hZ2UgVGhlIGltYWdlIHRvIHVzZSBhcyB0aGUgYmFzaXMgZm9yIHRoZSB2YXJpYXRpb24ocykuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIHNxdWFyZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlVmFyaWF0aW9uKGltYWdlLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlSW1hZ2VWYXJpYXRpb24oaW1hZ2UsIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDbGFzc2lmaWVzIGlmIHRleHQgdmlvbGF0ZXMgT3BlbkFJXFwncyBDb250ZW50IFBvbGljeVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0fSBjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlTW9kZXJhdGlvbihjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlTW9kZXJhdGlvbihjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVGhlIHNlYXJjaCBlbmRwb2ludCBjb21wdXRlcyBzaW1pbGFyaXR5IHNjb3JlcyBiZXR3ZWVuIHByb3ZpZGVkIHF1ZXJ5IGFuZCBkb2N1bWVudHMuIERvY3VtZW50cyBjYW4gYmUgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSBBUEkgaWYgdGhlcmUgYXJlIG5vIG1vcmUgdGhhbiAyMDAgb2YgdGhlbS4gIFRvIGdvIGJleW9uZCB0aGUgMjAwIGRvY3VtZW50IGxpbWl0LCBkb2N1bWVudHMgY2FuIGJlIHByb2Nlc3NlZCBvZmZsaW5lIGFuZCB0aGVuIHVzZWQgZm9yIGVmZmljaWVudCByZXRyaWV2YWwgYXQgcXVlcnkgdGltZS4gV2hlbiBgZmlsZWAgaXMgc2V0LCB0aGUgc2VhcmNoIGVuZHBvaW50IHNlYXJjaGVzIG92ZXIgYWxsIHRoZSBkb2N1bWVudHMgaW4gdGhlIGdpdmVuIGZpbGUgYW5kIHJldHVybnMgdXAgdG8gdGhlIGBtYXhfcmVyYW5rYCBudW1iZXIgb2YgZG9jdW1lbnRzLiBUaGVzZSBkb2N1bWVudHMgd2lsbCBiZSByZXR1cm5lZCBhbG9uZyB3aXRoIHRoZWlyIHNlYXJjaCBzY29yZXMuICBUaGUgc2ltaWxhcml0eSBzY29yZSBpcyBhIHBvc2l0aXZlIHNjb3JlIHRoYXQgdXN1YWxseSByYW5nZXMgZnJvbSAwIHRvIDMwMCAoYnV0IGNhbiBzb21ldGltZXMgZ28gaGlnaGVyKSwgd2hlcmUgYSBzY29yZSBhYm92ZSAyMDAgdXN1YWxseSBtZWFucyB0aGUgZG9jdW1lbnQgaXMgc2VtYW50aWNhbGx5IHNpbWlsYXIgdG8gdGhlIHF1ZXJ5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3QuICBZb3UgY2FuIHNlbGVjdCBvbmUgb2YgJiN4NjA7YWRhJiN4NjA7LCAmI3g2MDtiYWJiYWdlJiN4NjA7LCAmI3g2MDtjdXJpZSYjeDYwOywgb3IgJiN4NjA7ZGF2aW5jaSYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVTZWFyY2hSZXF1ZXN0fSBjcmVhdGVTZWFyY2hSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVTZWFyY2goZW5naW5lSWQsIGNyZWF0ZVNlYXJjaFJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZVNlYXJjaChlbmdpbmVJZCwgY3JlYXRlU2VhcmNoUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBUaGUgYXVkaW8gZmlsZSB0byB0cmFuc2NyaWJlLCBpbiBvbmUgb2YgdGhlc2UgZm9ybWF0czogbXAzLCBtcDQsIG1wZWcsIG1wZ2EsIG00YSwgd2F2LCBvciB3ZWJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9tcHRdIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsXFxcXFxcJiMzOTtzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC4gVGhlIFtwcm9tcHRdKC9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9wcm9tcHRpbmcpIHNob3VsZCBtYXRjaCB0aGUgYXVkaW8gbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8uIFN1cHBseWluZyB0aGUgaW5wdXQgbGFuZ3VhZ2UgaW4gW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIGZvcm1hdCB3aWxsIGltcHJvdmUgYWNjdXJhY3kgYW5kIGxhdGVuY3kuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVUcmFuc2NyaXB0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgbGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVHJhbnNsYXRlcyBhdWRpbyBpbnRvIGludG8gRW5nbGlzaC5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIFRoZSBhdWRpbyBmaWxlIHRvIHRyYW5zbGF0ZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIElEIG9mIHRoZSBtb2RlbCB0byB1c2UuIE9ubHkgJiN4NjA7d2hpc3Blci0xJiN4NjA7IGlzIGN1cnJlbnRseSBhdmFpbGFibGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvbXB0XSBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbFxcXFxcXCYjMzk7cyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvIHNlZ21lbnQuIFRoZSBbcHJvbXB0XSgvZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcHJvbXB0aW5nKSBzaG91bGQgYmUgaW4gRW5nbGlzaC5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBvZiB0aGUgdHJhbnNjcmlwdCBvdXRwdXQsIGluIG9uZSBvZiB0aGVzZSBvcHRpb25zOiBqc29uLCB0ZXh0LCBzcnQsIHZlcmJvc2VfanNvbiwgb3IgdnR0LlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW3RlbXBlcmF0dXJlXSBUaGUgc2FtcGxpbmcgdGVtcGVyYXR1cmUsIGJldHdlZW4gMCBhbmQgMS4gSGlnaGVyIHZhbHVlcyBsaWtlIDAuOCB3aWxsIG1ha2UgdGhlIG91dHB1dCBtb3JlIHJhbmRvbSwgd2hpbGUgbG93ZXIgdmFsdWVzIGxpa2UgMC4yIHdpbGwgbWFrZSBpdCBtb3JlIGZvY3VzZWQgYW5kIGRldGVybWluaXN0aWMuIElmIHNldCB0byAwLCB0aGUgbW9kZWwgd2lsbCB1c2UgW2xvZyBwcm9iYWJpbGl0eV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTG9nX3Byb2JhYmlsaXR5KSB0byBhdXRvbWF0aWNhbGx5IGluY3JlYXNlIHRoZSB0ZW1wZXJhdHVyZSB1bnRpbCBjZXJ0YWluIHRocmVzaG9sZHMgYXJlIGhpdC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVRyYW5zbGF0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IuY3JlYXRlVHJhbnNsYXRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGUgYSBmaWxlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZUlkIFRoZSBJRCBvZiB0aGUgZmlsZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmRlbGV0ZUZpbGUoZmlsZUlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIG1vZGVsIHRvIGRlbGV0ZVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlTW9kZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmRlbGV0ZU1vZGVsKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIHRoZSBjb250ZW50cyBvZiB0aGUgc3BlY2lmaWVkIGZpbGVcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGRvd25sb2FkRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmRvd25sb2FkRmlsZShmaWxlSWQsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIChub24tZmluZXR1bmVkKSBtb2RlbHMsIGFuZCBwcm92aWRlcyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBlYWNoIG9uZSBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEVuZ2luZXMob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IubGlzdEVuZ2luZXMob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhIGxpc3Qgb2YgZmlsZXMgdGhhdCBiZWxvbmcgdG8gdGhlIHVzZXJcXCdzIG9yZ2FuaXphdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RGaWxlcyhvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5saXN0RmlsZXMob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgR2V0IGZpbmUtZ3JhaW5lZCBzdGF0dXMgdXBkYXRlcyBmb3IgYSBmaW5lLXR1bmUgam9iLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2IgdG8gZ2V0IGV2ZW50cyBmb3IuXG4gICAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3N0cmVhbV0gV2hldGhlciB0byBzdHJlYW0gZXZlbnRzIGZvciB0aGUgZmluZS10dW5lIGpvYi4gSWYgc2V0IHRvIHRydWUsIGV2ZW50cyB3aWxsIGJlIHNlbnQgYXMgZGF0YS1vbmx5IFtzZXJ2ZXItc2VudCBldmVudHNdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9TZXJ2ZXItc2VudF9ldmVudHMvVXNpbmdfc2VydmVyLXNlbnRfZXZlbnRzI0V2ZW50X3N0cmVhbV9mb3JtYXQpIGFzIHRoZXkgYmVjb21lIGF2YWlsYWJsZS4gVGhlIHN0cmVhbSB3aWxsIHRlcm1pbmF0ZSB3aXRoIGEgJiN4NjA7ZGF0YTogW0RPTkVdJiN4NjA7IG1lc3NhZ2Ugd2hlbiB0aGUgam9iIGlzIGZpbmlzaGVkIChzdWNjZWVkZWQsIGNhbmNlbGxlZCwgb3IgZmFpbGVkKS4gIElmIHNldCB0byBmYWxzZSwgb25seSBldmVudHMgZ2VuZXJhdGVkIHNvIGZhciB3aWxsIGJlIHJldHVybmVkLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbmVUdW5lRXZlbnRzKGZpbmVUdW5lSWQsIHN0cmVhbSwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IubGlzdEZpbmVUdW5lRXZlbnRzKGZpbmVUdW5lSWQsIHN0cmVhbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdCB5b3VyIG9yZ2FuaXphdGlvblxcJ3MgZmluZS10dW5pbmcgam9ic1xuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgbGlzdEZpbmVUdW5lcyhvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5saXN0RmluZVR1bmVzKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0TW9kZWxzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLmxpc3RNb2RlbHMob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCBpdCBzdWNoIGFzIHRoZSBvd25lciBhbmQgYXZhaWxhYmlsaXR5LlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRW5naW5lKGVuZ2luZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5yZXRyaWV2ZUVuZ2luZShlbmdpbmVJZCwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbl8xLmNyZWF0ZVJlcXVlc3RGdW5jdGlvbihsb2NhbFZhckF4aW9zQXJncywgYXhpb3NfMS5kZWZhdWx0LCBiYXNlXzEuQkFTRV9QQVRILCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICByZXRyaWV2ZUZpbGUoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxvY2FsVmFyQXhpb3NBcmdzID0geWllbGQgbG9jYWxWYXJBeGlvc1BhcmFtQ3JlYXRvci5yZXRyaWV2ZUZpbGUoZmlsZUlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGluZm8gYWJvdXQgdGhlIGZpbmUtdHVuZSBqb2IuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2JcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRmluZVR1bmUoZmluZVR1bmVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsb2NhbFZhckF4aW9zQXJncyA9IHlpZWxkIGxvY2FsVmFyQXhpb3NQYXJhbUNyZWF0b3IucmV0cmlldmVGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbW9uXzEuY3JlYXRlUmVxdWVzdEZ1bmN0aW9uKGxvY2FsVmFyQXhpb3NBcmdzLCBheGlvc18xLmRlZmF1bHQsIGJhc2VfMS5CQVNFX1BBVEgsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFRoZSBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlTW9kZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxWYXJBeGlvc0FyZ3MgPSB5aWVsZCBsb2NhbFZhckF4aW9zUGFyYW1DcmVhdG9yLnJldHJpZXZlTW9kZWwobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb21tb25fMS5jcmVhdGVSZXF1ZXN0RnVuY3Rpb24obG9jYWxWYXJBeGlvc0FyZ3MsIGF4aW9zXzEuZGVmYXVsdCwgYmFzZV8xLkJBU0VfUEFUSCwgY29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbi8qKlxuICogT3BlbkFJQXBpIC0gZmFjdG9yeSBpbnRlcmZhY2VcbiAqIEBleHBvcnRcbiAqL1xuZXhwb3J0cy5PcGVuQUlBcGlGYWN0b3J5ID0gZnVuY3Rpb24gKGNvbmZpZ3VyYXRpb24sIGJhc2VQYXRoLCBheGlvcykge1xuICAgIGNvbnN0IGxvY2FsVmFyRnAgPSBleHBvcnRzLk9wZW5BSUFwaUZwKGNvbmZpZ3VyYXRpb24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBJbW1lZGlhdGVseSBjYW5jZWwgYSBmaW5lLXR1bmUgam9iLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2IgdG8gY2FuY2VsXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjYW5jZWxGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jYW5jZWxGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQW5zd2VycyB0aGUgc3BlY2lmaWVkIHF1ZXN0aW9uIHVzaW5nIHRoZSBwcm92aWRlZCBkb2N1bWVudHMgYW5kIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciBwcm92aWRlZCBkb2N1bWVudHMgb3IgZmlsZXMgdG8gZmluZCByZWxldmFudCBjb250ZXh0LiBUaGUgcmVsZXZhbnQgY29udGV4dCBpcyBjb21iaW5lZCB3aXRoIHRoZSBwcm92aWRlZCBleGFtcGxlcyBhbmQgcXVlc3Rpb24gdG8gY3JlYXRlIHRoZSBwcm9tcHQgZm9yIFtjb21wbGV0aW9uXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKS5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVBbnN3ZXJSZXF1ZXN0fSBjcmVhdGVBbnN3ZXJSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVBbnN3ZXIoY3JlYXRlQW5zd2VyUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlQW5zd2VyKGNyZWF0ZUFuc3dlclJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgY29tcGxldGlvbiBmb3IgdGhlIGNoYXQgbWVzc2FnZVxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUNoYXRDb21wbGV0aW9uKGNyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgdGhlIHNwZWNpZmllZCBgcXVlcnlgIHVzaW5nIHByb3ZpZGVkIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciB0aGUgbGFiZWxlZCBleGFtcGxlcyB0byBzZWxlY3QgdGhlIG9uZXMgbW9zdCByZWxldmFudCBmb3IgdGhlIHBhcnRpY3VsYXIgcXVlcnkuIFRoZW4sIHRoZSByZWxldmFudCBleGFtcGxlcyBhcmUgY29tYmluZWQgd2l0aCB0aGUgcXVlcnkgdG8gY29uc3RydWN0IGEgcHJvbXB0IHRvIHByb2R1Y2UgdGhlIGZpbmFsIGxhYmVsIHZpYSB0aGUgW2NvbXBsZXRpb25zXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKSBlbmRwb2ludC4gIExhYmVsZWQgZXhhbXBsZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBhbiB1cGxvYWRlZCBgZmlsZWAsIG9yIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBgZXhhbXBsZXNgIHBhcmFtZXRlciBmb3IgcXVpY2sgdGVzdHMgYW5kIHNtYWxsIHNjYWxlIHVzZSBjYXNlcy5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3R9IGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ2xhc3NpZmljYXRpb24oY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVDbGFzc2lmaWNhdGlvbihjcmVhdGVDbGFzc2lmaWNhdGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgY29tcGxldGlvbiBmb3IgdGhlIHByb3ZpZGVkIHByb21wdCBhbmQgcGFyYW1ldGVyc1xuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0fSBjcmVhdGVDb21wbGV0aW9uUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlQ29tcGxldGlvbihjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlQ29tcGxldGlvbihjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgZWRpdCBmb3IgdGhlIHByb3ZpZGVkIGlucHV0LCBpbnN0cnVjdGlvbiwgYW5kIHBhcmFtZXRlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRWRpdFJlcXVlc3R9IGNyZWF0ZUVkaXRSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVFZGl0KGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVFZGl0KGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBlbWJlZGRpbmcgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgaW5wdXQgdGV4dC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVFbWJlZGRpbmdSZXF1ZXN0fSBjcmVhdGVFbWJlZGRpbmdSZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVFbWJlZGRpbmcoY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlRW1iZWRkaW5nKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBVcGxvYWQgYSBmaWxlIHRoYXQgY29udGFpbnMgZG9jdW1lbnQocykgdG8gYmUgdXNlZCBhY3Jvc3MgdmFyaW91cyBlbmRwb2ludHMvZmVhdHVyZXMuIEN1cnJlbnRseSwgdGhlIHNpemUgb2YgYWxsIHRoZSBmaWxlcyB1cGxvYWRlZCBieSBvbmUgb3JnYW5pemF0aW9uIGNhbiBiZSB1cCB0byAxIEdCLiBQbGVhc2UgY29udGFjdCB1cyBpZiB5b3UgbmVlZCB0byBpbmNyZWFzZSB0aGUgc3RvcmFnZSBsaW1pdC5cbiAgICAgICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIE5hbWUgb2YgdGhlIFtKU09OIExpbmVzXShodHRwczovL2pzb25saW5lcy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvKSBmaWxlIHRvIGJlIHVwbG9hZGVkLiAgSWYgdGhlICYjeDYwO3B1cnBvc2UmI3g2MDsgaXMgc2V0IHRvIFxcXFxcXCZxdW90O2ZpbmUtdHVuZVxcXFxcXCZxdW90OywgZWFjaCBsaW5lIGlzIGEgSlNPTiByZWNvcmQgd2l0aCBcXFxcXFwmcXVvdDtwcm9tcHRcXFxcXFwmcXVvdDsgYW5kIFxcXFxcXCZxdW90O2NvbXBsZXRpb25cXFxcXFwmcXVvdDsgZmllbGRzIHJlcHJlc2VudGluZyB5b3VyIFt0cmFpbmluZyBleGFtcGxlc10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nL3ByZXBhcmUtdHJhaW5pbmctZGF0YSkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwdXJwb3NlIFRoZSBpbnRlbmRlZCBwdXJwb3NlIG9mIHRoZSB1cGxvYWRlZCBkb2N1bWVudHMuICBVc2UgXFxcXFxcJnF1b3Q7ZmluZS10dW5lXFxcXFxcJnF1b3Q7IGZvciBbRmluZS10dW5pbmddKC9kb2NzL2FwaS1yZWZlcmVuY2UvZmluZS10dW5lcykuIFRoaXMgYWxsb3dzIHVzIHRvIHZhbGlkYXRlIHRoZSBmb3JtYXQgb2YgdGhlIHVwbG9hZGVkIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVGaWxlKGZpbGUsIHB1cnBvc2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZUZpbGUoZmlsZSwgcHVycG9zZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBqb2IgdGhhdCBmaW5lLXR1bmVzIGEgc3BlY2lmaWVkIG1vZGVsIGZyb20gYSBnaXZlbiBkYXRhc2V0LiAgUmVzcG9uc2UgaW5jbHVkZXMgZGV0YWlscyBvZiB0aGUgZW5xdWV1ZWQgam9iIGluY2x1ZGluZyBqb2Igc3RhdHVzIGFuZCB0aGUgbmFtZSBvZiB0aGUgZmluZS10dW5lZCBtb2RlbHMgb25jZSBjb21wbGV0ZS4gIFtMZWFybiBtb3JlIGFib3V0IEZpbmUtdHVuaW5nXSgvZG9jcy9ndWlkZXMvZmluZS10dW5pbmcpXG4gICAgICAgICAqIEBwYXJhbSB7Q3JlYXRlRmluZVR1bmVSZXF1ZXN0fSBjcmVhdGVGaW5lVHVuZVJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUZpbmVUdW5lKGNyZWF0ZUZpbmVUdW5lUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlRmluZVR1bmUoY3JlYXRlRmluZVR1bmVSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhbiBpbWFnZSBnaXZlbiBhIHByb21wdC5cbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVJbWFnZVJlcXVlc3R9IGNyZWF0ZUltYWdlUmVxdWVzdFxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlSW1hZ2UoY3JlYXRlSW1hZ2VSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVJbWFnZShjcmVhdGVJbWFnZVJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGVkaXRlZCBvciBleHRlbmRlZCBpbWFnZSBnaXZlbiBhbiBvcmlnaW5hbCBpbWFnZSBhbmQgYSBwcm9tcHQuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gaW1hZ2UgVGhlIGltYWdlIHRvIGVkaXQuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIHNxdWFyZS4gSWYgbWFzayBpcyBub3QgcHJvdmlkZWQsIGltYWdlIG11c3QgaGF2ZSB0cmFuc3BhcmVuY3ksIHdoaWNoIHdpbGwgYmUgdXNlZCBhcyB0aGUgbWFzay5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHByb21wdCBBIHRleHQgZGVzY3JpcHRpb24gb2YgdGhlIGRlc2lyZWQgaW1hZ2UocykuIFRoZSBtYXhpbXVtIGxlbmd0aCBpcyAxMDAwIGNoYXJhY3RlcnMuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gW21hc2tdIEFuIGFkZGl0aW9uYWwgaW1hZ2Ugd2hvc2UgZnVsbHkgdHJhbnNwYXJlbnQgYXJlYXMgKGUuZy4gd2hlcmUgYWxwaGEgaXMgemVybykgaW5kaWNhdGUgd2hlcmUgJiN4NjA7aW1hZ2UmI3g2MDsgc2hvdWxkIGJlIGVkaXRlZC4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25zIGFzICYjeDYwO2ltYWdlJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW25dIFRoZSBudW1iZXIgb2YgaW1hZ2VzIHRvIGdlbmVyYXRlLiBNdXN0IGJlIGJldHdlZW4gMSBhbmQgMTAuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2l6ZV0gVGhlIHNpemUgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZXMuIE11c3QgYmUgb25lIG9mICYjeDYwOzI1NngyNTYmI3g2MDssICYjeDYwOzUxMng1MTImI3g2MDssIG9yICYjeDYwOzEwMjR4MTAyNCYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgZ2VuZXJhdGVkIGltYWdlcyBhcmUgcmV0dXJuZWQuIE11c3QgYmUgb25lIG9mICYjeDYwO3VybCYjeDYwOyBvciAmI3g2MDtiNjRfanNvbiYjeDYwOy5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFt1c2VyXSBBIHVuaXF1ZSBpZGVudGlmaWVyIHJlcHJlc2VudGluZyB5b3VyIGVuZC11c2VyLCB3aGljaCBjYW4gaGVscCBPcGVuQUkgdG8gbW9uaXRvciBhbmQgZGV0ZWN0IGFidXNlLiBbTGVhcm4gbW9yZV0oL2RvY3MvZ3VpZGVzL3NhZmV0eS1iZXN0LXByYWN0aWNlcy9lbmQtdXNlci1pZHMpLlxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgY3JlYXRlSW1hZ2VFZGl0KGltYWdlLCBwcm9tcHQsIG1hc2ssIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5jcmVhdGVJbWFnZUVkaXQoaW1hZ2UsIHByb21wdCwgbWFzaywgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGEgdmFyaWF0aW9uIG9mIGEgZ2l2ZW4gaW1hZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gaW1hZ2UgVGhlIGltYWdlIHRvIHVzZSBhcyB0aGUgYmFzaXMgZm9yIHRoZSB2YXJpYXRpb24ocykuIE11c3QgYmUgYSB2YWxpZCBQTkcgZmlsZSwgbGVzcyB0aGFuIDRNQiwgYW5kIHNxdWFyZS5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgaW4gd2hpY2ggdGhlIGdlbmVyYXRlZCBpbWFnZXMgYXJlIHJldHVybmVkLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDt1cmwmI3g2MDsgb3IgJiN4NjA7YjY0X2pzb24mI3g2MDsuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZUltYWdlVmFyaWF0aW9uKGltYWdlLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlSW1hZ2VWYXJpYXRpb24oaW1hZ2UsIG4sIHNpemUsIHJlc3BvbnNlRm9ybWF0LCB1c2VyLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgQ2xhc3NpZmllcyBpZiB0ZXh0IHZpb2xhdGVzIE9wZW5BSVxcJ3MgQ29udGVudCBQb2xpY3lcbiAgICAgICAgICogQHBhcmFtIHtDcmVhdGVNb2RlcmF0aW9uUmVxdWVzdH0gY3JlYXRlTW9kZXJhdGlvblJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZU1vZGVyYXRpb24oY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZU1vZGVyYXRpb24oY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBUaGUgc2VhcmNoIGVuZHBvaW50IGNvbXB1dGVzIHNpbWlsYXJpdHkgc2NvcmVzIGJldHdlZW4gcHJvdmlkZWQgcXVlcnkgYW5kIGRvY3VtZW50cy4gRG9jdW1lbnRzIGNhbiBiZSBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIEFQSSBpZiB0aGVyZSBhcmUgbm8gbW9yZSB0aGFuIDIwMCBvZiB0aGVtLiAgVG8gZ28gYmV5b25kIHRoZSAyMDAgZG9jdW1lbnQgbGltaXQsIGRvY3VtZW50cyBjYW4gYmUgcHJvY2Vzc2VkIG9mZmxpbmUgYW5kIHRoZW4gdXNlZCBmb3IgZWZmaWNpZW50IHJldHJpZXZhbCBhdCBxdWVyeSB0aW1lLiBXaGVuIGBmaWxlYCBpcyBzZXQsIHRoZSBzZWFyY2ggZW5kcG9pbnQgc2VhcmNoZXMgb3ZlciBhbGwgdGhlIGRvY3VtZW50cyBpbiB0aGUgZ2l2ZW4gZmlsZSBhbmQgcmV0dXJucyB1cCB0byB0aGUgYG1heF9yZXJhbmtgIG51bWJlciBvZiBkb2N1bWVudHMuIFRoZXNlIGRvY3VtZW50cyB3aWxsIGJlIHJldHVybmVkIGFsb25nIHdpdGggdGhlaXIgc2VhcmNoIHNjb3Jlcy4gIFRoZSBzaW1pbGFyaXR5IHNjb3JlIGlzIGEgcG9zaXRpdmUgc2NvcmUgdGhhdCB1c3VhbGx5IHJhbmdlcyBmcm9tIDAgdG8gMzAwIChidXQgY2FuIHNvbWV0aW1lcyBnbyBoaWdoZXIpLCB3aGVyZSBhIHNjb3JlIGFib3ZlIDIwMCB1c3VhbGx5IG1lYW5zIHRoZSBkb2N1bWVudCBpcyBzZW1hbnRpY2FsbHkgc2ltaWxhciB0byB0aGUgcXVlcnkuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbmdpbmVJZCBUaGUgSUQgb2YgdGhlIGVuZ2luZSB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdC4gIFlvdSBjYW4gc2VsZWN0IG9uZSBvZiAmI3g2MDthZGEmI3g2MDssICYjeDYwO2JhYmJhZ2UmI3g2MDssICYjeDYwO2N1cmllJiN4NjA7LCBvciAmI3g2MDtkYXZpbmNpJiN4NjA7LlxuICAgICAgICAgKiBAcGFyYW0ge0NyZWF0ZVNlYXJjaFJlcXVlc3R9IGNyZWF0ZVNlYXJjaFJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGNyZWF0ZVNlYXJjaChlbmdpbmVJZCwgY3JlYXRlU2VhcmNoUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuY3JlYXRlU2VhcmNoKGVuZ2luZUlkLCBjcmVhdGVTZWFyY2hSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgVHJhbnNjcmliZXMgYXVkaW8gaW50byB0aGUgaW5wdXQgbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBUaGUgYXVkaW8gZmlsZSB0byB0cmFuc2NyaWJlLCBpbiBvbmUgb2YgdGhlc2UgZm9ybWF0czogbXAzLCBtcDQsIG1wZWcsIG1wZ2EsIG00YSwgd2F2LCBvciB3ZWJtLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IFtwcm9tcHRdIEFuIG9wdGlvbmFsIHRleHQgdG8gZ3VpZGUgdGhlIG1vZGVsXFxcXFxcJiMzOTtzIHN0eWxlIG9yIGNvbnRpbnVlIGEgcHJldmlvdXMgYXVkaW8gc2VnbWVudC4gVGhlIFtwcm9tcHRdKC9kb2NzL2d1aWRlcy9zcGVlY2gtdG8tdGV4dC9wcm9tcHRpbmcpIHNob3VsZCBtYXRjaCB0aGUgYXVkaW8gbGFuZ3VhZ2UuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbbGFuZ3VhZ2VdIFRoZSBsYW5ndWFnZSBvZiB0aGUgaW5wdXQgYXVkaW8uIFN1cHBseWluZyB0aGUgaW5wdXQgbGFuZ3VhZ2UgaW4gW0lTTy02MzktMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGlzdF9vZl9JU09fNjM5LTFfY29kZXMpIGZvcm1hdCB3aWxsIGltcHJvdmUgYWNjdXJhY3kgYW5kIGxhdGVuY3kuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVUcmFuc2NyaXB0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgbGFuZ3VhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFRyYW5zbGF0ZXMgYXVkaW8gaW50byBpbnRvIEVuZ2xpc2guXG4gICAgICAgICAqIEBwYXJhbSB7RmlsZX0gZmlsZSBUaGUgYXVkaW8gZmlsZSB0byB0cmFuc2xhdGUsIGluIG9uZSBvZiB0aGVzZSBmb3JtYXRzOiBtcDMsIG1wNCwgbXBlZywgbXBnYSwgbTRhLCB3YXYsIG9yIHdlYm0uXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlLiBPbmx5ICYjeDYwO3doaXNwZXItMSYjeDYwOyBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Byb21wdF0gQW4gb3B0aW9uYWwgdGV4dCB0byBndWlkZSB0aGUgbW9kZWxcXFxcXFwmIzM5O3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpbyBzZWdtZW50LiBUaGUgW3Byb21wdF0oL2RvY3MvZ3VpZGVzL3NwZWVjaC10by10ZXh0L3Byb21wdGluZykgc2hvdWxkIGJlIGluIEVuZ2xpc2guXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzcG9uc2VGb3JtYXRdIFRoZSBmb3JtYXQgb2YgdGhlIHRyYW5zY3JpcHQgb3V0cHV0LCBpbiBvbmUgb2YgdGhlc2Ugb3B0aW9uczoganNvbiwgdGV4dCwgc3J0LCB2ZXJib3NlX2pzb24sIG9yIHZ0dC5cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBjcmVhdGVUcmFuc2xhdGlvbihmaWxlLCBtb2RlbCwgcHJvbXB0LCByZXNwb25zZUZvcm1hdCwgdGVtcGVyYXR1cmUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmNyZWF0ZVRyYW5zbGF0aW9uKGZpbGUsIG1vZGVsLCBwcm9tcHQsIHJlc3BvbnNlRm9ybWF0LCB0ZW1wZXJhdHVyZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbGUuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkZWxldGVGaWxlKGZpbGVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAuZGVsZXRlRmlsZShmaWxlSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBEZWxldGUgYSBmaW5lLXR1bmVkIG1vZGVsLiBZb3UgbXVzdCBoYXZlIHRoZSBPd25lciByb2xlIGluIHlvdXIgb3JnYW5pemF0aW9uLlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIG1vZGVsIHRvIGRlbGV0ZVxuICAgICAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAgICAgKi9cbiAgICAgICAgZGVsZXRlTW9kZWwobW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmRlbGV0ZU1vZGVsKG1vZGVsLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyB0aGUgY29udGVudHMgb2YgdGhlIHNwZWNpZmllZCBmaWxlXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBkb3dubG9hZEZpbGUoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5kb3dubG9hZEZpbGUoZmlsZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgKG5vbi1maW5ldHVuZWQpIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RW5naW5lcyhvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5saXN0RW5naW5lcyhvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0dXJucyBhIGxpc3Qgb2YgZmlsZXMgdGhhdCBiZWxvbmcgdG8gdGhlIHVzZXJcXCdzIG9yZ2FuaXphdGlvbi5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RGaWxlcyhvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5saXN0RmlsZXMob3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IEdldCBmaW5lLWdyYWluZWQgc3RhdHVzIHVwZGF0ZXMgZm9yIGEgZmluZS10dW5lIGpvYi5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbmVUdW5lSWQgVGhlIElEIG9mIHRoZSBmaW5lLXR1bmUgam9iIHRvIGdldCBldmVudHMgZm9yLlxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJlYW1dIFdoZXRoZXIgdG8gc3RyZWFtIGV2ZW50cyBmb3IgdGhlIGZpbmUtdHVuZSBqb2IuIElmIHNldCB0byB0cnVlLCBldmVudHMgd2lsbCBiZSBzZW50IGFzIGRhdGEtb25seSBbc2VydmVyLXNlbnQgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmVyLXNlbnRfZXZlbnRzL1VzaW5nX3NlcnZlci1zZW50X2V2ZW50cyNFdmVudF9zdHJlYW1fZm9ybWF0KSBhcyB0aGV5IGJlY29tZSBhdmFpbGFibGUuIFRoZSBzdHJlYW0gd2lsbCB0ZXJtaW5hdGUgd2l0aCBhICYjeDYwO2RhdGE6IFtET05FXSYjeDYwOyBtZXNzYWdlIHdoZW4gdGhlIGpvYiBpcyBmaW5pc2hlZCAoc3VjY2VlZGVkLCBjYW5jZWxsZWQsIG9yIGZhaWxlZCkuICBJZiBzZXQgdG8gZmFsc2UsIG9ubHkgZXZlbnRzIGdlbmVyYXRlZCBzbyBmYXIgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIGxpc3RGaW5lVHVuZUV2ZW50cyhmaW5lVHVuZUlkLCBzdHJlYW0sIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmxpc3RGaW5lVHVuZUV2ZW50cyhmaW5lVHVuZUlkLCBzdHJlYW0sIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBMaXN0IHlvdXIgb3JnYW5pemF0aW9uXFwncyBmaW5lLXR1bmluZyBqb2JzXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0RmluZVR1bmVzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmxpc3RGaW5lVHVuZXMob3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICBsaXN0TW9kZWxzKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLmxpc3RNb2RlbHMob3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdChheGlvcywgYmFzZVBhdGgpKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqXG4gICAgICAgICAqIEBzdW1tYXJ5IFJldHJpZXZlcyBhIG1vZGVsIGluc3RhbmNlLCBwcm92aWRpbmcgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgaXQgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGVuZ2luZUlkIFRoZSBJRCBvZiB0aGUgZW5naW5lIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEBkZXByZWNhdGVkXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICByZXRyaWV2ZUVuZ2luZShlbmdpbmVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAucmV0cmlldmVFbmdpbmUoZW5naW5lSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGluZm9ybWF0aW9uIGFib3V0IGEgc3BlY2lmaWMgZmlsZS5cbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbFZhckZwLnJldHJpZXZlRmlsZShmaWxlSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QoYXhpb3MsIGJhc2VQYXRoKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKlxuICAgICAgICAgKiBAc3VtbWFyeSBHZXRzIGluZm8gYWJvdXQgdGhlIGZpbmUtdHVuZSBqb2IuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2JcbiAgICAgICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgICAgICovXG4gICAgICAgIHJldHJpZXZlRmluZVR1bmUoZmluZVR1bmVJZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsVmFyRnAucmV0cmlldmVGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICpcbiAgICAgICAgICogQHN1bW1hcnkgUmV0cmlldmVzIGEgbW9kZWwgaW5zdGFuY2UsIHByb3ZpZGluZyBiYXNpYyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kZWwgc3VjaCBhcyB0aGUgb3duZXIgYW5kIHBlcm1pc3Npb25pbmcuXG4gICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBUaGUgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICAgICAqL1xuICAgICAgICByZXRyaWV2ZU1vZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxWYXJGcC5yZXRyaWV2ZU1vZGVsKG1vZGVsLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KGF4aW9zLCBiYXNlUGF0aCkpO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuLyoqXG4gKiBPcGVuQUlBcGkgLSBvYmplY3Qtb3JpZW50ZWQgaW50ZXJmYWNlXG4gKiBAZXhwb3J0XG4gKiBAY2xhc3MgT3BlbkFJQXBpXG4gKiBAZXh0ZW5kcyB7QmFzZUFQSX1cbiAqL1xuY2xhc3MgT3BlbkFJQXBpIGV4dGVuZHMgYmFzZV8xLkJhc2VBUEkge1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgSW1tZWRpYXRlbHkgY2FuY2VsIGEgZmluZS10dW5lIGpvYi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmluZVR1bmVJZCBUaGUgSUQgb2YgdGhlIGZpbmUtdHVuZSBqb2IgdG8gY2FuY2VsXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjYW5jZWxGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY2FuY2VsRmluZVR1bmUoZmluZVR1bmVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQW5zd2VycyB0aGUgc3BlY2lmaWVkIHF1ZXN0aW9uIHVzaW5nIHRoZSBwcm92aWRlZCBkb2N1bWVudHMgYW5kIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciBwcm92aWRlZCBkb2N1bWVudHMgb3IgZmlsZXMgdG8gZmluZCByZWxldmFudCBjb250ZXh0LiBUaGUgcmVsZXZhbnQgY29udGV4dCBpcyBjb21iaW5lZCB3aXRoIHRoZSBwcm92aWRlZCBleGFtcGxlcyBhbmQgcXVlc3Rpb24gdG8gY3JlYXRlIHRoZSBwcm9tcHQgZm9yIFtjb21wbGV0aW9uXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKS5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUFuc3dlclJlcXVlc3R9IGNyZWF0ZUFuc3dlclJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlQW5zd2VyKGNyZWF0ZUFuc3dlclJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVBbnN3ZXIoY3JlYXRlQW5zd2VyUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBjaGF0IG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUNoYXRDb21wbGV0aW9uUmVxdWVzdH0gY3JlYXRlQ2hhdENvbXBsZXRpb25SZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVDaGF0Q29tcGxldGlvbihjcmVhdGVDaGF0Q29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENsYXNzaWZpZXMgdGhlIHNwZWNpZmllZCBgcXVlcnlgIHVzaW5nIHByb3ZpZGVkIGV4YW1wbGVzLiAgVGhlIGVuZHBvaW50IGZpcnN0IFtzZWFyY2hlc10oL2RvY3MvYXBpLXJlZmVyZW5jZS9zZWFyY2hlcykgb3ZlciB0aGUgbGFiZWxlZCBleGFtcGxlcyB0byBzZWxlY3QgdGhlIG9uZXMgbW9zdCByZWxldmFudCBmb3IgdGhlIHBhcnRpY3VsYXIgcXVlcnkuIFRoZW4sIHRoZSByZWxldmFudCBleGFtcGxlcyBhcmUgY29tYmluZWQgd2l0aCB0aGUgcXVlcnkgdG8gY29uc3RydWN0IGEgcHJvbXB0IHRvIHByb2R1Y2UgdGhlIGZpbmFsIGxhYmVsIHZpYSB0aGUgW2NvbXBsZXRpb25zXSgvZG9jcy9hcGktcmVmZXJlbmNlL2NvbXBsZXRpb25zKSBlbmRwb2ludC4gIExhYmVsZWQgZXhhbXBsZXMgY2FuIGJlIHByb3ZpZGVkIHZpYSBhbiB1cGxvYWRlZCBgZmlsZWAsIG9yIGV4cGxpY2l0bHkgbGlzdGVkIGluIHRoZSByZXF1ZXN0IHVzaW5nIHRoZSBgZXhhbXBsZXNgIHBhcmFtZXRlciBmb3IgcXVpY2sgdGVzdHMgYW5kIHNtYWxsIHNjYWxlIHVzZSBjYXNlcy5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdH0gY3JlYXRlQ2xhc3NpZmljYXRpb25SZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUNsYXNzaWZpY2F0aW9uKGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUNsYXNzaWZpY2F0aW9uKGNyZWF0ZUNsYXNzaWZpY2F0aW9uUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGNvbXBsZXRpb24gZm9yIHRoZSBwcm92aWRlZCBwcm9tcHQgYW5kIHBhcmFtZXRlcnNcbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUNvbXBsZXRpb25SZXF1ZXN0fSBjcmVhdGVDb21wbGV0aW9uUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlQ29tcGxldGlvbihjcmVhdGVDb21wbGV0aW9uUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUNvbXBsZXRpb24oY3JlYXRlQ29tcGxldGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSBuZXcgZWRpdCBmb3IgdGhlIHByb3ZpZGVkIGlucHV0LCBpbnN0cnVjdGlvbiwgYW5kIHBhcmFtZXRlcnMuXG4gICAgICogQHBhcmFtIHtDcmVhdGVFZGl0UmVxdWVzdH0gY3JlYXRlRWRpdFJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUVkaXQoY3JlYXRlRWRpdFJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVFZGl0KGNyZWF0ZUVkaXRSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGVtYmVkZGluZyB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBpbnB1dCB0ZXh0LlxuICAgICAqIEBwYXJhbSB7Q3JlYXRlRW1iZWRkaW5nUmVxdWVzdH0gY3JlYXRlRW1iZWRkaW5nUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlRW1iZWRkaW5nKGNyZWF0ZUVtYmVkZGluZ1JlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVFbWJlZGRpbmcoY3JlYXRlRW1iZWRkaW5nUmVxdWVzdCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgVXBsb2FkIGEgZmlsZSB0aGF0IGNvbnRhaW5zIGRvY3VtZW50KHMpIHRvIGJlIHVzZWQgYWNyb3NzIHZhcmlvdXMgZW5kcG9pbnRzL2ZlYXR1cmVzLiBDdXJyZW50bHksIHRoZSBzaXplIG9mIGFsbCB0aGUgZmlsZXMgdXBsb2FkZWQgYnkgb25lIG9yZ2FuaXphdGlvbiBjYW4gYmUgdXAgdG8gMSBHQi4gUGxlYXNlIGNvbnRhY3QgdXMgaWYgeW91IG5lZWQgdG8gaW5jcmVhc2UgdGhlIHN0b3JhZ2UgbGltaXQuXG4gICAgICogQHBhcmFtIHtGaWxlfSBmaWxlIE5hbWUgb2YgdGhlIFtKU09OIExpbmVzXShodHRwczovL2pzb25saW5lcy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvKSBmaWxlIHRvIGJlIHVwbG9hZGVkLiAgSWYgdGhlICYjeDYwO3B1cnBvc2UmI3g2MDsgaXMgc2V0IHRvIFxcXFxcXCZxdW90O2ZpbmUtdHVuZVxcXFxcXCZxdW90OywgZWFjaCBsaW5lIGlzIGEgSlNPTiByZWNvcmQgd2l0aCBcXFxcXFwmcXVvdDtwcm9tcHRcXFxcXFwmcXVvdDsgYW5kIFxcXFxcXCZxdW90O2NvbXBsZXRpb25cXFxcXFwmcXVvdDsgZmllbGRzIHJlcHJlc2VudGluZyB5b3VyIFt0cmFpbmluZyBleGFtcGxlc10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nL3ByZXBhcmUtdHJhaW5pbmctZGF0YSkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHB1cnBvc2UgVGhlIGludGVuZGVkIHB1cnBvc2Ugb2YgdGhlIHVwbG9hZGVkIGRvY3VtZW50cy4gIFVzZSBcXFxcXFwmcXVvdDtmaW5lLXR1bmVcXFxcXFwmcXVvdDsgZm9yIFtGaW5lLXR1bmluZ10oL2RvY3MvYXBpLXJlZmVyZW5jZS9maW5lLXR1bmVzKS4gVGhpcyBhbGxvd3MgdXMgdG8gdmFsaWRhdGUgdGhlIGZvcm1hdCBvZiB0aGUgdXBsb2FkZWQgZmlsZS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUZpbGUoZmlsZSwgcHVycG9zZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUZpbGUoZmlsZSwgcHVycG9zZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ3JlYXRlcyBhIGpvYiB0aGF0IGZpbmUtdHVuZXMgYSBzcGVjaWZpZWQgbW9kZWwgZnJvbSBhIGdpdmVuIGRhdGFzZXQuICBSZXNwb25zZSBpbmNsdWRlcyBkZXRhaWxzIG9mIHRoZSBlbnF1ZXVlZCBqb2IgaW5jbHVkaW5nIGpvYiBzdGF0dXMgYW5kIHRoZSBuYW1lIG9mIHRoZSBmaW5lLXR1bmVkIG1vZGVscyBvbmNlIGNvbXBsZXRlLiAgW0xlYXJuIG1vcmUgYWJvdXQgRmluZS10dW5pbmddKC9kb2NzL2d1aWRlcy9maW5lLXR1bmluZylcbiAgICAgKiBAcGFyYW0ge0NyZWF0ZUZpbmVUdW5lUmVxdWVzdH0gY3JlYXRlRmluZVR1bmVSZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVGaW5lVHVuZShjcmVhdGVGaW5lVHVuZVJlcXVlc3QsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVGaW5lVHVuZShjcmVhdGVGaW5lVHVuZVJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYW4gaW1hZ2UgZ2l2ZW4gYSBwcm9tcHQuXG4gICAgICogQHBhcmFtIHtDcmVhdGVJbWFnZVJlcXVlc3R9IGNyZWF0ZUltYWdlUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlSW1hZ2UoY3JlYXRlSW1hZ2VSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY3JlYXRlSW1hZ2UoY3JlYXRlSW1hZ2VSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBDcmVhdGVzIGFuIGVkaXRlZCBvciBleHRlbmRlZCBpbWFnZSBnaXZlbiBhbiBvcmlnaW5hbCBpbWFnZSBhbmQgYSBwcm9tcHQuXG4gICAgICogQHBhcmFtIHtGaWxlfSBpbWFnZSBUaGUgaW1hZ2UgdG8gZWRpdC4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgc3F1YXJlLiBJZiBtYXNrIGlzIG5vdCBwcm92aWRlZCwgaW1hZ2UgbXVzdCBoYXZlIHRyYW5zcGFyZW5jeSwgd2hpY2ggd2lsbCBiZSB1c2VkIGFzIHRoZSBtYXNrLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwcm9tcHQgQSB0ZXh0IGRlc2NyaXB0aW9uIG9mIHRoZSBkZXNpcmVkIGltYWdlKHMpLiBUaGUgbWF4aW11bSBsZW5ndGggaXMgMTAwMCBjaGFyYWN0ZXJzLlxuICAgICAqIEBwYXJhbSB7RmlsZX0gW21hc2tdIEFuIGFkZGl0aW9uYWwgaW1hZ2Ugd2hvc2UgZnVsbHkgdHJhbnNwYXJlbnQgYXJlYXMgKGUuZy4gd2hlcmUgYWxwaGEgaXMgemVybykgaW5kaWNhdGUgd2hlcmUgJiN4NjA7aW1hZ2UmI3g2MDsgc2hvdWxkIGJlIGVkaXRlZC4gTXVzdCBiZSBhIHZhbGlkIFBORyBmaWxlLCBsZXNzIHRoYW4gNE1CLCBhbmQgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb25zIGFzICYjeDYwO2ltYWdlJiN4NjA7LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbl0gVGhlIG51bWJlciBvZiBpbWFnZXMgdG8gZ2VuZXJhdGUuIE11c3QgYmUgYmV0d2VlbiAxIGFuZCAxMC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3NpemVdIFRoZSBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzLiBNdXN0IGJlIG9uZSBvZiAmI3g2MDsyNTZ4MjU2JiN4NjA7LCAmI3g2MDs1MTJ4NTEyJiN4NjA7LCBvciAmI3g2MDsxMDI0eDEwMjQmI3g2MDsuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtyZXNwb25zZUZvcm1hdF0gVGhlIGZvcm1hdCBpbiB3aGljaCB0aGUgZ2VuZXJhdGVkIGltYWdlcyBhcmUgcmV0dXJuZWQuIE11c3QgYmUgb25lIG9mICYjeDYwO3VybCYjeDYwOyBvciAmI3g2MDtiNjRfanNvbiYjeDYwOy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3VzZXJdIEEgdW5pcXVlIGlkZW50aWZpZXIgcmVwcmVzZW50aW5nIHlvdXIgZW5kLXVzZXIsIHdoaWNoIGNhbiBoZWxwIE9wZW5BSSB0byBtb25pdG9yIGFuZCBkZXRlY3QgYWJ1c2UuIFtMZWFybiBtb3JlXSgvZG9jcy9ndWlkZXMvc2FmZXR5LWJlc3QtcHJhY3RpY2VzL2VuZC11c2VyLWlkcykuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVJbWFnZUVkaXQoaW1hZ2UsIHByb21wdCwgbWFzaywgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVJbWFnZUVkaXQoaW1hZ2UsIHByb21wdCwgbWFzaywgbiwgc2l6ZSwgcmVzcG9uc2VGb3JtYXQsIHVzZXIsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IENyZWF0ZXMgYSB2YXJpYXRpb24gb2YgYSBnaXZlbiBpbWFnZS5cbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGltYWdlIFRoZSBpbWFnZSB0byB1c2UgYXMgdGhlIGJhc2lzIGZvciB0aGUgdmFyaWF0aW9uKHMpLiBNdXN0IGJlIGEgdmFsaWQgUE5HIGZpbGUsIGxlc3MgdGhhbiA0TUIsIGFuZCBzcXVhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuXSBUaGUgbnVtYmVyIG9mIGltYWdlcyB0byBnZW5lcmF0ZS4gTXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDEwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc2l6ZV0gVGhlIHNpemUgb2YgdGhlIGdlbmVyYXRlZCBpbWFnZXMuIE11c3QgYmUgb25lIG9mICYjeDYwOzI1NngyNTYmI3g2MDssICYjeDYwOzUxMng1MTImI3g2MDssIG9yICYjeDYwOzEwMjR4MTAyNCYjeDYwOy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IGluIHdoaWNoIHRoZSBnZW5lcmF0ZWQgaW1hZ2VzIGFyZSByZXR1cm5lZC4gTXVzdCBiZSBvbmUgb2YgJiN4NjA7dXJsJiN4NjA7IG9yICYjeDYwO2I2NF9qc29uJiN4NjA7LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbdXNlcl0gQSB1bmlxdWUgaWRlbnRpZmllciByZXByZXNlbnRpbmcgeW91ciBlbmQtdXNlciwgd2hpY2ggY2FuIGhlbHAgT3BlbkFJIHRvIG1vbml0b3IgYW5kIGRldGVjdCBhYnVzZS4gW0xlYXJuIG1vcmVdKC9kb2NzL2d1aWRlcy9zYWZldHktYmVzdC1wcmFjdGljZXMvZW5kLXVzZXItaWRzKS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZUltYWdlVmFyaWF0aW9uKGltYWdlLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZUltYWdlVmFyaWF0aW9uKGltYWdlLCBuLCBzaXplLCByZXNwb25zZUZvcm1hdCwgdXNlciwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgQ2xhc3NpZmllcyBpZiB0ZXh0IHZpb2xhdGVzIE9wZW5BSVxcJ3MgQ29udGVudCBQb2xpY3lcbiAgICAgKiBAcGFyYW0ge0NyZWF0ZU1vZGVyYXRpb25SZXF1ZXN0fSBjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlTW9kZXJhdGlvbihjcmVhdGVNb2RlcmF0aW9uUmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZU1vZGVyYXRpb24oY3JlYXRlTW9kZXJhdGlvblJlcXVlc3QsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IFRoZSBzZWFyY2ggZW5kcG9pbnQgY29tcHV0ZXMgc2ltaWxhcml0eSBzY29yZXMgYmV0d2VlbiBwcm92aWRlZCBxdWVyeSBhbmQgZG9jdW1lbnRzLiBEb2N1bWVudHMgY2FuIGJlIHBhc3NlZCBkaXJlY3RseSB0byB0aGUgQVBJIGlmIHRoZXJlIGFyZSBubyBtb3JlIHRoYW4gMjAwIG9mIHRoZW0uICBUbyBnbyBiZXlvbmQgdGhlIDIwMCBkb2N1bWVudCBsaW1pdCwgZG9jdW1lbnRzIGNhbiBiZSBwcm9jZXNzZWQgb2ZmbGluZSBhbmQgdGhlbiB1c2VkIGZvciBlZmZpY2llbnQgcmV0cmlldmFsIGF0IHF1ZXJ5IHRpbWUuIFdoZW4gYGZpbGVgIGlzIHNldCwgdGhlIHNlYXJjaCBlbmRwb2ludCBzZWFyY2hlcyBvdmVyIGFsbCB0aGUgZG9jdW1lbnRzIGluIHRoZSBnaXZlbiBmaWxlIGFuZCByZXR1cm5zIHVwIHRvIHRoZSBgbWF4X3JlcmFua2AgbnVtYmVyIG9mIGRvY3VtZW50cy4gVGhlc2UgZG9jdW1lbnRzIHdpbGwgYmUgcmV0dXJuZWQgYWxvbmcgd2l0aCB0aGVpciBzZWFyY2ggc2NvcmVzLiAgVGhlIHNpbWlsYXJpdHkgc2NvcmUgaXMgYSBwb3NpdGl2ZSBzY29yZSB0aGF0IHVzdWFsbHkgcmFuZ2VzIGZyb20gMCB0byAzMDAgKGJ1dCBjYW4gc29tZXRpbWVzIGdvIGhpZ2hlciksIHdoZXJlIGEgc2NvcmUgYWJvdmUgMjAwIHVzdWFsbHkgbWVhbnMgdGhlIGRvY3VtZW50IGlzIHNlbWFudGljYWxseSBzaW1pbGFyIHRvIHRoZSBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3QuICBZb3UgY2FuIHNlbGVjdCBvbmUgb2YgJiN4NjA7YWRhJiN4NjA7LCAmI3g2MDtiYWJiYWdlJiN4NjA7LCAmI3g2MDtjdXJpZSYjeDYwOywgb3IgJiN4NjA7ZGF2aW5jaSYjeDYwOy5cbiAgICAgKiBAcGFyYW0ge0NyZWF0ZVNlYXJjaFJlcXVlc3R9IGNyZWF0ZVNlYXJjaFJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgY3JlYXRlU2VhcmNoKGVuZ2luZUlkLCBjcmVhdGVTZWFyY2hSZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuY3JlYXRlU2VhcmNoKGVuZ2luZUlkLCBjcmVhdGVTZWFyY2hSZXF1ZXN0LCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBUcmFuc2NyaWJlcyBhdWRpbyBpbnRvIHRoZSBpbnB1dCBsYW5ndWFnZS5cbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgVGhlIGF1ZGlvIGZpbGUgdG8gdHJhbnNjcmliZSwgaW4gb25lIG9mIHRoZXNlIGZvcm1hdHM6IG1wMywgbXA0LCBtcGVnLCBtcGdhLCBtNGEsIHdhdiwgb3Igd2VibS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgSUQgb2YgdGhlIG1vZGVsIHRvIHVzZS4gT25seSAmI3g2MDt3aGlzcGVyLTEmI3g2MDsgaXMgY3VycmVudGx5IGF2YWlsYWJsZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Byb21wdF0gQW4gb3B0aW9uYWwgdGV4dCB0byBndWlkZSB0aGUgbW9kZWxcXFxcXFwmIzM5O3Mgc3R5bGUgb3IgY29udGludWUgYSBwcmV2aW91cyBhdWRpbyBzZWdtZW50LiBUaGUgW3Byb21wdF0oL2RvY3MvZ3VpZGVzL3NwZWVjaC10by10ZXh0L3Byb21wdGluZykgc2hvdWxkIG1hdGNoIHRoZSBhdWRpbyBsYW5ndWFnZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IG9mIHRoZSB0cmFuc2NyaXB0IG91dHB1dCwgaW4gb25lIG9mIHRoZXNlIG9wdGlvbnM6IGpzb24sIHRleHQsIHNydCwgdmVyYm9zZV9qc29uLCBvciB2dHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtsYW5ndWFnZV0gVGhlIGxhbmd1YWdlIG9mIHRoZSBpbnB1dCBhdWRpby4gU3VwcGx5aW5nIHRoZSBpbnB1dCBsYW5ndWFnZSBpbiBbSVNPLTYzOS0xXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MaXN0X29mX0lTT182MzktMV9jb2RlcykgZm9ybWF0IHdpbGwgaW1wcm92ZSBhY2N1cmFjeSBhbmQgbGF0ZW5jeS5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLmNyZWF0ZVRyYW5zY3JpcHRpb24oZmlsZSwgbW9kZWwsIHByb21wdCwgcmVzcG9uc2VGb3JtYXQsIHRlbXBlcmF0dXJlLCBsYW5ndWFnZSwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgVHJhbnNsYXRlcyBhdWRpbyBpbnRvIGludG8gRW5nbGlzaC5cbiAgICAgKiBAcGFyYW0ge0ZpbGV9IGZpbGUgVGhlIGF1ZGlvIGZpbGUgdG8gdHJhbnNsYXRlLCBpbiBvbmUgb2YgdGhlc2UgZm9ybWF0czogbXAzLCBtcDQsIG1wZWcsIG1wZ2EsIG00YSwgd2F2LCBvciB3ZWJtLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlbCBJRCBvZiB0aGUgbW9kZWwgdG8gdXNlLiBPbmx5ICYjeDYwO3doaXNwZXItMSYjeDYwOyBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJvbXB0XSBBbiBvcHRpb25hbCB0ZXh0IHRvIGd1aWRlIHRoZSBtb2RlbFxcXFxcXCYjMzk7cyBzdHlsZSBvciBjb250aW51ZSBhIHByZXZpb3VzIGF1ZGlvIHNlZ21lbnQuIFRoZSBbcHJvbXB0XSgvZG9jcy9ndWlkZXMvc3BlZWNoLXRvLXRleHQvcHJvbXB0aW5nKSBzaG91bGQgYmUgaW4gRW5nbGlzaC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3Jlc3BvbnNlRm9ybWF0XSBUaGUgZm9ybWF0IG9mIHRoZSB0cmFuc2NyaXB0IG91dHB1dCwgaW4gb25lIG9mIHRoZXNlIG9wdGlvbnM6IGpzb24sIHRleHQsIHNydCwgdmVyYm9zZV9qc29uLCBvciB2dHQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt0ZW1wZXJhdHVyZV0gVGhlIHNhbXBsaW5nIHRlbXBlcmF0dXJlLCBiZXR3ZWVuIDAgYW5kIDEuIEhpZ2hlciB2YWx1ZXMgbGlrZSAwLjggd2lsbCBtYWtlIHRoZSBvdXRwdXQgbW9yZSByYW5kb20sIHdoaWxlIGxvd2VyIHZhbHVlcyBsaWtlIDAuMiB3aWxsIG1ha2UgaXQgbW9yZSBmb2N1c2VkIGFuZCBkZXRlcm1pbmlzdGljLiBJZiBzZXQgdG8gMCwgdGhlIG1vZGVsIHdpbGwgdXNlIFtsb2cgcHJvYmFiaWxpdHldKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xvZ19wcm9iYWJpbGl0eSkgdG8gYXV0b21hdGljYWxseSBpbmNyZWFzZSB0aGUgdGVtcGVyYXR1cmUgdW50aWwgY2VydGFpbiB0aHJlc2hvbGRzIGFyZSBoaXQuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBjcmVhdGVUcmFuc2xhdGlvbihmaWxlLCBtb2RlbCwgcHJvbXB0LCByZXNwb25zZUZvcm1hdCwgdGVtcGVyYXR1cmUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5jcmVhdGVUcmFuc2xhdGlvbihmaWxlLCBtb2RlbCwgcHJvbXB0LCByZXNwb25zZUZvcm1hdCwgdGVtcGVyYXR1cmUsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGRlbGV0ZUZpbGUoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuZGVsZXRlRmlsZShmaWxlSWQsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IERlbGV0ZSBhIGZpbmUtdHVuZWQgbW9kZWwuIFlvdSBtdXN0IGhhdmUgdGhlIE93bmVyIHJvbGUgaW4geW91ciBvcmdhbml6YXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1vZGVsIFRoZSBtb2RlbCB0byBkZWxldGVcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGRlbGV0ZU1vZGVsKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuZGVsZXRlTW9kZWwobW9kZWwsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IFJldHVybnMgdGhlIGNvbnRlbnRzIG9mIHRoZSBzcGVjaWZpZWQgZmlsZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlSWQgVGhlIElEIG9mIHRoZSBmaWxlIHRvIHVzZSBmb3IgdGhpcyByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBkb3dubG9hZEZpbGUoZmlsZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikuZG93bmxvYWRGaWxlKGZpbGVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgTGlzdHMgdGhlIGN1cnJlbnRseSBhdmFpbGFibGUgKG5vbi1maW5ldHVuZWQpIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGxpc3RFbmdpbmVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5saXN0RW5naW5lcyhvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBSZXR1cm5zIGEgbGlzdCBvZiBmaWxlcyB0aGF0IGJlbG9uZyB0byB0aGUgdXNlclxcJ3Mgb3JnYW5pemF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgbGlzdEZpbGVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5saXN0RmlsZXMob3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgR2V0IGZpbmUtZ3JhaW5lZCBzdGF0dXMgdXBkYXRlcyBmb3IgYSBmaW5lLXR1bmUgam9iLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYiB0byBnZXQgZXZlbnRzIGZvci5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtzdHJlYW1dIFdoZXRoZXIgdG8gc3RyZWFtIGV2ZW50cyBmb3IgdGhlIGZpbmUtdHVuZSBqb2IuIElmIHNldCB0byB0cnVlLCBldmVudHMgd2lsbCBiZSBzZW50IGFzIGRhdGEtb25seSBbc2VydmVyLXNlbnQgZXZlbnRzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvU2VydmVyLXNlbnRfZXZlbnRzL1VzaW5nX3NlcnZlci1zZW50X2V2ZW50cyNFdmVudF9zdHJlYW1fZm9ybWF0KSBhcyB0aGV5IGJlY29tZSBhdmFpbGFibGUuIFRoZSBzdHJlYW0gd2lsbCB0ZXJtaW5hdGUgd2l0aCBhICYjeDYwO2RhdGE6IFtET05FXSYjeDYwOyBtZXNzYWdlIHdoZW4gdGhlIGpvYiBpcyBmaW5pc2hlZCAoc3VjY2VlZGVkLCBjYW5jZWxsZWQsIG9yIGZhaWxlZCkuICBJZiBzZXQgdG8gZmFsc2UsIG9ubHkgZXZlbnRzIGdlbmVyYXRlZCBzbyBmYXIgd2lsbCBiZSByZXR1cm5lZC5cbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIGxpc3RGaW5lVHVuZUV2ZW50cyhmaW5lVHVuZUlkLCBzdHJlYW0sIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5saXN0RmluZVR1bmVFdmVudHMoZmluZVR1bmVJZCwgc3RyZWFtLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBMaXN0IHlvdXIgb3JnYW5pemF0aW9uXFwncyBmaW5lLXR1bmluZyBqb2JzXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBsaXN0RmluZVR1bmVzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5saXN0RmluZVR1bmVzKG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IExpc3RzIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIG1vZGVscywgYW5kIHByb3ZpZGVzIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IGVhY2ggb25lIHN1Y2ggYXMgdGhlIG93bmVyIGFuZCBhdmFpbGFiaWxpdHkuXG4gICAgICogQHBhcmFtIHsqfSBbb3B0aW9uc10gT3ZlcnJpZGUgaHR0cCByZXF1ZXN0IG9wdGlvbi5cbiAgICAgKiBAdGhyb3dzIHtSZXF1aXJlZEVycm9yfVxuICAgICAqIEBtZW1iZXJvZiBPcGVuQUlBcGlcbiAgICAgKi9cbiAgICBsaXN0TW9kZWxzKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5saXN0TW9kZWxzKG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBzdW1tYXJ5IFJldHJpZXZlcyBhIG1vZGVsIGluc3RhbmNlLCBwcm92aWRpbmcgYmFzaWMgaW5mb3JtYXRpb24gYWJvdXQgaXQgc3VjaCBhcyB0aGUgb3duZXIgYW5kIGF2YWlsYWJpbGl0eS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZW5naW5lSWQgVGhlIElEIG9mIHRoZSBlbmdpbmUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEBkZXByZWNhdGVkXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgcmV0cmlldmVFbmdpbmUoZW5naW5lSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5yZXRyaWV2ZUVuZ2luZShlbmdpbmVJZCwgb3B0aW9ucykudGhlbigocmVxdWVzdCkgPT4gcmVxdWVzdCh0aGlzLmF4aW9zLCB0aGlzLmJhc2VQYXRoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHN1bW1hcnkgUmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIGZpbGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVJZCBUaGUgSUQgb2YgdGhlIGZpbGUgdG8gdXNlIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgKiBAcGFyYW0geyp9IFtvcHRpb25zXSBPdmVycmlkZSBodHRwIHJlcXVlc3Qgb3B0aW9uLlxuICAgICAqIEB0aHJvd3Mge1JlcXVpcmVkRXJyb3J9XG4gICAgICogQG1lbWJlcm9mIE9wZW5BSUFwaVxuICAgICAqL1xuICAgIHJldHJpZXZlRmlsZShmaWxlSWQsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGV4cG9ydHMuT3BlbkFJQXBpRnAodGhpcy5jb25maWd1cmF0aW9uKS5yZXRyaWV2ZUZpbGUoZmlsZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBHZXRzIGluZm8gYWJvdXQgdGhlIGZpbmUtdHVuZSBqb2IuICBbTGVhcm4gbW9yZSBhYm91dCBGaW5lLXR1bmluZ10oL2RvY3MvZ3VpZGVzL2ZpbmUtdHVuaW5nKVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaW5lVHVuZUlkIFRoZSBJRCBvZiB0aGUgZmluZS10dW5lIGpvYlxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgcmV0cmlldmVGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBleHBvcnRzLk9wZW5BSUFwaUZwKHRoaXMuY29uZmlndXJhdGlvbikucmV0cmlldmVGaW5lVHVuZShmaW5lVHVuZUlkLCBvcHRpb25zKS50aGVuKChyZXF1ZXN0KSA9PiByZXF1ZXN0KHRoaXMuYXhpb3MsIHRoaXMuYmFzZVBhdGgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAc3VtbWFyeSBSZXRyaWV2ZXMgYSBtb2RlbCBpbnN0YW5jZSwgcHJvdmlkaW5nIGJhc2ljIGluZm9ybWF0aW9uIGFib3V0IHRoZSBtb2RlbCBzdWNoIGFzIHRoZSBvd25lciBhbmQgcGVybWlzc2lvbmluZy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZWwgVGhlIElEIG9mIHRoZSBtb2RlbCB0byB1c2UgZm9yIHRoaXMgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gW29wdGlvbnNdIE92ZXJyaWRlIGh0dHAgcmVxdWVzdCBvcHRpb24uXG4gICAgICogQHRocm93cyB7UmVxdWlyZWRFcnJvcn1cbiAgICAgKiBAbWVtYmVyb2YgT3BlbkFJQXBpXG4gICAgICovXG4gICAgcmV0cmlldmVNb2RlbChtb2RlbCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZXhwb3J0cy5PcGVuQUlBcGlGcCh0aGlzLmNvbmZpZ3VyYXRpb24pLnJldHJpZXZlTW9kZWwobW9kZWwsIG9wdGlvbnMpLnRoZW4oKHJlcXVlc3QpID0+IHJlcXVlc3QodGhpcy5heGlvcywgdGhpcy5iYXNlUGF0aCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuT3BlbkFJQXBpID0gT3BlbkFJQXBpO1xuIiwgIntcbiAgXCJuYW1lXCI6IFwib3BlbmFpXCIsXG4gIFwidmVyc2lvblwiOiBcIjMuMi4xXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJOb2RlLmpzIGxpYnJhcnkgZm9yIHRoZSBPcGVuQUkgQVBJXCIsXG4gIFwicmVwb3NpdG9yeVwiOiB7XG4gICAgXCJ0eXBlXCI6IFwiZ2l0XCIsXG4gICAgXCJ1cmxcIjogXCJnaXRAZ2l0aHViLmNvbTpvcGVuYWkvb3BlbmFpLW5vZGUuZ2l0XCJcbiAgfSxcbiAgXCJrZXl3b3Jkc1wiOiBbXG4gICAgXCJvcGVuYWlcIixcbiAgICBcIm9wZW5cIixcbiAgICBcImFpXCIsXG4gICAgXCJncHQtM1wiLFxuICAgIFwiZ3B0M1wiXG4gIF0sXG4gIFwiYXV0aG9yXCI6IFwiT3BlbkFJXCIsXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICBcIm1haW5cIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiBcInRzYyAtLW91dERpciBkaXN0L1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcImF4aW9zXCI6IFwiXjAuMjYuMFwiLFxuICAgIFwiZm9ybS1kYXRhXCI6IFwiXjQuMC4wXCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMTIuMTEuNVwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl4zLjYuNFwiXG4gIH1cbn1cbiIsICIvKiBlc2xpbnQtZW52IGJyb3dzZXIgKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgPyBzZWxmLkZvcm1EYXRhIDogd2luZG93LkZvcm1EYXRhO1xuIiwgIlwidXNlIHN0cmljdFwiO1xuLyogdHNsaW50OmRpc2FibGUgKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG4vKipcbiAqIE9wZW5BSSBBUElcbiAqIEFQSXMgZm9yIHNhbXBsaW5nIGZyb20gYW5kIGZpbmUtdHVuaW5nIGxhbmd1YWdlIG1vZGVsc1xuICpcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBPcGVuQVBJIGRvY3VtZW50OiAxLjIuMFxuICpcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL29wZW5hcGktZ2VuZXJhdG9yLnRlY2gpLlxuICogaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoXG4gKiBEbyBub3QgZWRpdCB0aGUgY2xhc3MgbWFudWFsbHkuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29uZmlndXJhdGlvbiA9IHZvaWQgMDtcbmNvbnN0IHBhY2thZ2VKc29uID0gcmVxdWlyZShcIi4uL3BhY2thZ2UuanNvblwiKTtcbmNsYXNzIENvbmZpZ3VyYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtID0ge30pIHtcbiAgICAgICAgdGhpcy5hcGlLZXkgPSBwYXJhbS5hcGlLZXk7XG4gICAgICAgIHRoaXMub3JnYW5pemF0aW9uID0gcGFyYW0ub3JnYW5pemF0aW9uO1xuICAgICAgICB0aGlzLnVzZXJuYW1lID0gcGFyYW0udXNlcm5hbWU7XG4gICAgICAgIHRoaXMucGFzc3dvcmQgPSBwYXJhbS5wYXNzd29yZDtcbiAgICAgICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHBhcmFtLmFjY2Vzc1Rva2VuO1xuICAgICAgICB0aGlzLmJhc2VQYXRoID0gcGFyYW0uYmFzZVBhdGg7XG4gICAgICAgIHRoaXMuYmFzZU9wdGlvbnMgPSBwYXJhbS5iYXNlT3B0aW9ucztcbiAgICAgICAgdGhpcy5mb3JtRGF0YUN0b3IgPSBwYXJhbS5mb3JtRGF0YUN0b3I7XG4gICAgICAgIGlmICghdGhpcy5iYXNlT3B0aW9ucykge1xuICAgICAgICAgICAgdGhpcy5iYXNlT3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oeyAnVXNlci1BZ2VudCc6IGBPcGVuQUkvTm9kZUpTLyR7cGFja2FnZUpzb24udmVyc2lvbn1gLCAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmFwaUtleX1gIH0sIHRoaXMuYmFzZU9wdGlvbnMuaGVhZGVycyk7XG4gICAgICAgIGlmICh0aGlzLm9yZ2FuaXphdGlvbikge1xuICAgICAgICAgICAgdGhpcy5iYXNlT3B0aW9ucy5oZWFkZXJzWydPcGVuQUktT3JnYW5pemF0aW9uJ10gPSB0aGlzLm9yZ2FuaXphdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuZm9ybURhdGFDdG9yKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm1EYXRhQ3RvciA9IHJlcXVpcmUoXCJmb3JtLWRhdGFcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIE1JTUUgaXMgYSBKU09OIE1JTUUuXG4gICAgICogSlNPTiBNSU1FIGV4YW1wbGVzOlxuICAgICAqICAgYXBwbGljYXRpb24vanNvblxuICAgICAqICAgYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD1VVEY4XG4gICAgICogICBBUFBMSUNBVElPTi9KU09OXG4gICAgICogICBhcHBsaWNhdGlvbi92bmQuY29tcGFueStqc29uXG4gICAgICogQHBhcmFtIG1pbWUgLSBNSU1FIChNdWx0aXB1cnBvc2UgSW50ZXJuZXQgTWFpbCBFeHRlbnNpb25zKVxuICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgZ2l2ZW4gTUlNRSBpcyBKU09OLCBmYWxzZSBvdGhlcndpc2UuXG4gICAgICovXG4gICAgaXNKc29uTWltZShtaW1lKSB7XG4gICAgICAgIGNvbnN0IGpzb25NaW1lID0gbmV3IFJlZ0V4cCgnXihhcHBsaWNhdGlvblxcL2pzb258W147LyBcXHRdK1xcL1teOy8gXFx0XStbK11qc29uKVsgXFx0XSooOy4qKT8kJywgJ2knKTtcbiAgICAgICAgcmV0dXJuIG1pbWUgIT09IG51bGwgJiYgKGpzb25NaW1lLnRlc3QobWltZSkgfHwgbWltZS50b0xvd2VyQ2FzZSgpID09PSAnYXBwbGljYXRpb24vanNvbi1wYXRjaCtqc29uJyk7XG4gICAgfVxufVxuZXhwb3J0cy5Db25maWd1cmF0aW9uID0gQ29uZmlndXJhdGlvbjtcbiIsICJcInVzZSBzdHJpY3RcIjtcbi8qIHRzbGludDpkaXNhYmxlICovXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoqXG4gKiBPcGVuQUkgQVBJXG4gKiBBUElzIGZvciBzYW1wbGluZyBmcm9tIGFuZCBmaW5lLXR1bmluZyBsYW5ndWFnZSBtb2RlbHNcbiAqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgT3BlbkFQSSBkb2N1bWVudDogMS4yLjBcbiAqXG4gKlxuICogTk9URTogVGhpcyBjbGFzcyBpcyBhdXRvIGdlbmVyYXRlZCBieSBPcGVuQVBJIEdlbmVyYXRvciAoaHR0cHM6Ly9vcGVuYXBpLWdlbmVyYXRvci50ZWNoKS5cbiAqIGh0dHBzOi8vb3BlbmFwaS1nZW5lcmF0b3IudGVjaFxuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25maWd1cmF0aW9uXCIpLCBleHBvcnRzKTtcbiIsICJpbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBub3JtYWxpemVQYXRoLCBOb3RpY2UsIFBsdWdpbiwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgbG9hZFBkZkpzLCByZXF1ZXN0VXJsLCBhcnJheUJ1ZmZlclRvQmFzZTY0LCBURm9sZGVyLCBSZXF1ZXN0VXJsUGFyYW0sIFRBYnN0cmFjdEZpbGUgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBQcm9tcHRNb2RhbCB9IGZyb20gXCIuL21vZGFsXCI7XG5pbXBvcnQgeyBDb25maWd1cmF0aW9uLCBPcGVuQUlBcGksIENyZWF0ZUltYWdlUmVxdWVzdFNpemVFbnVtIH0gZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IHsgdW5lc2NhcGUgfSBmcm9tICdxdWVyeXN0cmluZyc7XG5cbmludGVyZmFjZSBBSUNvbW1hbmRlclBsdWdpblNldHRpbmdzIHtcbiAgICBtb2RlbDogc3RyaW5nO1xuICAgIGFwaUtleTogc3RyaW5nO1xuICAgIGltZ1NpemU6IHN0cmluZztcbiAgICBzYXZlSW1nOiBzdHJpbmc7XG4gICAgdXNlU2VhcmNoRW5naW5lOiBib29sZWFuO1xuICAgIHNlYXJjaEVuZ2luZTogc3RyaW5nO1xuICAgIGJpbmdTZWFyY2hLZXk6IHN0cmluZztcbiAgICB1c2VQcm9tcHRQZXJmZWN0OiBib29sZWFuO1xuICAgIHByb21wdFBlcmZlY3RLZXk6IHN0cmluZztcbiAgICBwcm9tcHRzRm9yU2VsZWN0ZWQ6IHN0cmluZztcbiAgICBwcm9tcHRzRm9yUGRmOiBzdHJpbmc7XG59XG5cbmNvbnN0IERFRkFVTFRfU0VUVElOR1M6IEFJQ29tbWFuZGVyUGx1Z2luU2V0dGluZ3MgPSB7XG4gICAgbW9kZWw6ICdncHQtMy41LXR1cmJvJyxcbiAgICBhcGlLZXk6ICcnLFxuICAgIGltZ1NpemU6ICcyNTZ4MjU2JyxcbiAgICBzYXZlSW1nOiAnYXR0YWNobWVudCcsXG4gICAgdXNlU2VhcmNoRW5naW5lOiBmYWxzZSxcbiAgICBzZWFyY2hFbmdpbmU6ICdiaW5nJyxcbiAgICBiaW5nU2VhcmNoS2V5OiAnJyxcbiAgICBwcm9tcHRQZXJmZWN0S2V5OiAnJyxcbiAgICB1c2VQcm9tcHRQZXJmZWN0OiBmYWxzZSxcbiAgICBwcm9tcHRzRm9yU2VsZWN0ZWQ6ICcnLFxuICAgIHByb21wdHNGb3JQZGY6ICcnXG59XG5cbmludGVyZmFjZSBUb2tlbkxpbWl0cyB7XG4gICAgW2tleTogc3RyaW5nXTogbnVtYmVyO1xuICB9XG4gIFxuICBjb25zdCBUT0tFTl9MSU1JVFM6IFRva2VuTGltaXRzID0ge1xuICAgICAgJ2dwdC0zLjUtdHVyYm8nOiA0MDk2LFxuICAgICAgJ2dwdC0zLjUtdHVyYm8tMDMwMSc6NDA5NixcbiAgICAgICd0ZXh0LWRhdmluY2ktMDAzJzogNDA5NyxcbiAgICAgICd0ZXh0LWRhdmluY2ktMDAyJzogNDA5NyxcbiAgICAgICdjb2RlLWRhdmluY2ktMDAyJzogODAwMSxcbiAgICAgICdjb2RlLWRhdmluY2ktMDAxJzogODAwMSxcbiAgICAgICdncHQtNCc6IDgxOTIsXG4gICAgICAnZ3B0LTQtMDMxNCc6IDgxOTIsXG4gICAgICAnZ3B0LTQtMzJrJzogMzI3NjgsXG4gICAgICAnZ3B0LTQtMzJrLTAzMTQnOiAzMjc2OFxuICB9XG4gIFxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBSUNvbW1hbmRlclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IEFJQ29tbWFuZGVyUGx1Z2luU2V0dGluZ3M7XG4gICAgd3JpdGluZzogYm9vbGVhbjtcblxuICAgIGFzeW5jIGltcHJvdmVQcm9tcHQocHJvbXB0OiBzdHJpbmcsIHRhcmdldE1vZGVsOiBzdHJpbmcpIHtcblxuICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHByb21wdDogcHJvbXB0LFxuICAgICAgICAgICAgICAgIHRhcmdldE1vZGVsOiB0YXJnZXRNb2RlbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vdXMtY2VudHJhbDEtcHJvbXB0LW9wcy5jbG91ZGZ1bmN0aW9ucy5uZXQvb3B0aW1pemUnLFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ3gtYXBpLWtleSc6IGB0b2tlbiAke3RoaXMuc2V0dGluZ3MucHJvbXB0UGVyZmVjdEtleX1gLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHBhcmFtcyk7XG5cbiAgICAgICAgaWYgKCdwcm9tcHRPcHRpbWl6ZWQnIGluIHJlc3BvbnNlLmpzb24ucmVzdWx0KSByZXR1cm4gcmVzcG9uc2UuanNvbi5yZXN1bHQucHJvbXB0T3B0aW1pemVkIGFzIHN0cmluZztcbiAgICAgICAgZWxzZSB0aHJvdyBuZXcgRXJyb3IoJ1Byb21wdCBQZXJmZWN0IEFQSTogJyArIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmpzb24pKTtcbiAgICB9XG5cbiAgICBhc3luYyBnZW5lcmF0ZVRleHQocHJvbXB0OiBzdHJpbmcsIGVkaXRvcjogRWRpdG9yLCBjdXJyZW50TG46IG51bWJlciwgY29udGV4dFByb21wdD86IHN0cmluZykge1xuICAgICAgICBpZiAocHJvbXB0Lmxlbmd0aCA8IDEpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgcHJvbXB0LicpO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hcGlLZXkubGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSBLZXkgaXMgbm90IHByb3ZpZGVkLicpO1xuXG4gICAgICAgIGxldCBuZXdQcm9tcHQgPSBwcm9tcHQ7XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudXNlUHJvbXB0UGVyZmVjdCkge1xuICAgICAgICAgICAgbmV3UHJvbXB0ID0gYXdhaXQgdGhpcy5pbXByb3ZlUHJvbXB0KHByb21wdCwgJ2NoYXRncHQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XG5cbiAgICAgICAgaWYgKGNvbnRleHRQcm9tcHQpIHtcbiAgICAgICAgICAgIG1lc3NhZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIHJvbGU6ICdzeXN0ZW0nLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnRleHRQcm9tcHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNldHRpbmdzLnVzZVNlYXJjaEVuZ2luZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VhcmNoUmVzdWx0ID0gYXdhaXQgdGhpcy5zZWFyY2hUZXh0KHByb21wdCk7XG4gICAgICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnQXMgYW4gYXNzaXN0YW50IHdobyBjYW4gbGVhcm4gaW5mb3JtYXRpb24gZnJvbSB3ZWIgc2VhcmNoIHJlc3VsdHMsIHlvdXIgdGFzayBpcyB0byBpbmNvcnBvcmF0ZSBpbmZvcm1hdGlvbiBmcm9tIGEgd2ViIHNlYXJjaCByZXN1bHQgaW50byB5b3VyIGFuc3dlcnMgd2hlbiByZXNwb25kaW5nIHRvIHF1ZXN0aW9ucy4gWW91ciByZXNwb25zZSBzaG91bGQgaW5jbHVkZSB0aGUgcmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSB5b3VyIGtub3dsZWRnZSBhbmQgdGhlIHdlYiBzZWFyY2ggcmVzdWx0IGFuZCBwcm92aWRlIHRoZSBzb3VyY2UgbWFya2Rvd24gVVJMIG9mIHRoZSBpbmZvcm1hdGlvbi4gUGxlYXNlIG5vdGUgdGhhdCB5b3Ugc2hvdWxkIGJlIGFibGUgdG8gaGFuZGxlIHZhcmlvdXMgdHlwZXMgb2YgcXVlc3Rpb25zIGFuZCBzZWFyY2ggcXVlcmllcy4gWW91ciByZXNwb25zZSBzaG91bGQgYWxzbyBiZSBjbGVhciBhbmQgY29uY2lzZSB3aGlsZSBpbmNvcnBvcmF0aW5nIGFsbCByZWxldmFudCBpbmZvcm1hdGlvbiBmcm9tIHRoZSB3ZWIgc2VhcmNoIHJlc3VsdHMuIEhlcmUgYXJlIHRoZSB3ZWIgc2VhcmNoIHJlc3VsdDogXFxuXFxuICcgKyBKU09OLnN0cmluZ2lmeShzZWFyY2hSZXN1bHQpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBtZXNzYWdlcy5wdXNoKHtcbiAgICAgICAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6IG5ld1Byb21wdCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgIG1vZGVsOiB0aGlzLnNldHRpbmdzLm1vZGVsLFxuICAgICAgICAgICAgbWVzc2FnZXM6IG1lc3NhZ2VzLFxuICAgICAgICAgICAgc3RyZWFtOiB0cnVlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEvY2hhdC9jb21wbGV0aW9ucycsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgYm9keTogYm9keSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ3RleHQvZXZlbnQtc3RyZWFtJyxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy5zZXR0aW5ncy5hcGlLZXksXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yUmVzcG9uc2UgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvclJlc3BvbnNlICYmIGVycm9yUmVzcG9uc2UuZXJyb3IubWVzc2FnZSA/IGVycm9yUmVzcG9uc2UuZXJyb3IubWVzc2FnZSA6IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yLiAke2Vycm9yTWVzc2FnZX1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHk/LmdldFJlYWRlcigpO1xuICAgICAgICBpZiAoIXJlYWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyByZXNwb25zZSBib2R5IHJlYWRlciBhdmFpbGFibGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBMblRvV3JpdGUgPSB0aGlzLmdldE5leHROZXdMaW5lKGVkaXRvciwgY3VycmVudExuKTtcbiAgICAgICAgZWRpdG9yLnNldExpbmUoTG5Ub1dyaXRlKyssICdcXG4nKTtcbiAgICAgICAgbGV0IGVuZCA9IGZhbHNlO1xuICAgICAgICBsZXQgYnVmZmVyID0gJyc7XG4gICAgICAgIHdoaWxlICghZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgZW5kID0gZG9uZTtcbiAgICAgICAgICAgIGNvbnN0IGNodW5rID0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKHZhbHVlKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjaHVuay5zcGxpdCgnXFxuJyk7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZGF0dW0gb2YgZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXR1bS50cmltKCkgPT09ICdkYXRhOiBbRE9ORV0nKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZGF0dW0uc3RhcnRzV2l0aCgnZGF0YTonKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShkYXR1bS5zdWJzdHJpbmcoNikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ2Vycm9yJyBpbiBqc29uKSB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yOiAnICsganNvbi5lcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoJ2Nob2ljZXMnIGluIGpzb24pKSB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yOiAnICsgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ2NvbnRlbnQnIGluIGpzb24uY2hvaWNlc1swXS5kZWx0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IGpzb24uY2hvaWNlc1swXS5kZWx0YS5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPCAxKSBidWZmZXIgKz0gdGV4dC50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgd29yZCBvZiBsaW5lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldExpbmUoTG5Ub1dyaXRlLCBlZGl0b3IuZ2V0TGluZShMblRvV3JpdGUrKykgKyB3b3JkICsgJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldExpbmUoTG5Ub1dyaXRlLCBlZGl0b3IuZ2V0TGluZShMblRvV3JpdGUpICsgdGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVkaXRvci5zZXRMaW5lKExuVG9Xcml0ZSwgZWRpdG9yLmdldExpbmUoTG5Ub1dyaXRlKSArICdcXG4nKTtcbiAgICB9XG5cbiAgICBnZXROZXh0TmV3TGluZShlZGl0b3I6IEVkaXRvciwgTG46IG51bWJlcikge1xuICAgICAgICBsZXQgbmV3TGluZSA9IExuO1xuICAgICAgICB3aGlsZSAoZWRpdG9yLmdldExpbmUobmV3TGluZSkudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGlmIChuZXdMaW5lID09IGVkaXRvci5sYXN0TGluZSgpKSBlZGl0b3Iuc2V0TGluZShuZXdMaW5lLCBlZGl0b3IuZ2V0TGluZShuZXdMaW5lKSArICdcXG4nKTtcbiAgICAgICAgICAgIG5ld0xpbmUrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TGluZTtcbiAgICB9XG5cbiAgICB3cml0ZVRleHQoZWRpdG9yOiBFZGl0b3IsIExuVG9Xcml0ZTogbnVtYmVyLCB0ZXh0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgbmV3TGluZSA9IHRoaXMuZ2V0TmV4dE5ld0xpbmUoZWRpdG9yLCBMblRvV3JpdGUpO1xuICAgICAgICBlZGl0b3Iuc2V0TGluZShuZXdMaW5lLCAnXFxuJyArIHRleHQudHJpbSgpICsgJ1xcbicpO1xuICAgICAgICByZXR1cm4gbmV3TGluZTtcbiAgICB9XG5cbiAgICBhc3luYyBnZXRJbWFnZUJhc2U2NCh1cmw6IHN0cmluZykge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZXF1ZXN0VXJsKHVybCkuYXJyYXlCdWZmZXI7XG4gICAgICAgIHJldHVybiBhcnJheUJ1ZmZlclRvQmFzZTY0KGJ1ZmZlcik7XG4gICAgfVxuXG4gICAgYXN5bmMgZ2VuZXJhdGVJbWFnZShwcm9tcHQ6IHN0cmluZykge1xuICAgICAgICBpZiAocHJvbXB0Lmxlbmd0aCA8IDEpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgcHJvbXB0LicpO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5hcGlLZXkubGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSBLZXkgaXMgbm90IHByb3ZpZGVkLicpO1xuXG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSBuZXcgQ29uZmlndXJhdGlvbih7XG4gICAgICAgICAgICBhcGlLZXk6IHRoaXMuc2V0dGluZ3MuYXBpS2V5LFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSUFwaShjb25maWd1cmF0aW9uKTtcblxuICAgICAgICBsZXQgbmV3UHJvbXB0ID0gcHJvbXB0O1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnVzZVByb21wdFBlcmZlY3QpIHtcbiAgICAgICAgICAgIG5ld1Byb21wdCA9IGF3YWl0IHRoaXMuaW1wcm92ZVByb21wdChwcm9tcHQsICdkYWxsZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBvcGVuYWkuY3JlYXRlSW1hZ2Uoe1xuICAgICAgICAgICAgcHJvbXB0OiBuZXdQcm9tcHQsXG4gICAgICAgICAgICBuOiAxLFxuICAgICAgICAgICAgc2l6ZTogdGhpcy5zZXR0aW5ncy5pbWdTaXplIGFzIENyZWF0ZUltYWdlUmVxdWVzdFNpemVFbnVtLFxuICAgICAgICAgICAgcmVzcG9uc2VfZm9ybWF0OiAnYjY0X2pzb24nXG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yLiAke2Vycm9yLnJlc3BvbnNlLmRhdGEuZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcmVzcG9uc2UgcmVjZWl2ZWQhYCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3IhICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc2V0dGluZ3MuaW1nU2l6ZS5zcGxpdCgneCcpWzBdO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXRoU3RyaW5nID0gdGhpcy5nZXRDdXJyZW50UGF0aCgpO1xuXG4gICAgICAgIGNvbnN0IGZpbGVwYXRoID0gYXdhaXQgdGhpcy5nZXRBdHRhY2htZW50RGlyKCkudGhlbigoYXR0YWNobWVudFBhdGgpID0+IHtcbiAgICAgICAgICAgIGxldCBkaXIgPSAnJ1xuICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnRQYXRoID09ICcnIHx8IGF0dGFjaG1lbnRQYXRoID09ICcvJykgZGlyID0gJyc7XG4gICAgICAgICAgICBlbHNlIGlmIChhdHRhY2htZW50UGF0aC5zdGFydHNXaXRoKCcuLycpKSBkaXIgPSBjdXJyZW50UGF0aFN0cmluZyArICcvJyArIGF0dGFjaG1lbnRQYXRoLnN1YnN0cmluZygyKTtcbiAgICAgICAgICAgIGVsc2UgZGlyID0gYXR0YWNobWVudFBhdGg7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBkaXIudHJpbSgpICsgJy8nICsgdGhpcy5nZW5lcmF0ZVJhbmRvbVN0cmluZygyMCkgKyAnLnBuZyc7XG4gICAgICAgICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC9cXC8vZywgJy8nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGJhc2U2NCA9IHJlc3BvbnNlLmRhdGEuZGF0YVswXS5iNjRfanNvbiBhcyBzdHJpbmc7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpO1xuXG5cbiAgICAgICAgY29uc3QgZmlsZURpciA9IGZpbGVwYXRoLnNwbGl0KCcvJylcbiAgICAgICAgaWYgKGZpbGVEaXIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgZmlsZURpci5wb3AoKTtcbiAgICAgICAgICAgIGNvbnN0IGRpclBhdGggPSBmaWxlRGlyLmpvaW4oJy8nKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChkaXJQYXRoKSBpbnN0YW5jZW9mIFRGb2xkZXI7XG4gICAgICAgICAgICBpZiAoIWV4aXN0cykgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlRm9sZGVyKGRpclBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlQmluYXJ5KGZpbGVwYXRoLCBidWZmZXIpO1xuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLnNhdmVJbWcgPT0gJ2F0dGFjaG1lbnQnKSB7XG4gICAgICAgICAgICByZXR1cm4gYCFbJHtzaXplfV0oJHtlbmNvZGVVUkkoZmlsZXBhdGgpfSlcXG5gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGAhWyR7c2l6ZX1dKGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCwke3Jlc3BvbnNlLmRhdGEuZGF0YVswXS5iNjRfanNvbn0pXFxuYDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlUmFuZG9tU3RyaW5nKGxlbmd0aDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgY2hhcmFjdGVycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSc7XG4gICAgICAgIGNvbnN0IGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGFzeW5jIGdlbmVyYXRlVHJhbnNjcmlwdChhdWRpb0J1ZmZlcjogQXJyYXlCdWZmZXIsIGZpbGV0eXBlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuYXBpS2V5Lmxlbmd0aCA8PSAxKSB0aHJvdyBuZXcgRXJyb3IoJ09wZW5BSSBBUEkgS2V5IGlzIG5vdCBwcm92aWRlZC4nKTtcblxuICAgICAgICAvLyBSZWZlcmVuY2U6IHd3dy5zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzQyNzYxNzMvaG93LXRvLXNlbmQtbXVsdGlwYXJ0LWZvcm0tZGF0YS1wYXlsb2FkLXdpdGgtdHlwZXNjcmlwdC1vYnNpZGlhbi1saWJyYXJ5XG4gICAgICAgIGNvbnN0IE4gPSAxNiAvLyBUaGUgbGVuZ3RoIG9mIG91ciByYW5kb20gYm91bmRyeSBzdHJpbmdcbiAgICAgICAgY29uc3QgcmFuZG9tQm91bmRyeVN0cmluZyA9ICdXZWJLaXRGb3JtQm91bmRhcnknICsgQXJyYXkoTiArIDEpLmpvaW4oKE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpICsgJzAwMDAwMDAwMDAwMDAwMDAwJykuc2xpY2UoMiwgMTgpKS5zbGljZSgwLCBOKVxuICAgICAgICBjb25zdCBwcmVfc3RyaW5nID0gYC0tLS0tLSR7cmFuZG9tQm91bmRyeVN0cmluZ31cXHJcXG5Db250ZW50LURpc3Bvc2l0aW9uOiBmb3JtLWRhdGE7IG5hbWU9XCJmaWxlXCI7IGZpbGVuYW1lPVwiYXVkaW8ubXAzXCJcXHJcXG5Db250ZW50LVR5cGU6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJcXHJcXG5cXHJcXG5gO1xuICAgICAgICBjb25zdCBwb3N0X3N0cmluZyA9IGBcXHJcXG4tLS0tLS0ke3JhbmRvbUJvdW5kcnlTdHJpbmd9XFxyXFxuQ29udGVudC1EaXNwb3NpdGlvbjogZm9ybS1kYXRhOyBuYW1lPVwibW9kZWxcIlxcclxcblxcclxcbndoaXNwZXItMVxcclxcbi0tLS0tLSR7cmFuZG9tQm91bmRyeVN0cmluZ30tLVxcclxcbmBcbiAgICAgICAgY29uc3QgcHJlX3N0cmluZ19lbmNvZGVkID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHByZV9zdHJpbmcpO1xuICAgICAgICBjb25zdCBwb3N0X3N0cmluZ19lbmNvZGVkID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHBvc3Rfc3RyaW5nKTtcbiAgICAgICAgY29uc3QgY29uY2F0ZW5hdGVkID0gYXdhaXQgbmV3IEJsb2IoW3ByZV9zdHJpbmdfZW5jb2RlZCwgYXVkaW9CdWZmZXIsIHBvc3Rfc3RyaW5nX2VuY29kZWRdKS5hcnJheUJ1ZmZlcigpXG5cbiAgICAgICAgY29uc3Qgb3B0aW9uczogUmVxdWVzdFVybFBhcmFtID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS9hdWRpby90cmFuc2NyaXB0aW9ucycsXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBgbXVsdGlwYXJ0L2Zvcm0tZGF0YTsgYm91bmRhcnk9LS0tLSR7cmFuZG9tQm91bmRyeVN0cmluZ31gLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgdGhpcy5zZXR0aW5ncy5hcGlLZXlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib2R5OiBjb25jYXRlbmF0ZWRcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdFVybChvcHRpb25zKS5jYXRjaCgoZXJyb3IpID0+IHsgXG4gICAgICAgICAgICBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnNDAxJykpIHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSBLZXkgaXMgbm90IHZhbGlkLicpO1xuICAgICAgICAgICAgZWxzZSB0aHJvdyBlcnJvcjsgXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoJ3RleHQnIGluIHJlc3BvbnNlLmpzb24pIHJldHVybiByZXNwb25zZS5qc29uLnRleHQ7XG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdFcnJvci4gJyArIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLmpzb24pKTtcbiAgICB9XG5cbiAgICBhc3luYyBodG1sVG9NYXJrZG93bihodG1sOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh1bmVzY2FwZShodG1sKSwgJ3RleHQvaHRtbCcpO1xuICAgICAgXG4gICAgICAgIGNvbnN0IGJvZHkgPSBkb2MucXVlcnlTZWxlY3RvcignbWFpbicpO1xuXG4gICAgICAgIGlmIChib2R5ID09IG51bGwpIHRocm93IG5ldyBFcnJvcignTm8gc2VhcmNoIHJlc3VsdC4nKTtcblxuICAgICAgICBsZXQgbWFya2Rvd24gPSBib2R5LmlubmVySFRNTDtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88aDE+KC4qPyk8XFwvaDE+L2dpLCAnXFxuIyAkMVxcbicpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxoMj4oLio/KTxcXC9oMj4vZ2ksICdcXG4jIyAkMVxcbicpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxoMz4oLio/KTxcXC9oMz4vZ2ksICdcXG4jIyMgJDFcXG4nKTtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88aDQ+KC4qPyk8XFwvaDQ+L2dpLCAnXFxuIyMjIyAkMVxcbicpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxoNT4oLio/KTxcXC9oNT4vZ2ksICdcXG4jIyMjIyAkMVxcbicpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxoNj4oLio/KTxcXC9oNj4vZ2ksICdcXG4jIyMjIyMgJDFcXG4nKTtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88Yj4oLio/KTxcXC9iPi9naSwgJyoqJDEqKicpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxpPiguKj8pPFxcL2k+L2dpLCAnXyQxXycpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxhIGhyZWY9XCIoLio/KVwiPiguKj8pPFxcL2E+L2dpLCAnWyQyXSgkMSknKTtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88dWw+KC4qPyk8XFwvdWw+L2dpcywgKG1hdGNoLCBwMSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGxpc3RJdGVtcyA9IHAxLnNwbGl0KCc8L2xpPicpO1xuICAgICAgICAgIGxpc3RJdGVtcy5wb3AoKTsgXG4gICAgICAgICAgY29uc3QgbWFya2Rvd25MaXN0SXRlbXMgPSBsaXN0SXRlbXMubWFwKChpdGVtOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gaXRlbS5yZXBsYWNlKCc8bGk+JywgJy0gJyk7XG4gICAgICAgICAgICByZXR1cm4gbGlzdEl0ZW0udHJpbSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBtYXJrZG93bkxpc3RJdGVtcy5qb2luKCdcXG4nKSArICdcXG4nO1xuICAgICAgICB9KTtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88cD4oLio/KTxcXC9wPi9naXMsICckMVxcbicpO1xuICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnJlcGxhY2UoLzxicj4vZ2ksICdcXG4nKTtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88aHI+L2dpLCAnLS0tJyk7XG4gICAgICAgIG1hcmtkb3duID0gbWFya2Rvd24ucmVwbGFjZSgvPFxcLz9jb2RlPi9naSwgJ2AnKTtcbiAgICAgICAgbWFya2Rvd24gPSBtYXJrZG93bi5yZXBsYWNlKC88Lio/Pi9nLCAnJykudHJpbSgpO1xuICAgICAgICBcbiAgICAgICAgbGV0IHRva2VuTGltaXQgPSAyMDQ4O1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5tb2RlbCBpbiBUT0tFTl9MSU1JVFMpIHRva2VuTGltaXQgPSBUT0tFTl9MSU1JVFNbdGhpcy5zZXR0aW5ncy5tb2RlbF07XG5cbiAgICAgICAgaWYgKG1hcmtkb3duLmxlbmd0aCA+IHRva2VuTGltaXQgKiAyKSB7XG4gICAgICAgICAgICBtYXJrZG93biA9IG1hcmtkb3duLnN1YnN0cmluZygwLCB0b2tlbkxpbWl0ICogMik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWFya2Rvd247XG4gICAgICB9XG4gICAgICBcblxuICAgIGFzeW5jIHNlYXJjaFRleHRXaXRob3V0S2V5KHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly93d3cuYmluZy5jb20vc2VhcmNoP3E9JyArIGVuY29kZVVSSUNvbXBvbmVudChxdWVyeSksXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHBhcmFtcyk7XG4gICAgICAgIHJldHVybiB0aGlzLmh0bWxUb01hcmtkb3duKHJlc3BvbnNlLnRleHQpLnRoZW4oKG1hcmtkb3duKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtYXJrZG93bilcbiAgICAgICAgICAgIHJldHVybiBtYXJrZG93bjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2VhcmNoVGV4dFdpdGhLZXkocXVlcnk6IHN0cmluZykge1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB7XG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2FwaS5iaW5nLm1pY3Jvc29mdC5jb20vdjcuMC9zZWFyY2g/cT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KSxcbiAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgICdPY3AtQXBpbS1TdWJzY3JpcHRpb24tS2V5JzogdGhpcy5zZXR0aW5ncy5iaW5nU2VhcmNoS2V5XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHBhcmFtcykuY2F0Y2goKGVycm9yKSA9PiB7IFxuICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJzQwMScpKSB0aHJvdyBuZXcgRXJyb3IoJ0JpbmcgV2ViIFNlYXJjaCBBUEkgS2V5IGlzIG5vdCB2YWxpZC4nKTtcbiAgICAgICAgICAgIGVsc2UgdGhyb3cgZXJyb3I7IFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoJ3dlYlBhZ2VzJyBpbiByZXNwb25zZS5qc29uICYmICd2YWx1ZScgaW4gcmVzcG9uc2UuanNvbi53ZWJQYWdlcykgcmV0dXJuIHJlc3BvbnNlLmpzb24ud2ViUGFnZXMudmFsdWU7XG4gICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdObyB3ZWIgc2VhcmNoIHJlc3VsdHM6ICcgKyBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5qc29uKSk7XG4gICAgfVxuXG4gICAgYXN5bmMgc2VhcmNoVGV4dChxdWVyeTogc3RyaW5nKSB7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmJpbmdTZWFyY2hLZXkubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoVGV4dFdpdGhLZXkocXVlcnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoVGV4dFdpdGhvdXRLZXkocXVlcnkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0QXR0YWNobWVudERpcigpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghYWN0aXZlRmlsZSkgdGhyb3cgbmV3IEVycm9yKCdObyBhY3RpdmUgZmlsZScpO1xuICAgICAgICBjb25zdCBkaXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBdmFpbGFibGVQYXRoRm9yQXR0YWNobWVudHMoYWN0aXZlRmlsZS5iYXNlbmFtZSwgYWN0aXZlRmlsZT8uZXh0ZW5zaW9uLCBhY3RpdmVGaWxlKTsgIC8vIGdldEF2YWlsYWJsZVBhdGhGb3JBdHRhY2htZW50cyBpcyB1bmRvY3VtZW50ZWRcbiAgICAgICAgcmV0dXJuIGRpcjtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50UGF0aCgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghYWN0aXZlRmlsZSkgdGhyb3cgbmV3IEVycm9yKCdObyBhY3RpdmUgZmlsZScpO1xuICAgICAgICBjb25zdCBjdXJyZW50UGF0aCA9IGFjdGl2ZUZpbGUucGF0aC5zcGxpdCgnLycpO1xuICAgICAgICBjdXJyZW50UGF0aC5wb3AoKTtcbiAgICAgICAgY29uc3QgY3VycmVudFBhdGhTdHJpbmcgPSBjdXJyZW50UGF0aC5qb2luKCcvJyk7XG4gICAgICAgIHJldHVybiBjdXJyZW50UGF0aFN0cmluZztcbiAgICB9XG5cbiAgICBhc3luYyBmaW5kRmlsZVBhdGgodGV4dDogc3RyaW5nLCByZWdleDogUmVnRXhwW10pIHtcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBhd2FpdCB0aGlzLmdldEF0dGFjaG1lbnREaXIoKS50aGVuKChhdHRhY2htZW50UGF0aCkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gJyc7XG4gICAgICAgICAgICBsZXQgcmVzdWx0OiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsO1xuICAgICAgICAgICAgZm9yIChjb25zdCByZWcgb2YgcmVnZXgpIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKHJlc3VsdCA9IHJlZy5leGVjKHRleHQpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZSA9IG5vcm1hbGl6ZVBhdGgoZGVjb2RlVVJJKHJlc3VsdFswXSkpLnRyaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaWxlbmFtZSA9PSAnJykgdGhyb3cgbmV3IEVycm9yKCdObyBmaWxlIGZvdW5kIGluIHRoZSB0ZXh0LicpO1xuXG4gICAgICAgICAgICBjb25zdCBmaWxlSW5TcGVjaWZpY0ZvbGRlciA9IGZpbGVuYW1lLmNvbnRhaW5zKCcvJyk7XG4gICAgICAgICAgICBjb25zdCBBdHRJblJvb3RGb2xkZXIgPSBhdHRhY2htZW50UGF0aCA9PT0gJycgfHwgYXR0YWNobWVudFBhdGggPT09ICcvJztcbiAgICAgICAgICAgIGNvbnN0IEF0dEluQ3VycmVudEZvbGRlciA9IGF0dGFjaG1lbnRQYXRoLnN0YXJ0c1dpdGgoJy4vJyk7XG4gICAgICAgICAgICBjb25zdCBBdHRJblNwZWNpZmljRm9sZGVyID0gIUF0dEluUm9vdEZvbGRlciAmJiAhQXR0SW5DdXJyZW50Rm9sZGVyO1xuXG4gICAgICAgICAgICBsZXQgZnVsbFBhdGggPSAnJztcblxuICAgICAgICAgICAgaWYgKEF0dEluUm9vdEZvbGRlciB8fCBmaWxlSW5TcGVjaWZpY0ZvbGRlcikgZnVsbFBhdGggPSBmaWxlbmFtZTtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChBdHRJblNwZWNpZmljRm9sZGVyKSBmdWxsUGF0aCA9IGF0dGFjaG1lbnRQYXRoICsgJy8nICsgZmlsZW5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKEF0dEluQ3VycmVudEZvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHRGb2xkZXIgPSBhdHRhY2htZW50UGF0aC5zdWJzdHJpbmcoMik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHRGb2xkZXIubGVuZ3RoID09IDApIGZ1bGxQYXRoID0gdGhpcy5nZXRDdXJyZW50UGF0aCgpICsgJy8nICsgZmlsZW5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgZnVsbFBhdGggPSB0aGlzLmdldEN1cnJlbnRQYXRoKCkgKyAnLycgKyBhdHRGb2xkZXIgKyAnLycgKyBmaWxlbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmdWxsUGF0aCkgaW5zdGFuY2VvZiBUQWJzdHJhY3RGaWxlO1xuICAgICAgICAgICAgaWYgKGV4aXN0cykgcmV0dXJuIGZ1bGxQYXRoO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IHBhdGggPSAnJztcbiAgICAgICAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5nZXRGaWxlcygpLmZvckVhY2goKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUubmFtZSA9PT0gZmlsZW5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggPSBmaWxlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHJldHVybiBwYXRoO1xuICAgICAgICAgICAgICAgIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdGaWxlIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZ1bGxQYXRoIGFzIHN0cmluZztcbiAgICB9XG5cbiAgICBhc3luYyBnZW5lcmF0ZVRleHRXaXRoUGRmKHByb21wdDogc3RyaW5nLCBlZGl0b3I6IEVkaXRvciwgY3VycmVudExuOiBudW1iZXIsIGZpbGVwYXRoOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcGRmQnVmZmVyID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5yZWFkQmluYXJ5KGZpbGVwYXRoKTtcbiAgICAgICAgY29uc3QgcGRmanMgPSBhd2FpdCBsb2FkUGRmSnMoKTtcbiAgICAgICAgY29uc3QgcGRmID0gYXdhaXQgcGRmanMuZ2V0RG9jdW1lbnQocGRmQnVmZmVyKS5wcm9taXNlO1xuXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBgQXMgYW4gYXNzaXN0YW50IHdobyBjYW4gbGVhcm4gZnJvbSB0ZXh0IGdpdmVuIHRvIHlvdSwgYCArXG4gICAgICAgIGB5b3VyIHRhc2sgaXMgdG8gaW5jb3Jwb3JhdGUgaW5mb3JtYXRpb24gZnJvbSB0ZXh0IGdpdmVuIHRvIHlvdSBpbnRvIHlvdXIgYCArXG4gICAgICAgIGBhbnN3ZXJzIHdoZW4gcmVzcG9uZGluZyB0byBxdWVzdGlvbnMuIFlvdXIgcmVzcG9uc2Ugc2hvdWxkIGluY2x1ZGUgdGhlIGAgK1xuICAgICAgICBgcmVsZXZhbnQgaW5mb3JtYXRpb24gZnJvbSB0aGUgdGV4dCBnaXZlbiB0byB5b3UgYW5kIHByb3ZpZGUgYXR0cmlidXRpb24gYCArIFxuICAgICAgICBgYnkgbWVudGlvbmluZyB0aGUgcGFnZSBudW1iZXIuIEJlbG93IGlzIHRoZSBjb250ZW50LCBgICtcbiAgICAgICAgYHdoaWNoIGlzIGV4dHJhY3RlZCBmcm9tIGEgUERGIGZpbGU6XFxuXFxuYDtcblxuICAgICAgICBsZXQgbWVzc2FnZSA9IGNvbnRleHQ7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBkZi5udW1QYWdlczsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gYXdhaXQgcGRmLmdldFBhZ2UoaSArIDEpO1xuICAgICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHBhZ2UuZ2V0VGV4dENvbnRlbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VDb250ZW50ID0gY29udGVudC5pdGVtc1xuICAgICAgICAgICAgICAgIC5tYXAoKGl0ZW06IGFueSkgPT4gaXRlbS5zdHIpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigoc3RyOiBzdHJpbmcpID0+IHN0ciAhPT0gJycpXG4gICAgICAgICAgICAgICAgLmpvaW4oJyAnKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICcgJyk7XG4gICAgICAgICAgICBtZXNzYWdlICs9IGBQYWdlICR7aSArIDF9OiBgICsgcGFnZUNvbnRlbnQgKyAnXFxuJztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmdlbmVyYXRlVGV4dChwcm9tcHQsIGVkaXRvciwgY3VycmVudExuLCBtZXNzYWdlKVxuICAgIH1cblxuICAgIGNvbW1hbmRHZW5lcmF0ZVRleHQoZWRpdG9yOiBFZGl0b3IsIHByb21wdDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMbiA9IGVkaXRvci5nZXRDdXJzb3IoJ3RvJykubGluZTtcbiAgICAgICAgaWYgKHRoaXMud3JpdGluZykge1xuICAgICAgICAgICAgbmV3IE5vdGljZSgnR2VuZXJhdG9yIGlzIGFscmVhZHkgaW4gcHJvZ3Jlc3MuJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy53cml0aW5nID0gdHJ1ZTtcbiAgICAgICAgbmV3IE5vdGljZShcIkdlbmVyYXRpbmcgdGV4dC4uLlwiKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVRleHQocHJvbXB0LCBlZGl0b3IsIGN1cnJlbnRMbikudGhlbigodGV4dCkgPT4ge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIlRleHQgY29tcGxldGVkLlwiKTtcbiAgICAgICAgICAgIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29tbWFuZEdlbmVyYXRlVGV4dFdpdGhQZGYoZWRpdG9yOiBFZGl0b3IsIHByb21wdDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRMbiA9IGVkaXRvci5nZXRDdXJzb3IoJ3RvJykubGluZTtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBlZGl0b3IuZ2V0UmFuZ2UoeyBsaW5lOiAwLCBjaDogMCB9LCBwb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gWy8oPzw9XFxbKC4qKV1cXCgpKChbXltcXF1dKSspXFwucGRmKD89XFwpKS9nLFxuICAgICAgICAgICAgLyg/PD1cXFtcXFspKChbXltcXF1dKSspXFwucGRmKD89XV0pL2ddO1xuICAgICAgICB0aGlzLmZpbmRGaWxlUGF0aCh0ZXh0LCByZWdleCkudGhlbigocGF0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMud3JpdGluZykgdGhyb3cgbmV3IEVycm9yKCdHZW5lcmF0b3IgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy4nKTtcbiAgICAgICAgICAgIHRoaXMud3JpdGluZyA9IHRydWU7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGBHZW5lcmF0aW5nIHRleHQgaW4gY29udGV4dCBvZiAke3BhdGh9Li4uYCk7XG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlVGV4dFdpdGhQZGYocHJvbXB0LCBlZGl0b3IsIGN1cnJlbnRMbiwgcGF0aCkudGhlbigodGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJUZXh0IGNvbXBsZXRlZC5cIik7XG4gICAgICAgICAgICAgICAgdGhpcy53cml0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbW1hbmRHZW5lcmF0ZUltYWdlKGVkaXRvcjogRWRpdG9yLCBwcm9tcHQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBjdXJyZW50TG4gPSBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpLmxpbmU7XG4gICAgICAgIGlmICh0aGlzLndyaXRpbmcpIHtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0dlbmVyYXRvciBpcyBhbHJlYWR5IGluIHByb2dyZXNzLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud3JpdGluZyA9IHRydWU7XG4gICAgICAgIG5ldyBOb3RpY2UoXCJHZW5lcmF0aW5nIGltYWdlLi4uXCIpO1xuICAgICAgICB0aGlzLmdlbmVyYXRlSW1hZ2UocHJvbXB0KS50aGVuKCh0ZXh0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLndyaXRlVGV4dChlZGl0b3IsIGN1cnJlbnRMbiwgdGV4dCk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKCdJbWFnZSBHZW5lcmF0ZWQuJyk7XG4gICAgICAgICAgICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy53cml0aW5nID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbW1hbmRHZW5lcmF0ZVRyYW5zY3JpcHQoZWRpdG9yOiBFZGl0b3IpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgIGNvbnN0IHRleHQgPSBlZGl0b3IuZ2V0UmFuZ2UoeyBsaW5lOiAwLCBjaDogMCB9LCBwb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gWy8oPzw9XFxbXFxbKSgoW15bXFxdXSkrKVxcLihtcDN8bXA0fG1wZWd8bXBnYXxtNGF8d2F2fHdlYm0pKD89XV0pL2csXG4gICAgICAgICAgICAvKD88PVxcWyguKildXFwoKSgoW15bXFxdXSkrKVxcLihtcDN8bXA0fG1wZWd8bXBnYXxtNGF8d2F2fHdlYm0pKD89XFwpKS9nXTtcbiAgICAgICAgdGhpcy5maW5kRmlsZVBhdGgodGV4dCwgcmVnZXgpLnRoZW4oKHBhdGgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVUeXBlID0gcGF0aC5zcGxpdCgnLicpLnBvcCgpO1xuICAgICAgICAgICAgaWYgKGZpbGVUeXBlID09IHVuZGVmaW5lZCB8fCBmaWxlVHlwZSA9PSBudWxsIHx8IGZpbGVUeXBlID09ICcnKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZSgnTm8gYXVkaW8gZmlsZSBmb3VuZCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLmV4aXN0cyhwYXRoKS50aGVuKChleGlzdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdHMpIHRocm93IG5ldyBFcnJvcihwYXRoICsgJyBkb2VzIG5vdCBleGlzdCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5hZGFwdGVyLnJlYWRCaW5hcnkocGF0aCkudGhlbigoYXVkaW9CdWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLndyaXRpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdHZW5lcmF0b3IgaXMgYWxyZWFkeSBpbiBwcm9ncmVzcy4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkdlbmVyYXRpbmcgdHJhbnNjcmlwdC4uLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVUcmFuc2NyaXB0KGF1ZGlvQnVmZmVyLCBmaWxlVHlwZSkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZVRleHQoZWRpdG9yLCBwb3NpdGlvbi5saW5lLCByZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1RyYW5zY3JpcHQgR2VuZXJhdGVkLicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoZXJyb3IubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgbmV3IE5vdGljZShlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuICAgICAgICB0aGlzLndyaXRpbmcgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICd0ZXh0LXByb21wdCcsXG4gICAgICAgICAgICBuYW1lOiAnR2VuZXJhdGUgdGV4dCBmcm9tIHByb21wdCcsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvblN1Ym1pdCA9IChwcm9tcHQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRHZW5lcmF0ZVRleHQoZWRpdG9yLCBwcm9tcHQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbmV3IFByb21wdE1vZGFsKHRoaXMuYXBwLCBcIlwiLCBvblN1Ym1pdCkub3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdpbWctcHJvbXB0JyxcbiAgICAgICAgICAgIG5hbWU6ICdHZW5lcmF0ZSBhbiBpbWFnZSBmcm9tIHByb21wdCcsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvblN1Ym1pdCA9IChwcm9tcHQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRHZW5lcmF0ZUltYWdlKGVkaXRvciwgcHJvbXB0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG5ldyBQcm9tcHRNb2RhbCh0aGlzLmFwcCwgXCJcIiwgb25TdWJtaXQpLm9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAndGV4dC1saW5lJyxcbiAgICAgICAgICAgIG5hbWU6ICdHZW5lcmF0ZSB0ZXh0IGZyb20gdGhlIGN1cnJlbnQgbGluZScsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGVkaXRvci5nZXRMaW5lKHBvc2l0aW9uLmxpbmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEdlbmVyYXRlVGV4dChlZGl0b3IsIGxpbmVDb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnaW1nLWxpbmUnLFxuICAgICAgICAgICAgbmFtZTogJ0dlbmVyYXRlIGFuIGltYWdlIGZyb20gdGhlIGN1cnJlbnQgbGluZScsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ29udGVudCA9IGVkaXRvci5nZXRMaW5lKHBvc2l0aW9uLmxpbmUpO1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEdlbmVyYXRlSW1hZ2UoZWRpdG9yLCBsaW5lQ29udGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3RleHQtc2VsZWN0ZWQnLFxuICAgICAgICAgICAgbmFtZTogJ0dlbmVyYXRlIHRleHQgZnJvbSB0aGUgc2VsZWN0ZWQgdGV4dCcsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kR2VuZXJhdGVUZXh0KGVkaXRvciwgc2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnaW1nLXNlbGVjdGVkJyxcbiAgICAgICAgICAgIG5hbWU6ICdHZW5lcmF0ZSBhbiBpbWFnZSBmcm9tIHRoZSBzZWxlY3RlZCB0ZXh0JyxcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiR2VuZXJhdGluZyBpbWFnZS4uLlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRHZW5lcmF0ZUltYWdlKGVkaXRvciwgc2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAnYXVkaW8tdHJhbnNjcmlwdCcsXG4gICAgICAgICAgICBuYW1lOiAnR2VuZXJhdGUgYSB0cmFuc2NyaXB0IGZyb20gdGhlIGFib3ZlIGF1ZGlvJyxcbiAgICAgICAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IsIHZpZXc6IE1hcmtkb3duVmlldykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29tbWFuZEdlbmVyYXRlVHJhbnNjcmlwdChlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6ICdwZGYtcHJvbXB0JyxcbiAgICAgICAgICAgIG5hbWU6ICdHZW5lcmF0ZSB0ZXh0IGZyb20gcHJvbXB0IGluIGNvbnRleHQgb2YgdGhlIGFib3ZlIFBERicsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBvblN1Ym1pdCA9IChwcm9tcHQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRHZW5lcmF0ZVRleHRXaXRoUGRmKGVkaXRvciwgcHJvbXB0KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIG5ldyBQcm9tcHRNb2RhbCh0aGlzLmFwcCwgXCJcIiwgb25TdWJtaXQpLm9wZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiAncGRmLWxpbmUnLFxuICAgICAgICAgICAgbmFtZTogJ0dlbmVyYXRlIHRleHQgZnJvbSB0aGUgY3VycmVudCBsaW5lIGluIGNvbnRleHQgb2YgdGhlIGFib3ZlIFBERicsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGVkaXRvci5nZXRDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lQ290ZW50ID0gZWRpdG9yLmdldExpbmUocG9zaXRpb24ubGluZSlcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRHZW5lcmF0ZVRleHRXaXRoUGRmKGVkaXRvciwgbGluZUNvdGVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogJ3BkZi1zZWxlY3RlZCcsXG4gICAgICAgICAgICBuYW1lOiAnR2VuZXJhdGUgdGV4dCBmcm9tIHRoZSBzZWxlY3RlZCB0ZXh0IGluIGNvbnRleHQgb2YgdGhlIGFib3ZlIFBERicsXG4gICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kR2VuZXJhdGVUZXh0V2l0aFBkZihlZGl0b3IsIHNlbGVjdGVkVGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGV4dHJhQ29tbWFuZHNGb3JTZWxlY3RlZCA9IHRoaXMuc2V0dGluZ3MucHJvbXB0c0ZvclNlbGVjdGVkLnNwbGl0KCdcXG4nKTtcbiAgICAgICAgZm9yIChsZXQgY29tbWFuZCBvZiBleHRyYUNvbW1hbmRzRm9yU2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIGNvbW1hbmQgPSBjb21tYW5kLnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChjb21tYW5kID09IG51bGwgfHwgY29tbWFuZCA9PSB1bmRlZmluZWQgfHwgY29tbWFuZC5sZW5ndGggPCAxKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGNpZCA9IGNvbW1hbmQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICctJyk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgICAgIGlkOiBjaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY29tbWFuZCxcbiAgICAgICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9tcHQgPSAnWW91IGFyZSBhbiBhc3Npc3RhbnQgd2hvIGNhbiBsZWFybiBmcm9tIHRoZSB0ZXh0IEkgZ2l2ZSB0byB5b3UuIEhlcmUgaXMgdGhlIHRleHQgc2VsZWN0ZWQ6XFxuXFxuJyArIHNlbGVjdGVkVGV4dCArICdcXG5cXG4nICsgY29tbWFuZDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kR2VuZXJhdGVUZXh0KGVkaXRvciwgcHJvbXB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV4dHJhQ29tbWFuZHNGb3JQZGYgPSB0aGlzLnNldHRpbmdzLnByb21wdHNGb3JQZGYuc3BsaXQoJ1xcbicpO1xuICAgICAgICBmb3IgKGxldCBjb21tYW5kIG9mIGV4dHJhQ29tbWFuZHNGb3JQZGYpIHtcbiAgICAgICAgICAgIGNvbW1hbmQgPSBjb21tYW5kLnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChjb21tYW5kID09IG51bGwgfHwgY29tbWFuZCA9PSB1bmRlZmluZWQgfHwgY29tbWFuZC5sZW5ndGggPCAxKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGNpZCA9IGNvbW1hbmQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8gL2csICctJyk7XG4gICAgICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgICAgIGlkOiBjaWQsXG4gICAgICAgICAgICAgICAgbmFtZTogY29tbWFuZCxcbiAgICAgICAgICAgICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yLCB2aWV3OiBNYXJrZG93blZpZXcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kR2VuZXJhdGVUZXh0V2l0aFBkZihlZGl0b3IsIGNvbW1hbmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cblxuICAgICAgICAvLyBUaGlzIGFkZHMgYSBzZXR0aW5ncyB0YWIgc28gdGhlIHVzZXIgY2FuIGNvbmZpZ3VyZSB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHBsdWdpblxuICAgICAgICB0aGlzLmFkZFNldHRpbmdUYWIobmV3IEFwaVNldHRpbmdUYWIodGhpcy5hcHAsIHRoaXMpKTtcblxuICAgICAgICAvLyBXaGVuIHJlZ2lzdGVyaW5nIGludGVydmFscywgdGhpcyBmdW5jdGlvbiB3aWxsIGF1dG9tYXRpY2FsbHkgY2xlYXIgdGhlIGludGVydmFsIHdoZW4gdGhlIHBsdWdpbiBpcyBkaXNhYmxlZC5cbiAgICAgICAgdGhpcy5yZWdpc3RlckludGVydmFsKHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiBjb25zb2xlLmxvZygnc2V0SW50ZXJ2YWwnKSwgNSAqIDYwICogMTAwMCkpO1xuICAgIH1cblxuICAgIG9udW5sb2FkKCkge1xuXG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgfVxufVxuXG5jbGFzcyBBcGlTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgcGx1Z2luOiBBSUNvbW1hbmRlclBsdWdpbjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IEFJQ29tbWFuZGVyUGx1Z2luKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gICAgfVxuXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnT3BlbkFJIEFQSScgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnT3BlbkFJIEFQSSBrZXknKVxuICAgICAgICAgICAgLnNldERlc2MoJ0ZvciB1c2Ugb2YgT3BlbkFJIG1vZGVscycpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIHlvdXIga2V5JylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpS2V5KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXBpS2V5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdNb2RlbCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnU2VsZWN0IHRoZSBtb2RlbCB0byB1c2UgZm9yIGNvbnRlbnQgZ2VuZXJhdGlvbicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ2dwdC0zLjUtdHVyYm8nKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2RlbClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLm1vZGVsID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdJbWFnZSBTaXplJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdTaXplIG9mIHRoZSBpbWFnZSB0byBnZW5lcmF0ZScpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4gZHJvcGRvd25cbiAgICAgICAgICAgICAgICAuYWRkT3B0aW9uKCcyNTZ4MjU2JywgJzI1NngyNTYnKVxuICAgICAgICAgICAgICAgIC5hZGRPcHRpb24oJzUxMng1MTInLCAnNTEyeDUxMicpXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbignMTAyNHgxMDI0JywgJzEwMjR4MTAyNCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmltZ1NpemUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbWdTaXplID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdJbWFnZSBGb3JtYXQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ1NlbGVjdCBob3cgeW91IHdhbnQgdG8gc2F2ZSB0aGUgaW1hZ2UnKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbignYmFzZTY0JywgJ2Jhc2U2NCcpXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbignYXR0YWNobWVudCcsICdhdHRhY2htZW50JylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2F2ZUltZylcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNhdmVJbWcgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1NlYXJjaCBFbmdpbmUnIH0pO1xuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbCgncCcsIHsgdGV4dDogJ1lvdSBtYXkgdXNlIEJpbmcgd2l0aG91dCBhbiBBUEkga2V5LiBVc2UgYW4gQVBJIGtleSB0byBhY2hpZXZlIHRoZSBiZXN0IHBlcmZvcm1hbmNlLicgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnVXNlIHNlYXJjaCBlbmdpbmUnKVxuICAgICAgICAgICAgLnNldERlc2MoXCJVc2UgdGV4dCBnZW5lcmF0b3Igd2l0aCBzZWFyY2ggZW5naW5lXCIpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKHZhbHVlID0+IHZhbHVlXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVNlYXJjaEVuZ2luZSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVNlYXJjaEVuZ2luZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnU2VhcmNoIGVuZ2luZScpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlNlbGVjdCB0aGUgc2VhcmNoIGVuZ2luZSB0byB1c2Ugd2l0aCB0ZXh0IGdlbmVyYXRvclwiKVxuICAgICAgICAgICAgLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbignYmluZycsICdiaW5nJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoRW5naW5lKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoRW5naW5lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdCaW5nIFdlYiBTZWFyY2ggQVBJIGtleScpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkZpbmQgaW4gJ21hbmFnZSBrZXlzJyBpbiBBenVyZSBwb3J0YWxcIilcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBrZXknKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5iaW5nU2VhcmNoS2V5KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYmluZ1NlYXJjaEtleSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnUHJvbXB0IFBlcmZlY3QnIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1VzZSBQcm9tcHQgUGVyZmVjdCcpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlVzZSBQcm9tcHQgUGVyZmVjdCB0byBpbXByb3ZlIHByb21wdHMgZm9yIHRleHQgYW5kIGltYWdlIGdlbmVyYXRpb25cIilcbiAgICAgICAgICAgIC5hZGRUb2dnbGUodmFsdWUgPT4gdmFsdWVcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlUHJvbXB0UGVyZmVjdClcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZVByb21wdFBlcmZlY3QgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnUHJvbXB0IFBlcmZlY3QgQVBJIGtleScpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkZpbmQgaW4gUHJvbXB0IFBlcmZlY3Qgc2V0dGluZ3NcIilcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignRW50ZXIgeW91ciBrZXknKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9tcHRQZXJmZWN0S2V5KVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvbXB0UGVyZmVjdEtleSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnQ3VzdG9tIENvbW1hbmRzJyB9KTtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ3AnLCB7IHRleHQ6ICdSZWxvYWQgdGhlIHBsdWdpbiBhZnRlciBjaGFuZ2luZyBiZWxvdyBzZXR0aW5ncycgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnQ3VzdG9tIGNvbW1hbmQgZm9yIHNlbGVjdGVkIHRleHQnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0ZpbGwgaW4gdGV4dCBnZW5lcmF0b3IgcHJvbXB0cyBsaW5lIGJ5IGxpbmUuIFRoZXkgd2lsbCBhcHBlYXIgYXMgY29tbWFuZHMuJylcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ1N1bW1hcmlzZSB0aGUgdGV4dFxcblRyYW5zbGF0ZSBpbnRvIEVuZ2xpc2gnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9tcHRzRm9yU2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcm9tcHRzRm9yU2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0N1c3RvbSBjb21tYW5kIGZvciBQREYnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0ZpbGwgaW4gdGV4dCBnZW5lcmF0b3IgcHJvbXB0cyBsaW5lIGJ5IGxpbmUuIFRoZXkgd2lsbCBhcHBlYXIgYXMgY29tbWFuZHMuJylcbiAgICAgICAgICAgIC5hZGRUZXh0QXJlYSh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ1N1bW1hcmlzZSB0aGUgUERGJylcbiAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucHJvbXB0c0ZvclBkZilcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnByb21wdHNGb3JQZGYgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgIH1cbn1cbiIsICJpbXBvcnQgeyBBcHAsIE1vZGFsLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmV4cG9ydCBjbGFzcyBQcm9tcHRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgcHJvbXB0OiBzdHJpbmc7XG5cbiAgb25TdWJtaXQ6IChwcm9tcHQ6IHN0cmluZykgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBhcHA6IEFwcCxcbiAgICBkZWZhdWx0cHJvbXB0OiBzdHJpbmcsXG4gICAgb25TdWJtaXQ6IChwcm9tcHQ6IHN0cmluZykgPT4gdm9pZFxuICApIHtcbiAgICBzdXBlcihhcHApO1xuICAgIHRoaXMucHJvbXB0ID0gZGVmYXVsdHByb21wdDtcbiAgICB0aGlzLm9uU3VibWl0ID0gb25TdWJtaXQ7XG4gIH1cblxuICBvbk9wZW4oKSB7XG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cbiAgICBjb250ZW50RWwuY3JlYXRlRWwoXCJoMVwiLCB7IHRleHQ6IFwiXCIgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpLnNldE5hbWUoXCJHZW5lcmF0ZSB0ZXh0IGZyb20gcHJvbXB0XCIpLmFkZFRleHQoKHRleHQpID0+XG4gICAgICB0ZXh0LnNldFZhbHVlKHRoaXMucHJvbXB0KS5vbkNoYW5nZSgodmFsdWUpID0+IHtcbiAgICAgICAgdGhpcy5wcm9tcHQgPSB2YWx1ZTtcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbCkuYWRkQnV0dG9uKChidG4pID0+XG4gICAgICBidG5cbiAgICAgICAgLnNldEJ1dHRvblRleHQoXCJTdWJtaXRcIilcbiAgICAgICAgLnNldEN0YSgpXG4gICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLnByb21wdCk7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG9uQ2xvc2UoKSB7XG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgY29udGVudEVsLmVtcHR5KCk7XG4gIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQSx3RUFBQUEsU0FBQTtBQUFBO0FBRUEsSUFBQUEsUUFBTyxVQUFVLFNBQVMsS0FBSyxJQUFJLFNBQVM7QUFDMUMsYUFBTyxTQUFTLE9BQU87QUFDckIsWUFBSSxPQUFPLElBQUksTUFBTSxVQUFVLE1BQU07QUFDckMsaUJBQVMsSUFBSSxHQUFHLElBQUksS0FBSyxRQUFRLEtBQUs7QUFDcEMsZUFBSyxDQUFDLElBQUksVUFBVSxDQUFDO0FBQUEsUUFDdkI7QUFDQSxlQUFPLEdBQUcsTUFBTSxTQUFTLElBQUk7QUFBQSxNQUMvQjtBQUFBLElBQ0Y7QUFBQTtBQUFBOzs7QUNWQTtBQUFBLGlFQUFBQyxTQUFBO0FBQUE7QUFFQSxRQUFJLE9BQU87QUFJWCxRQUFJLFdBQVcsT0FBTyxVQUFVO0FBUWhDLGFBQVMsUUFBUSxLQUFLO0FBQ3BCLGFBQU8sTUFBTSxRQUFRLEdBQUc7QUFBQSxJQUMxQjtBQVFBLGFBQVMsWUFBWSxLQUFLO0FBQ3hCLGFBQU8sT0FBTyxRQUFRO0FBQUEsSUFDeEI7QUFRQSxhQUFTLFNBQVMsS0FBSztBQUNyQixhQUFPLFFBQVEsUUFBUSxDQUFDLFlBQVksR0FBRyxLQUFLLElB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LEtBQUssT0FBTyxTQUFTLGdCQUFnQixFQUM5QyxTQUFTLE9BQU9BLFdBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMsbUJBQW1CQTtBQUN4QyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDbkMsQ0FBQyxDQUFDO0FBR1YsUUFBSSx5QkFBUSxXQUFXLEVBQ2xCLFFBQVEsd0JBQXdCLEVBQ2hDLFFBQVEsaUNBQWlDLEVBQ3pDLFFBQVEsVUFBUSxLQUNaLGVBQWUsZ0JBQWdCLEVBQy9CLFNBQVMsS0FBSyxPQUFPLFNBQVMsZ0JBQWdCLEVBQzlDLFNBQVMsT0FBTyxVQUFVO0FBQ3ZCLFdBQUssT0FBTyxTQUFTLG1CQUFtQjtBQUN4QyxZQUFNLEtBQUssT0FBTyxhQUFhO0FBQUEsSUFDbkMsQ0FBQyxDQUFDO0FBRVYsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUN0RCxnQkFBWSxTQUFTLEtBQUssRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRXJGLFFBQUkseUJBQVEsV0FBVyxFQUNsQixRQUFRLGtDQUFrQyxFQUMxQyxRQUFRLDRFQUE0RSxFQUNwRixZQUFZLFVBQVEsS0FDaEIsZUFBZSw0Q0FBNEMsRUFDM0QsU0FBUyxLQUFLLE9BQU8sU0FBUyxrQkFBa0IsRUFDaEQsU0FBUyxPQUFPLFVBQVU7QUFDdkIsV0FBSyxPQUFPLFNBQVMscUJBQXFCO0FBQzFDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNuQyxDQUFDLENBQUM7QUFFVixRQUFJLHlCQUFRLFdBQVcsRUFDbEIsUUFBUSx3QkFBd0IsRUFDaEMsUUFBUSw0RUFBNEUsRUFDcEYsWUFBWSxVQUFRLEtBQ2hCLGVBQWUsbUJBQW1CLEVBQ2xDLFNBQVMsS0FBSyxPQUFPLFNBQVMsYUFBYSxFQUMzQyxTQUFTLE9BQU8sVUFBVTtBQUN2QixXQUFLLE9BQU8sU0FBUyxnQkFBZ0I7QUFDckMsWUFBTSxLQUFLLE9BQU8sYUFBYTtBQUFBLElBQ25DLENBQUMsQ0FBQztBQUFBLEVBQ2Q7QUFDSjsiLAogICJuYW1lcyI6IFsibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJtb2R1bGUiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJyZXF1aXJlX2F4aW9zIiwgIm1vZHVsZSIsICJPcGVuQUlBcGkiLCAibW9kdWxlIiwgIm1vZHVsZSIsICJDb25maWd1cmF0aW9uIiwgImV4cG9ydHMiLCAiaW1wb3J0X29ic2lkaWFuIiwgImZ1bGxQYXRoIiwgInRleHQiLCAidmFsdWUiXQp9Cg==
